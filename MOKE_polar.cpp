/* Generated by Cython 0.29.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "extra_compile_args": [
            "-O3"
        ],
        "include_dirs": [
            "C:\\Users\\lsk601\\PycharmProjects\\MaterialReflection\\venv\\lib\\site-packages\\numpy\\core\\include"
        ],
        "language": "c++",
        "name": "MOKE_polar",
        "sources": [
            "MOKE_polar.pyx"
        ]
    },
    "module_name": "MOKE_polar"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_24"
#define CYTHON_HEX_VERSION 0x001D18F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__MOKE_polar
#define __PYX_HAVE_API__MOKE_polar
/* Early includes */
#include "math.h"
#include <string.h>
#include <stdlib.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "MOKE_polar.pyx",
  "Reflectivity_Sigma.pxd",
  "Reflectivity_Pi.pxd",
};
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_t_10Structural_CLayer;
struct __pyx_t_10Structural_Heterostructure;
struct __pyx_t_10Structural_rMemory;
struct __pyx_t_10Structural_MatrixSafer;

/* "Structural.pxd":19
 * from libc.stdlib cimport malloc, free
 * 
 * cdef struct CLayer:             # <<<<<<<<<<<<<<
 *     double Thickness, Roughness
 *     double complex cx, cy, cz, cg
 */
struct __pyx_t_10Structural_CLayer {
  double Thickness;
  double Roughness;
  __pyx_t_double_complex cx;
  __pyx_t_double_complex cy;
  __pyx_t_double_complex cz;
  __pyx_t_double_complex cg;
  __pyx_t_double_complex cxy;
  __pyx_t_double_complex cyx;
  __pyx_t_double_complex cxz;
  __pyx_t_double_complex czx;
  __pyx_t_double_complex cyz;
  __pyx_t_double_complex czy;
  int type;
  int magdir;
};

/* "Structural.pxd":27
 * 
 * 
 * cdef struct Heterostructure:             # <<<<<<<<<<<<<<
 *     int NLayers
 *     int NLayers_types
 */
struct __pyx_t_10Structural_Heterostructure {
  int NLayers;
  int NLayers_types;
  int *MLLENGTH;
  int *MLREP;
  int **MLCOMP;
  struct __pyx_t_10Structural_CLayer *LR;
};

/* "Structural.pxd":42
 * 
 * 
 * cdef struct rMemory:             # <<<<<<<<<<<<<<
 *     double complex cgcg
 *     double complex epsy
 */
struct __pyx_t_10Structural_rMemory {
  __pyx_t_double_complex cgcg;
  __pyx_t_double_complex epsy;
  __pyx_t_double_complex epsz;
  __pyx_t_double_complex Delta31;
  __pyx_t_double_complex C1;
  __pyx_t_double_complex C2;
  __pyx_t_double_complex C3;
  __pyx_t_double_complex B1;
  __pyx_t_double_complex B2;
  __pyx_t_double_complex B;
  __pyx_t_double_complex root;
  __pyx_t_double_complex vz1;
  __pyx_t_double_complex vz2;
  __pyx_t_double_complex PHI1;
  __pyx_t_double_complex PHI2;
  __pyx_t_double_complex PHI3;
  int IsFilled;
};

/* "Structural.pxd":61
 *     int IsFilled
 * 
 * cdef struct MatrixSafer:             # <<<<<<<<<<<<<<
 *     int IsFilled
 *     double complex exx
 */
struct __pyx_t_10Structural_MatrixSafer {
  int IsFilled;
  __pyx_t_double_complex exx;
  __pyx_t_double_complex eyy;
  __pyx_t_double_complex ezz;
  __pyx_t_double_complex Mx;
  __pyx_t_double_complex exyyx;
  __pyx_t_double_complex exzzx;
  __pyx_t_double_complex eyzzy;
  __pyx_t_double_complex crossmag;
  __pyx_t_double_complex summag;
  __pyx_t_double_complex mixmag;
  __pyx_t_double_complex inverseezz;
  __pyx_t_double_complex D21ic;
  __pyx_t_double_complex D23;
  __pyx_t_double_complex D24ic;
  __pyx_t_double_complex D31ic;
  __pyx_t_double_complex D33ic;
  __pyx_t_double_complex D41;
  __pyx_t_double_complex D43;
  __pyx_t_double_complex D44ic;
};

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* None.proto */
static CYTHON_INLINE long __Pyx_mod_long(long, long);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* ToPy.proto */
#define __pyx_PyComplex_FromComplex(z)\
        PyComplex_FromDoubles((double)__Pyx_CREAL(z),\
                              (double)__Pyx_CIMAG(z))

/* FromPy.proto */
static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject*);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'Mathematical_Functions_Reflectivity' */
static double (*__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm)(__pyx_t_double_complex); /*proto*/
static CYTHON_INLINE __pyx_t_double_complex __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_t_double_complex); /*proto*/
static CYTHON_INLINE double __pyx_f_35Mathematical_Functions_Reflectivity_quadr(double); /*proto*/
static CYTHON_INLINE double __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__pyx_t_double_complex); /*proto*/
static CYTHON_INLINE double __pyx_f_35Mathematical_Functions_Reflectivity_two_pi_div_360(void); /*proto*/
static __pyx_t_double_complex (*__pyx_f_35Mathematical_Functions_Reflectivity_ipow)(__pyx_t_double_complex, int); /*proto*/
static void (*__pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside)(__pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2]); /*proto*/
static void (*__pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside)(__pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2]); /*proto*/
static void (*__pyx_f_35Mathematical_Functions_Reflectivity_Invert2x2)(__pyx_t_double_complex (*)[2][2]); /*proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'Structural' */

/* Module declarations from 'Multilayer_Functions_Reflectivity' */
static void (*__pyx_f_33Multilayer_Functions_Reflectivity_FillC0)(__pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2]); /*proto*/
static void (*__pyx_f_33Multilayer_Functions_Reflectivity_Calculate_Multilayer_equation)(__pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], int); /*proto*/
static void (*__pyx_f_33Multilayer_Functions_Reflectivity_Calculate_Multilayer)(__pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, int); /*proto*/
static void (*__pyx_f_33Multilayer_Functions_Reflectivity_Calculate_Multilayer_with_Matrices)(__pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], int); /*proto*/

/* Module declarations from 'Reflectivity_Sigma' */

/* Module declarations from 'Reflectivity_Pi' */

/* Module declarations from 'MOKE_polar' */
static void __pyx_f_10MOKE_polar_Calculate_rt_z(struct __pyx_t_10Structural_rMemory *, struct __pyx_t_10Structural_rMemory *, double, double, double, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex, int, int, __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], double, double); /*proto*/
static void __pyx_f_10MOKE_polar_Fill_rMemory_z(struct __pyx_t_10Structural_rMemory *, double, double, double, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex); /*proto*/
#define __Pyx_MODULE_NAME "MOKE_polar"
extern int __pyx_module_is_main_MOKE_polar;
int __pyx_module_is_main_MOKE_polar = 0;

/* Implementation of 'MOKE_polar' */
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_test;
/* Late includes */

/* "MOKE_polar.pyx":18
 * 
 * 
 * cdef void Fill_rMemory_z(rMemory *Mem, double vy, double vyvy, double omvyvy, double complex chix, double complex chiy, double complex chiz, double complex chig):             # <<<<<<<<<<<<<<
 *     cdef double complex xld, magrest, xldsquared, diftester, diftester2
 * 
 */

static void __pyx_f_10MOKE_polar_Fill_rMemory_z(struct __pyx_t_10Structural_rMemory *__pyx_v_Mem, CYTHON_UNUSED double __pyx_v_vy, double __pyx_v_vyvy, double __pyx_v_omvyvy, __pyx_t_double_complex __pyx_v_chix, __pyx_t_double_complex __pyx_v_chiy, __pyx_t_double_complex __pyx_v_chiz, __pyx_t_double_complex __pyx_v_chig) {
  __pyx_t_double_complex __pyx_v_xld;
  __pyx_t_double_complex __pyx_v_xldsquared;
  __pyx_t_double_complex __pyx_v_diftester;
  __pyx_t_double_complex __pyx_v_diftester2;
  __Pyx_RefNannyDeclarations
  __pyx_t_double_complex __pyx_t_1;
  __pyx_t_double_complex __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Fill_rMemory_z", 0);

  /* "MOKE_polar.pyx":21
 *     cdef double complex xld, magrest, xldsquared, diftester, diftester2
 * 
 *     (Mem[0]).epsy=chiy+1.0             # <<<<<<<<<<<<<<
 *     (Mem[0]).epsz=chiz+1.0
 *     xld=(chix-chiy) + vyvy*(chiy-chiz)/(Mem[0]).epsz
 */
  (__pyx_v_Mem[0]).epsy = __Pyx_c_sum_double(__pyx_v_chiy, __pyx_t_double_complex_from_parts(1.0, 0));

  /* "MOKE_polar.pyx":22
 * 
 *     (Mem[0]).epsy=chiy+1.0
 *     (Mem[0]).epsz=chiz+1.0             # <<<<<<<<<<<<<<
 *     xld=(chix-chiy) + vyvy*(chiy-chiz)/(Mem[0]).epsz
 *     xldsquared = cquadr(xld)
 */
  (__pyx_v_Mem[0]).epsz = __Pyx_c_sum_double(__pyx_v_chiz, __pyx_t_double_complex_from_parts(1.0, 0));

  /* "MOKE_polar.pyx":23
 *     (Mem[0]).epsy=chiy+1.0
 *     (Mem[0]).epsz=chiz+1.0
 *     xld=(chix-chiy) + vyvy*(chiy-chiz)/(Mem[0]).epsz             # <<<<<<<<<<<<<<
 *     xldsquared = cquadr(xld)
 * 
 */
  __pyx_t_1 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0), __Pyx_c_diff_double(__pyx_v_chiy, __pyx_v_chiz));
  if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem[0]).epsz))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 23, __pyx_L1_error)
  }
  __pyx_v_xld = __Pyx_c_sum_double(__Pyx_c_diff_double(__pyx_v_chix, __pyx_v_chiy), __Pyx_c_quot_double(__pyx_t_1, (__pyx_v_Mem[0]).epsz));

  /* "MOKE_polar.pyx":24
 *     (Mem[0]).epsz=chiz+1.0
 *     xld=(chix-chiy) + vyvy*(chiy-chiz)/(Mem[0]).epsz
 *     xldsquared = cquadr(xld)             # <<<<<<<<<<<<<<
 * 
 *     (Mem[0]).C1=(1-vyvy/(Mem[0]).epsz)
 */
  __pyx_v_xldsquared = __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_v_xld);

  /* "MOKE_polar.pyx":26
 *     xldsquared = cquadr(xld)
 * 
 *     (Mem[0]).C1=(1-vyvy/(Mem[0]).epsz)             # <<<<<<<<<<<<<<
 *     (Mem[0]).C2=(Mem[0]).epsy/(Mem[0]).epsz
 *     (Mem[0]).C3=(Mem[0]).C1 #(1-vyvy/(Mem[0]).epsz)
 */
  __pyx_t_1 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
  if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem[0]).epsz))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 26, __pyx_L1_error)
  }
  (__pyx_v_Mem[0]).C1 = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_quot_double(__pyx_t_1, (__pyx_v_Mem[0]).epsz));

  /* "MOKE_polar.pyx":27
 * 
 *     (Mem[0]).C1=(1-vyvy/(Mem[0]).epsz)
 *     (Mem[0]).C2=(Mem[0]).epsy/(Mem[0]).epsz             # <<<<<<<<<<<<<<
 *     (Mem[0]).C3=(Mem[0]).C1 #(1-vyvy/(Mem[0]).epsz)
 *     (Mem[0]).B1=(((Mem[0]).epsy/(Mem[0]).epsz+1)*omvyvy)/2
 */
  if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem[0]).epsz))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 27, __pyx_L1_error)
  }
  (__pyx_v_Mem[0]).C2 = __Pyx_c_quot_double((__pyx_v_Mem[0]).epsy, (__pyx_v_Mem[0]).epsz);

  /* "MOKE_polar.pyx":28
 *     (Mem[0]).C1=(1-vyvy/(Mem[0]).epsz)
 *     (Mem[0]).C2=(Mem[0]).epsy/(Mem[0]).epsz
 *     (Mem[0]).C3=(Mem[0]).C1 #(1-vyvy/(Mem[0]).epsz)             # <<<<<<<<<<<<<<
 *     (Mem[0]).B1=(((Mem[0]).epsy/(Mem[0]).epsz+1)*omvyvy)/2
 *     (Mem[0]).B2=(chiz*(Mem[0]).C2+chix)/2
 */
  __pyx_t_1 = (__pyx_v_Mem[0]).C1;
  (__pyx_v_Mem[0]).C3 = __pyx_t_1;

  /* "MOKE_polar.pyx":29
 *     (Mem[0]).C2=(Mem[0]).epsy/(Mem[0]).epsz
 *     (Mem[0]).C3=(Mem[0]).C1 #(1-vyvy/(Mem[0]).epsz)
 *     (Mem[0]).B1=(((Mem[0]).epsy/(Mem[0]).epsz+1)*omvyvy)/2             # <<<<<<<<<<<<<<
 *     (Mem[0]).B2=(chiz*(Mem[0]).C2+chix)/2
 *     (Mem[0]).root=sqrt(0.25*xldsquared-chig*chig*(Mem[0]).C1)
 */
  if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem[0]).epsz))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 29, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_c_prod_double(__Pyx_c_sum_double(__Pyx_c_quot_double((__pyx_v_Mem[0]).epsy, (__pyx_v_Mem[0]).epsz), __pyx_t_double_complex_from_parts(1, 0)), __pyx_t_double_complex_from_parts(__pyx_v_omvyvy, 0));
  __pyx_t_2 = __pyx_t_double_complex_from_parts(2, 0);
  if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 29, __pyx_L1_error)
  }
  (__pyx_v_Mem[0]).B1 = __Pyx_c_quot_double(__pyx_t_1, __pyx_t_2);

  /* "MOKE_polar.pyx":30
 *     (Mem[0]).C3=(Mem[0]).C1 #(1-vyvy/(Mem[0]).epsz)
 *     (Mem[0]).B1=(((Mem[0]).epsy/(Mem[0]).epsz+1)*omvyvy)/2
 *     (Mem[0]).B2=(chiz*(Mem[0]).C2+chix)/2             # <<<<<<<<<<<<<<
 *     (Mem[0]).root=sqrt(0.25*xldsquared-chig*chig*(Mem[0]).C1)
 * 
 */
  __pyx_t_2 = __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_chiz, (__pyx_v_Mem[0]).C2), __pyx_v_chix);
  __pyx_t_1 = __pyx_t_double_complex_from_parts(2, 0);
  if (unlikely(__Pyx_c_is_zero_double(__pyx_t_1))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 30, __pyx_L1_error)
  }
  (__pyx_v_Mem[0]).B2 = __Pyx_c_quot_double(__pyx_t_2, __pyx_t_1);

  /* "MOKE_polar.pyx":31
 *     (Mem[0]).B1=(((Mem[0]).epsy/(Mem[0]).epsz+1)*omvyvy)/2
 *     (Mem[0]).B2=(chiz*(Mem[0]).C2+chix)/2
 *     (Mem[0]).root=sqrt(0.25*xldsquared-chig*chig*(Mem[0]).C1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_Mem[0]).root = sqrt(__Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.25, 0), __pyx_v_xldsquared), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_v_chig, __pyx_v_chig), (__pyx_v_Mem[0]).C1)));

  /* "MOKE_polar.pyx":35
 * 
 * 
 *     (Mem[0]).B=(Mem[0]).B1+(Mem[0]).B2             # <<<<<<<<<<<<<<
 *     (Mem[0]).vz1=sqrt(((Mem[0]).B+(Mem[0]).root))
 *     (Mem[0]).vz2=sqrt(((Mem[0]).B-(Mem[0]).root))
 */
  (__pyx_v_Mem[0]).B = __Pyx_c_sum_double((__pyx_v_Mem[0]).B1, (__pyx_v_Mem[0]).B2);

  /* "MOKE_polar.pyx":36
 * 
 *     (Mem[0]).B=(Mem[0]).B1+(Mem[0]).B2
 *     (Mem[0]).vz1=sqrt(((Mem[0]).B+(Mem[0]).root))             # <<<<<<<<<<<<<<
 *     (Mem[0]).vz2=sqrt(((Mem[0]).B-(Mem[0]).root))
 * 
 */
  (__pyx_v_Mem[0]).vz1 = sqrt(__Pyx_c_sum_double((__pyx_v_Mem[0]).B, (__pyx_v_Mem[0]).root));

  /* "MOKE_polar.pyx":37
 *     (Mem[0]).B=(Mem[0]).B1+(Mem[0]).B2
 *     (Mem[0]).vz1=sqrt(((Mem[0]).B+(Mem[0]).root))
 *     (Mem[0]).vz2=sqrt(((Mem[0]).B-(Mem[0]).root))             # <<<<<<<<<<<<<<
 * 
 *     diftester= xld/2 -(Mem[0]).root
 */
  (__pyx_v_Mem[0]).vz2 = sqrt(__Pyx_c_diff_double((__pyx_v_Mem[0]).B, (__pyx_v_Mem[0]).root));

  /* "MOKE_polar.pyx":39
 *     (Mem[0]).vz2=sqrt(((Mem[0]).B-(Mem[0]).root))
 * 
 *     diftester= xld/2 -(Mem[0]).root             # <<<<<<<<<<<<<<
 *     diftester2=xld/2 + (Mem[0]).root
 * 
 */
  __pyx_t_1 = __pyx_t_double_complex_from_parts(2, 0);
  if (unlikely(__Pyx_c_is_zero_double(__pyx_t_1))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 39, __pyx_L1_error)
  }
  __pyx_v_diftester = __Pyx_c_diff_double(__Pyx_c_quot_double(__pyx_v_xld, __pyx_t_1), (__pyx_v_Mem[0]).root);

  /* "MOKE_polar.pyx":40
 * 
 *     diftester= xld/2 -(Mem[0]).root
 *     diftester2=xld/2 + (Mem[0]).root             # <<<<<<<<<<<<<<
 * 
 *     if( Cmaxnorm(diftester2) < Cmaxnorm(diftester)  ):
 */
  __pyx_t_1 = __pyx_t_double_complex_from_parts(2, 0);
  if (unlikely(__Pyx_c_is_zero_double(__pyx_t_1))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 40, __pyx_L1_error)
  }
  __pyx_v_diftester2 = __Pyx_c_sum_double(__Pyx_c_quot_double(__pyx_v_xld, __pyx_t_1), (__pyx_v_Mem[0]).root);

  /* "MOKE_polar.pyx":42
 *     diftester2=xld/2 + (Mem[0]).root
 * 
 *     if( Cmaxnorm(diftester2) < Cmaxnorm(diftester)  ):             # <<<<<<<<<<<<<<
 *         (Mem[0]).PHI1=( diftester )/chig
 *     else:
 */
  __pyx_t_3 = ((__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm(__pyx_v_diftester2) < __pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm(__pyx_v_diftester)) != 0);
  if (__pyx_t_3) {

    /* "MOKE_polar.pyx":43
 * 
 *     if( Cmaxnorm(diftester2) < Cmaxnorm(diftester)  ):
 *         (Mem[0]).PHI1=( diftester )/chig             # <<<<<<<<<<<<<<
 *     else:
 *         (Mem[0]).PHI1= chig*(Mem[0]).C1/( diftester2 )
 */
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_chig))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 43, __pyx_L1_error)
    }
    (__pyx_v_Mem[0]).PHI1 = __Pyx_c_quot_double(__pyx_v_diftester, __pyx_v_chig);

    /* "MOKE_polar.pyx":42
 *     diftester2=xld/2 + (Mem[0]).root
 * 
 *     if( Cmaxnorm(diftester2) < Cmaxnorm(diftester)  ):             # <<<<<<<<<<<<<<
 *         (Mem[0]).PHI1=( diftester )/chig
 *     else:
 */
    goto __pyx_L3;
  }

  /* "MOKE_polar.pyx":45
 *         (Mem[0]).PHI1=( diftester )/chig
 *     else:
 *         (Mem[0]).PHI1= chig*(Mem[0]).C1/( diftester2 )             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_c_prod_double(__pyx_v_chig, (__pyx_v_Mem[0]).C1);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_diftester2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 45, __pyx_L1_error)
    }
    (__pyx_v_Mem[0]).PHI1 = __Pyx_c_quot_double(__pyx_t_1, __pyx_v_diftester2);
  }
  __pyx_L3:;

  /* "MOKE_polar.pyx":48
 * 
 * 
 *     (Mem[0]).PHI2=(Mem[0]).PHI1/(Mem[0]).vz2             # <<<<<<<<<<<<<<
 *     #(Mem[0]).PHI1=-((Mem[0]).B2+(Mem[0]).root+   ( ((chiy+chiz)*omvyvy)/2 -chix-(1+chix-vyvy)*chiz )/(Mem[0]).epsz )/chig
 * 
 */
  if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem[0]).vz2))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 48, __pyx_L1_error)
  }
  (__pyx_v_Mem[0]).PHI2 = __Pyx_c_quot_double((__pyx_v_Mem[0]).PHI1, (__pyx_v_Mem[0]).vz2);

  /* "MOKE_polar.pyx":56
 * 
 * 
 *     (Mem[0]).PHI3=(Mem[0]).C3/(Mem[0]).vz2             # <<<<<<<<<<<<<<
 *     (Mem[0]).IsFilled=1
 * 
 */
  if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem[0]).vz2))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 56, __pyx_L1_error)
  }
  (__pyx_v_Mem[0]).PHI3 = __Pyx_c_quot_double((__pyx_v_Mem[0]).C3, (__pyx_v_Mem[0]).vz2);

  /* "MOKE_polar.pyx":57
 * 
 *     (Mem[0]).PHI3=(Mem[0]).C3/(Mem[0]).vz2
 *     (Mem[0]).IsFilled=1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_Mem[0]).IsFilled = 1;

  /* "MOKE_polar.pyx":18
 * 
 * 
 * cdef void Fill_rMemory_z(rMemory *Mem, double vy, double vyvy, double omvyvy, double complex chix, double complex chiy, double complex chiz, double complex chig):             # <<<<<<<<<<<<<<
 *     cdef double complex xld, magrest, xldsquared, diftester, diftester2
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("MOKE_polar.Fill_rMemory_z", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "MOKE_polar.pyx":60
 * 
 * 
 * cdef void Calculate_rt_z(rMemory *Mem1, rMemory *Mem2, double vy, double vyvy, double omvyvy, double complex chix1, double complex chiy1, double complex chiz1, double complex chig1, double complex chix2, double complex chiy2, double complex chiz2, double complex chig2, \             # <<<<<<<<<<<<<<
 *                     int IsMagnetic1, int IsMagnetic2, double complex (*r)[2][2], double complex (*rprime)[2][2], double complex (*t)[2][2], double complex (*tprime)[2][2], double sigma, double k0):
 * 
 */

static void __pyx_f_10MOKE_polar_Calculate_rt_z(struct __pyx_t_10Structural_rMemory *__pyx_v_Mem1, struct __pyx_t_10Structural_rMemory *__pyx_v_Mem2, double __pyx_v_vy, double __pyx_v_vyvy, double __pyx_v_omvyvy, __pyx_t_double_complex __pyx_v_chix1, __pyx_t_double_complex __pyx_v_chiy1, __pyx_t_double_complex __pyx_v_chiz1, CYTHON_UNUSED __pyx_t_double_complex __pyx_v_chig1, __pyx_t_double_complex __pyx_v_chix2, __pyx_t_double_complex __pyx_v_chiy2, __pyx_t_double_complex __pyx_v_chiz2, __pyx_t_double_complex __pyx_v_chig2, int __pyx_v_IsMagnetic1, int __pyx_v_IsMagnetic2, __pyx_t_double_complex (*__pyx_v_r)[2][2], __pyx_t_double_complex (*__pyx_v_rprime)[2][2], __pyx_t_double_complex (*__pyx_v_t)[2][2], __pyx_t_double_complex (*__pyx_v_tprime)[2][2], double __pyx_v_sigma, double __pyx_v_k0) {
  __pyx_t_double_complex __pyx_v_J[2][4];
  __pyx_t_double_complex __pyx_v_difB;
  __pyx_t_double_complex __pyx_v_difvz1vz3;
  __pyx_t_double_complex __pyx_v_difvz1vz4;
  __pyx_t_double_complex __pyx_v_difvz2vz3;
  __pyx_t_double_complex __pyx_v_difvz2vz4;
  __pyx_t_double_complex __pyx_v_divide2;
  double __pyx_v_roughfac;
  __pyx_t_double_complex __pyx_v_save1;
  __pyx_t_double_complex __pyx_v_save3;
  __pyx_t_double_complex __pyx_v_save4;
  __pyx_t_double_complex __pyx_v_ez1ez2;
  PyObject *__pyx_v_sumv11v12 = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __pyx_t_double_complex __pyx_t_2;
  __pyx_t_double_complex __pyx_t_3;
  __pyx_t_double_complex __pyx_t_4;
  __pyx_t_double_complex __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __pyx_t_double_complex __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Calculate_rt_z", 0);

  /* "MOKE_polar.pyx":74
 *     cdef double complex divide2
 *     cdef double complex fac1
 *     cdef double roughfac=-0.5*quadr(sigma*  k0)             # <<<<<<<<<<<<<<
 *     cdef double complex rough
 *     cdef double complex save1
 */
  __pyx_v_roughfac = (-0.5 * __pyx_f_35Mathematical_Functions_Reflectivity_quadr((__pyx_v_sigma * __pyx_v_k0)));

  /* "MOKE_polar.pyx":80
 *     cdef double complex save4
 *     cdef double complex ez1ez2
 *     if( IsMagnetic1 & IsMagnetic2 ):             # <<<<<<<<<<<<<<
 *         Fill_rMemory_z(Mem2, vy, vyvy, omvyvy, chix2, chiy2, chiz2, chig2)
 * 
 */
  __pyx_t_1 = ((__pyx_v_IsMagnetic1 & __pyx_v_IsMagnetic2) != 0);
  if (__pyx_t_1) {

    /* "MOKE_polar.pyx":81
 *     cdef double complex ez1ez2
 *     if( IsMagnetic1 & IsMagnetic2 ):
 *         Fill_rMemory_z(Mem2, vy, vyvy, omvyvy, chix2, chiy2, chiz2, chig2)             # <<<<<<<<<<<<<<
 * 
 *         difB=omvyvy*(chiy1+chiz2*(1+chiy1)-chiy2-chiz1*(1+chiy2))/(2*(Mem1[0]).epsz*(Mem2[0]).epsz)+(Mem1[0]).B2-(Mem2[0]).B2
 */
    __pyx_f_10MOKE_polar_Fill_rMemory_z(__pyx_v_Mem2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_chix2, __pyx_v_chiy2, __pyx_v_chiz2, __pyx_v_chig2);

    /* "MOKE_polar.pyx":83
 *         Fill_rMemory_z(Mem2, vy, vyvy, omvyvy, chix2, chiy2, chiz2, chig2)
 * 
 *         difB=omvyvy*(chiy1+chiz2*(1+chiy1)-chiy2-chiz1*(1+chiy2))/(2*(Mem1[0]).epsz*(Mem2[0]).epsz)+(Mem1[0]).B2-(Mem2[0]).B2             # <<<<<<<<<<<<<<
 *         difvz1vz3=(difB+(Mem1[0]).root-(Mem2[0]).root)/((Mem1[0]).vz1+(Mem2[0]).vz1)
 *         difvz1vz4=(difB+(Mem1[0]).root+(Mem2[0]).root)/((Mem1[0]).vz1+(Mem2[0]).vz2)
 */
    __pyx_t_2 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_omvyvy, 0), __Pyx_c_diff_double(__Pyx_c_diff_double(__Pyx_c_sum_double(__pyx_v_chiy1, __Pyx_c_prod_double(__pyx_v_chiz2, __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1, 0), __pyx_v_chiy1))), __pyx_v_chiy2), __Pyx_c_prod_double(__pyx_v_chiz1, __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1, 0), __pyx_v_chiy2))));
    __pyx_t_3 = __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), (__pyx_v_Mem1[0]).epsz), (__pyx_v_Mem2[0]).epsz);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_3))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 83, __pyx_L1_error)
    }
    __pyx_v_difB = __Pyx_c_diff_double(__Pyx_c_sum_double(__Pyx_c_quot_double(__pyx_t_2, __pyx_t_3), (__pyx_v_Mem1[0]).B2), (__pyx_v_Mem2[0]).B2);

    /* "MOKE_polar.pyx":84
 * 
 *         difB=omvyvy*(chiy1+chiz2*(1+chiy1)-chiy2-chiz1*(1+chiy2))/(2*(Mem1[0]).epsz*(Mem2[0]).epsz)+(Mem1[0]).B2-(Mem2[0]).B2
 *         difvz1vz3=(difB+(Mem1[0]).root-(Mem2[0]).root)/((Mem1[0]).vz1+(Mem2[0]).vz1)             # <<<<<<<<<<<<<<
 *         difvz1vz4=(difB+(Mem1[0]).root+(Mem2[0]).root)/((Mem1[0]).vz1+(Mem2[0]).vz2)
 *         difvz2vz3=(difB-(Mem1[0]).root-(Mem2[0]).root)/((Mem1[0]).vz2+(Mem2[0]).vz1)
 */
    __pyx_t_3 = __Pyx_c_diff_double(__Pyx_c_sum_double(__pyx_v_difB, (__pyx_v_Mem1[0]).root), (__pyx_v_Mem2[0]).root);
    __pyx_t_2 = __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz1, (__pyx_v_Mem2[0]).vz1);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 84, __pyx_L1_error)
    }
    __pyx_v_difvz1vz3 = __Pyx_c_quot_double(__pyx_t_3, __pyx_t_2);

    /* "MOKE_polar.pyx":85
 *         difB=omvyvy*(chiy1+chiz2*(1+chiy1)-chiy2-chiz1*(1+chiy2))/(2*(Mem1[0]).epsz*(Mem2[0]).epsz)+(Mem1[0]).B2-(Mem2[0]).B2
 *         difvz1vz3=(difB+(Mem1[0]).root-(Mem2[0]).root)/((Mem1[0]).vz1+(Mem2[0]).vz1)
 *         difvz1vz4=(difB+(Mem1[0]).root+(Mem2[0]).root)/((Mem1[0]).vz1+(Mem2[0]).vz2)             # <<<<<<<<<<<<<<
 *         difvz2vz3=(difB-(Mem1[0]).root-(Mem2[0]).root)/((Mem1[0]).vz2+(Mem2[0]).vz1)
 *         difvz2vz4=(difB-(Mem1[0]).root+(Mem2[0]).root)/((Mem1[0]).vz2+(Mem2[0]).vz2)
 */
    __pyx_t_2 = __Pyx_c_sum_double(__Pyx_c_sum_double(__pyx_v_difB, (__pyx_v_Mem1[0]).root), (__pyx_v_Mem2[0]).root);
    __pyx_t_3 = __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz1, (__pyx_v_Mem2[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_3))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 85, __pyx_L1_error)
    }
    __pyx_v_difvz1vz4 = __Pyx_c_quot_double(__pyx_t_2, __pyx_t_3);

    /* "MOKE_polar.pyx":86
 *         difvz1vz3=(difB+(Mem1[0]).root-(Mem2[0]).root)/((Mem1[0]).vz1+(Mem2[0]).vz1)
 *         difvz1vz4=(difB+(Mem1[0]).root+(Mem2[0]).root)/((Mem1[0]).vz1+(Mem2[0]).vz2)
 *         difvz2vz3=(difB-(Mem1[0]).root-(Mem2[0]).root)/((Mem1[0]).vz2+(Mem2[0]).vz1)             # <<<<<<<<<<<<<<
 *         difvz2vz4=(difB-(Mem1[0]).root+(Mem2[0]).root)/((Mem1[0]).vz2+(Mem2[0]).vz2)
 * 
 */
    __pyx_t_3 = __Pyx_c_diff_double(__Pyx_c_diff_double(__pyx_v_difB, (__pyx_v_Mem1[0]).root), (__pyx_v_Mem2[0]).root);
    __pyx_t_2 = __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem2[0]).vz1);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 86, __pyx_L1_error)
    }
    __pyx_v_difvz2vz3 = __Pyx_c_quot_double(__pyx_t_3, __pyx_t_2);

    /* "MOKE_polar.pyx":87
 *         difvz1vz4=(difB+(Mem1[0]).root+(Mem2[0]).root)/((Mem1[0]).vz1+(Mem2[0]).vz2)
 *         difvz2vz3=(difB-(Mem1[0]).root-(Mem2[0]).root)/((Mem1[0]).vz2+(Mem2[0]).vz1)
 *         difvz2vz4=(difB-(Mem1[0]).root+(Mem2[0]).root)/((Mem1[0]).vz2+(Mem2[0]).vz2)             # <<<<<<<<<<<<<<
 * 
 *     #    divide1=1.0/(2*(  (Mem1[0]).PHI3    - (Mem1[0]).PHI2 *(Mem1[0]).PHI1))
 */
    __pyx_t_2 = __Pyx_c_sum_double(__Pyx_c_diff_double(__pyx_v_difB, (__pyx_v_Mem1[0]).root), (__pyx_v_Mem2[0]).root);
    __pyx_t_3 = __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem2[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_3))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 87, __pyx_L1_error)
    }
    __pyx_v_difvz2vz4 = __Pyx_c_quot_double(__pyx_t_2, __pyx_t_3);

    /* "MOKE_polar.pyx":90
 * 
 *     #    divide1=1.0/(2*(  (Mem1[0]).PHI3    - (Mem1[0]).PHI2 *(Mem1[0]).PHI1))
 *         ez1ez2=(Mem1[0]).epsz*(Mem2[0]).epsz             # <<<<<<<<<<<<<<
 *         J[0][0]=( (Mem1[0]).PHI3*(1+(Mem2[0]).vz1/(Mem1[0]).vz1) - (Mem2[0]).PHI1*(Mem1[0]).PHI2*(1+((Mem2[0]).vz1/(Mem1[0]).vz1)*( (Mem1[0]).C1/(Mem2[0]).C1 ) ) )
 *         J[0][2]=( (Mem1[0]).PHI3*difvz1vz3/(Mem1[0]).vz1 - (Mem2[0]).PHI1*(Mem1[0]).PHI2/((Mem2[0]).C1*(Mem1[0]).vz1)*(difvz1vz3-(difvz1vz3+chiz1*(Mem1[0]).vz1-(Mem2[0]).vz1*chiz2)*vyvy/(ez1ez2)  ) )
 */
    __pyx_v_ez1ez2 = __Pyx_c_prod_double((__pyx_v_Mem1[0]).epsz, (__pyx_v_Mem2[0]).epsz);

    /* "MOKE_polar.pyx":91
 *     #    divide1=1.0/(2*(  (Mem1[0]).PHI3    - (Mem1[0]).PHI2 *(Mem1[0]).PHI1))
 *         ez1ez2=(Mem1[0]).epsz*(Mem2[0]).epsz
 *         J[0][0]=( (Mem1[0]).PHI3*(1+(Mem2[0]).vz1/(Mem1[0]).vz1) - (Mem2[0]).PHI1*(Mem1[0]).PHI2*(1+((Mem2[0]).vz1/(Mem1[0]).vz1)*( (Mem1[0]).C1/(Mem2[0]).C1 ) ) )             # <<<<<<<<<<<<<<
 *         J[0][2]=( (Mem1[0]).PHI3*difvz1vz3/(Mem1[0]).vz1 - (Mem2[0]).PHI1*(Mem1[0]).PHI2/((Mem2[0]).C1*(Mem1[0]).vz1)*(difvz1vz3-(difvz1vz3+chiz1*(Mem1[0]).vz1-(Mem2[0]).vz1*chiz2)*vyvy/(ez1ez2)  ) )
 * 
 */
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz1))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 91, __pyx_L1_error)
    }
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz1))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 91, __pyx_L1_error)
    }
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem2[0]).C1))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 91, __pyx_L1_error)
    }
    ((__pyx_v_J[0])[0]) = __Pyx_c_diff_double(__Pyx_c_prod_double((__pyx_v_Mem1[0]).PHI3, __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_quot_double((__pyx_v_Mem2[0]).vz1, (__pyx_v_Mem1[0]).vz1))), __Pyx_c_prod_double(__Pyx_c_prod_double((__pyx_v_Mem2[0]).PHI1, (__pyx_v_Mem1[0]).PHI2), __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_prod_double(__Pyx_c_quot_double((__pyx_v_Mem2[0]).vz1, (__pyx_v_Mem1[0]).vz1), __Pyx_c_quot_double((__pyx_v_Mem1[0]).C1, (__pyx_v_Mem2[0]).C1)))));

    /* "MOKE_polar.pyx":92
 *         ez1ez2=(Mem1[0]).epsz*(Mem2[0]).epsz
 *         J[0][0]=( (Mem1[0]).PHI3*(1+(Mem2[0]).vz1/(Mem1[0]).vz1) - (Mem2[0]).PHI1*(Mem1[0]).PHI2*(1+((Mem2[0]).vz1/(Mem1[0]).vz1)*( (Mem1[0]).C1/(Mem2[0]).C1 ) ) )
 *         J[0][2]=( (Mem1[0]).PHI3*difvz1vz3/(Mem1[0]).vz1 - (Mem2[0]).PHI1*(Mem1[0]).PHI2/((Mem2[0]).C1*(Mem1[0]).vz1)*(difvz1vz3-(difvz1vz3+chiz1*(Mem1[0]).vz1-(Mem2[0]).vz1*chiz2)*vyvy/(ez1ez2)  ) )             # <<<<<<<<<<<<<<
 * 
 *         J[1][1]=( -(Mem1[0]).PHI1*(Mem2[0]).PHI2*((Mem2[0]).vz2/(Mem1[0]).vz2+1)+((Mem1[0]).C1/(Mem1[0]).vz2+(Mem2[0]).C1/(Mem2[0]).vz2) )
 */
    __pyx_t_3 = __Pyx_c_prod_double((__pyx_v_Mem1[0]).PHI3, __pyx_v_difvz1vz3);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz1))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 92, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_c_prod_double((__pyx_v_Mem2[0]).PHI1, (__pyx_v_Mem1[0]).PHI2);
    __pyx_t_4 = __Pyx_c_prod_double((__pyx_v_Mem2[0]).C1, (__pyx_v_Mem1[0]).vz1);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_4))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 92, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_c_prod_double(__Pyx_c_diff_double(__Pyx_c_sum_double(__pyx_v_difvz1vz3, __Pyx_c_prod_double(__pyx_v_chiz1, (__pyx_v_Mem1[0]).vz1)), __Pyx_c_prod_double((__pyx_v_Mem2[0]).vz1, __pyx_v_chiz2)), __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0));
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_ez1ez2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 92, __pyx_L1_error)
    }
    ((__pyx_v_J[0])[2]) = __Pyx_c_diff_double(__Pyx_c_quot_double(__pyx_t_3, (__pyx_v_Mem1[0]).vz1), __Pyx_c_prod_double(__Pyx_c_quot_double(__pyx_t_2, __pyx_t_4), __Pyx_c_diff_double(__pyx_v_difvz1vz3, __Pyx_c_quot_double(__pyx_t_5, __pyx_v_ez1ez2))));

    /* "MOKE_polar.pyx":94
 *         J[0][2]=( (Mem1[0]).PHI3*difvz1vz3/(Mem1[0]).vz1 - (Mem2[0]).PHI1*(Mem1[0]).PHI2/((Mem2[0]).C1*(Mem1[0]).vz1)*(difvz1vz3-(difvz1vz3+chiz1*(Mem1[0]).vz1-(Mem2[0]).vz1*chiz2)*vyvy/(ez1ez2)  ) )
 * 
 *         J[1][1]=( -(Mem1[0]).PHI1*(Mem2[0]).PHI2*((Mem2[0]).vz2/(Mem1[0]).vz2+1)+((Mem1[0]).C1/(Mem1[0]).vz2+(Mem2[0]).C1/(Mem2[0]).vz2) )             # <<<<<<<<<<<<<<
 *         J[1][3]=( (Mem1[0]).PHI1*(Mem2[0]).PHI2*difvz2vz4/(Mem1[0]).vz2+(-difvz2vz4-( -difvz2vz4+(Mem2[0]).vz2*chiz2-(Mem1[0]).vz2*chiz1 )*vyvy/(ez1ez2) )/((Mem1[0]).vz2*(Mem2[0]).vz2) )
 * 
 */
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 94, __pyx_L1_error)
    }
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 94, __pyx_L1_error)
    }
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem2[0]).vz2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 94, __pyx_L1_error)
    }
    ((__pyx_v_J[1])[1]) = __Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_neg_double((__pyx_v_Mem1[0]).PHI1), (__pyx_v_Mem2[0]).PHI2), __Pyx_c_sum_double(__Pyx_c_quot_double((__pyx_v_Mem2[0]).vz2, (__pyx_v_Mem1[0]).vz2), __pyx_t_double_complex_from_parts(1, 0))), __Pyx_c_sum_double(__Pyx_c_quot_double((__pyx_v_Mem1[0]).C1, (__pyx_v_Mem1[0]).vz2), __Pyx_c_quot_double((__pyx_v_Mem2[0]).C1, (__pyx_v_Mem2[0]).vz2)));

    /* "MOKE_polar.pyx":95
 * 
 *         J[1][1]=( -(Mem1[0]).PHI1*(Mem2[0]).PHI2*((Mem2[0]).vz2/(Mem1[0]).vz2+1)+((Mem1[0]).C1/(Mem1[0]).vz2+(Mem2[0]).C1/(Mem2[0]).vz2) )
 *         J[1][3]=( (Mem1[0]).PHI1*(Mem2[0]).PHI2*difvz2vz4/(Mem1[0]).vz2+(-difvz2vz4-( -difvz2vz4+(Mem2[0]).vz2*chiz2-(Mem1[0]).vz2*chiz1 )*vyvy/(ez1ez2) )/((Mem1[0]).vz2*(Mem2[0]).vz2) )             # <<<<<<<<<<<<<<
 * 
 *         J[0][1]=( ((Mem2[0]).vz2/(Mem1[0]).vz1+1)*(Mem2[0]).PHI2*(Mem1[0]).C1/(Mem1[0]).vz2 - (Mem1[0]).PHI2*((Mem1[0]).C1/(Mem1[0]).vz1+(Mem2[0]).C1/(Mem2[0]).vz2))
 */
    __pyx_t_5 = __Pyx_c_prod_double(__Pyx_c_prod_double((__pyx_v_Mem1[0]).PHI1, (__pyx_v_Mem2[0]).PHI2), __pyx_v_difvz2vz4);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 95, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_c_prod_double(__Pyx_c_diff_double(__Pyx_c_sum_double(__Pyx_c_neg_double(__pyx_v_difvz2vz4), __Pyx_c_prod_double((__pyx_v_Mem2[0]).vz2, __pyx_v_chiz2)), __Pyx_c_prod_double((__pyx_v_Mem1[0]).vz2, __pyx_v_chiz1)), __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0));
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_ez1ez2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 95, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_c_diff_double(__Pyx_c_neg_double(__pyx_v_difvz2vz4), __Pyx_c_quot_double(__pyx_t_4, __pyx_v_ez1ez2));
    __pyx_t_4 = __Pyx_c_prod_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem2[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_4))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 95, __pyx_L1_error)
    }
    ((__pyx_v_J[1])[3]) = __Pyx_c_sum_double(__Pyx_c_quot_double(__pyx_t_5, (__pyx_v_Mem1[0]).vz2), __Pyx_c_quot_double(__pyx_t_2, __pyx_t_4));

    /* "MOKE_polar.pyx":97
 *         J[1][3]=( (Mem1[0]).PHI1*(Mem2[0]).PHI2*difvz2vz4/(Mem1[0]).vz2+(-difvz2vz4-( -difvz2vz4+(Mem2[0]).vz2*chiz2-(Mem1[0]).vz2*chiz1 )*vyvy/(ez1ez2) )/((Mem1[0]).vz2*(Mem2[0]).vz2) )
 * 
 *         J[0][1]=( ((Mem2[0]).vz2/(Mem1[0]).vz1+1)*(Mem2[0]).PHI2*(Mem1[0]).C1/(Mem1[0]).vz2 - (Mem1[0]).PHI2*((Mem1[0]).C1/(Mem1[0]).vz1+(Mem2[0]).C1/(Mem2[0]).vz2))             # <<<<<<<<<<<<<<
 *         J[0][3]=( -difvz1vz4*(Mem2[0]).PHI2*(Mem1[0]).C1/((Mem1[0]).vz2*(Mem1[0]).vz1) - (-difvz1vz4-vyvy*( -difvz1vz4+chiz2*(Mem2[0]).vz2-chiz1*(Mem1[0]).vz1 )/(ez1ez2)  )*(Mem1[0]).PHI2/((Mem1[0]).vz1*(Mem2[0]).vz2)   )
 * 
 */
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz1))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 97, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_sum_double(__Pyx_c_quot_double((__pyx_v_Mem2[0]).vz2, (__pyx_v_Mem1[0]).vz1), __pyx_t_double_complex_from_parts(1, 0)), (__pyx_v_Mem2[0]).PHI2), (__pyx_v_Mem1[0]).C1);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 97, __pyx_L1_error)
    }
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz1))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 97, __pyx_L1_error)
    }
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem2[0]).vz2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 97, __pyx_L1_error)
    }
    ((__pyx_v_J[0])[1]) = __Pyx_c_diff_double(__Pyx_c_quot_double(__pyx_t_4, (__pyx_v_Mem1[0]).vz2), __Pyx_c_prod_double((__pyx_v_Mem1[0]).PHI2, __Pyx_c_sum_double(__Pyx_c_quot_double((__pyx_v_Mem1[0]).C1, (__pyx_v_Mem1[0]).vz1), __Pyx_c_quot_double((__pyx_v_Mem2[0]).C1, (__pyx_v_Mem2[0]).vz2))));

    /* "MOKE_polar.pyx":98
 * 
 *         J[0][1]=( ((Mem2[0]).vz2/(Mem1[0]).vz1+1)*(Mem2[0]).PHI2*(Mem1[0]).C1/(Mem1[0]).vz2 - (Mem1[0]).PHI2*((Mem1[0]).C1/(Mem1[0]).vz1+(Mem2[0]).C1/(Mem2[0]).vz2))
 *         J[0][3]=( -difvz1vz4*(Mem2[0]).PHI2*(Mem1[0]).C1/((Mem1[0]).vz2*(Mem1[0]).vz1) - (-difvz1vz4-vyvy*( -difvz1vz4+chiz2*(Mem2[0]).vz2-chiz1*(Mem1[0]).vz1 )/(ez1ez2)  )*(Mem1[0]).PHI2/((Mem1[0]).vz1*(Mem2[0]).vz2)   )             # <<<<<<<<<<<<<<
 * 
 *         J[1][0]=( (Mem2[0]).PHI1*(1+(Mem1[0]).C1*(Mem2[0]).vz1/((Mem2[0]).C1*(Mem1[0]).vz2) )-(Mem1[0]).PHI1*(1+(Mem2[0]).vz1/(Mem1[0]).vz2) )
 */
    __pyx_t_4 = __Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_difvz1vz4), (__pyx_v_Mem2[0]).PHI2), (__pyx_v_Mem1[0]).C1);
    __pyx_t_2 = __Pyx_c_prod_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem1[0]).vz1);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 98, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0), __Pyx_c_diff_double(__Pyx_c_sum_double(__Pyx_c_neg_double(__pyx_v_difvz1vz4), __Pyx_c_prod_double(__pyx_v_chiz2, (__pyx_v_Mem2[0]).vz2)), __Pyx_c_prod_double(__pyx_v_chiz1, (__pyx_v_Mem1[0]).vz1)));
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_ez1ez2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 98, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_c_prod_double(__Pyx_c_diff_double(__Pyx_c_neg_double(__pyx_v_difvz1vz4), __Pyx_c_quot_double(__pyx_t_5, __pyx_v_ez1ez2)), (__pyx_v_Mem1[0]).PHI2);
    __pyx_t_5 = __Pyx_c_prod_double((__pyx_v_Mem1[0]).vz1, (__pyx_v_Mem2[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_5))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 98, __pyx_L1_error)
    }
    ((__pyx_v_J[0])[3]) = __Pyx_c_diff_double(__Pyx_c_quot_double(__pyx_t_4, __pyx_t_2), __Pyx_c_quot_double(__pyx_t_3, __pyx_t_5));

    /* "MOKE_polar.pyx":100
 *         J[0][3]=( -difvz1vz4*(Mem2[0]).PHI2*(Mem1[0]).C1/((Mem1[0]).vz2*(Mem1[0]).vz1) - (-difvz1vz4-vyvy*( -difvz1vz4+chiz2*(Mem2[0]).vz2-chiz1*(Mem1[0]).vz1 )/(ez1ez2)  )*(Mem1[0]).PHI2/((Mem1[0]).vz1*(Mem2[0]).vz2)   )
 * 
 *         J[1][0]=( (Mem2[0]).PHI1*(1+(Mem1[0]).C1*(Mem2[0]).vz1/((Mem2[0]).C1*(Mem1[0]).vz2) )-(Mem1[0]).PHI1*(1+(Mem2[0]).vz1/(Mem1[0]).vz2) )             # <<<<<<<<<<<<<<
 *         J[1][2]=( (Mem2[0]).PHI1*(difvz2vz3- ( difvz2vz3+chiz1*(Mem1[0]).vz2-chiz2*(Mem2[0]).vz1 )*vyvy/(ez1ez2) )/((Mem2[0]).C1*(Mem1[0]).vz2)-(Mem1[0]).PHI1*difvz2vz3/(Mem1[0]).vz2 )
 * #        J[0][0]=( (Mem1[0]).PHI3*(1+(Mem2[0]).vz1/(Mem1[0]).vz1) - (Mem2[0]).PHI1*(Mem1[0]).PHI2*(1+((Mem2[0]).vz1/(Mem1[0]).vz1)*( (Mem1[0]).C1/(Mem2[0]).C1 ) ) )*divide1
 */
    __pyx_t_5 = __Pyx_c_prod_double((__pyx_v_Mem1[0]).C1, (__pyx_v_Mem2[0]).vz1);
    __pyx_t_3 = __Pyx_c_prod_double((__pyx_v_Mem2[0]).C1, (__pyx_v_Mem1[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_3))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 100, __pyx_L1_error)
    }
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 100, __pyx_L1_error)
    }
    ((__pyx_v_J[1])[0]) = __Pyx_c_diff_double(__Pyx_c_prod_double((__pyx_v_Mem2[0]).PHI1, __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_quot_double(__pyx_t_5, __pyx_t_3))), __Pyx_c_prod_double((__pyx_v_Mem1[0]).PHI1, __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_quot_double((__pyx_v_Mem2[0]).vz1, (__pyx_v_Mem1[0]).vz2))));

    /* "MOKE_polar.pyx":101
 * 
 *         J[1][0]=( (Mem2[0]).PHI1*(1+(Mem1[0]).C1*(Mem2[0]).vz1/((Mem2[0]).C1*(Mem1[0]).vz2) )-(Mem1[0]).PHI1*(1+(Mem2[0]).vz1/(Mem1[0]).vz2) )
 *         J[1][2]=( (Mem2[0]).PHI1*(difvz2vz3- ( difvz2vz3+chiz1*(Mem1[0]).vz2-chiz2*(Mem2[0]).vz1 )*vyvy/(ez1ez2) )/((Mem2[0]).C1*(Mem1[0]).vz2)-(Mem1[0]).PHI1*difvz2vz3/(Mem1[0]).vz2 )             # <<<<<<<<<<<<<<
 * #        J[0][0]=( (Mem1[0]).PHI3*(1+(Mem2[0]).vz1/(Mem1[0]).vz1) - (Mem2[0]).PHI1*(Mem1[0]).PHI2*(1+((Mem2[0]).vz1/(Mem1[0]).vz1)*( (Mem1[0]).C1/(Mem2[0]).C1 ) ) )*divide1
 * #        J[0][2]=( (Mem1[0]).PHI3*difvz1vz3/(Mem1[0]).vz1 - (Mem2[0]).PHI1*(Mem1[0]).PHI2/((Mem2[0]).C1*(Mem1[0]).vz1)*(difvz1vz3-(difvz1vz3+chiz1*(Mem1[0]).vz1-(Mem2[0]).vz1*chiz2)*vyvy/(ez1ez2)  ) )*divide1
 */
    __pyx_t_3 = __Pyx_c_prod_double(__Pyx_c_diff_double(__Pyx_c_sum_double(__pyx_v_difvz2vz3, __Pyx_c_prod_double(__pyx_v_chiz1, (__pyx_v_Mem1[0]).vz2)), __Pyx_c_prod_double(__pyx_v_chiz2, (__pyx_v_Mem2[0]).vz1)), __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0));
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_ez1ez2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 101, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_c_prod_double((__pyx_v_Mem2[0]).PHI1, __Pyx_c_diff_double(__pyx_v_difvz2vz3, __Pyx_c_quot_double(__pyx_t_3, __pyx_v_ez1ez2)));
    __pyx_t_3 = __Pyx_c_prod_double((__pyx_v_Mem2[0]).C1, (__pyx_v_Mem1[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_3))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 101, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_c_prod_double((__pyx_v_Mem1[0]).PHI1, __pyx_v_difvz2vz3);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 101, __pyx_L1_error)
    }
    ((__pyx_v_J[1])[2]) = __Pyx_c_diff_double(__Pyx_c_quot_double(__pyx_t_5, __pyx_t_3), __Pyx_c_quot_double(__pyx_t_2, (__pyx_v_Mem1[0]).vz2));

    /* "MOKE_polar.pyx":80
 *     cdef double complex save4
 *     cdef double complex ez1ez2
 *     if( IsMagnetic1 & IsMagnetic2 ):             # <<<<<<<<<<<<<<
 *         Fill_rMemory_z(Mem2, vy, vyvy, omvyvy, chix2, chiy2, chiz2, chig2)
 * 
 */
    goto __pyx_L3;
  }

  /* "MOKE_polar.pyx":115
 * 
 * 
 *     elif(IsMagnetic1):             # <<<<<<<<<<<<<<
 * 
 *         (Mem2[0]).epsy=chiy2+1.0
 */
  __pyx_t_1 = (__pyx_v_IsMagnetic1 != 0);
  if (__pyx_t_1) {

    /* "MOKE_polar.pyx":117
 *     elif(IsMagnetic1):
 * 
 *         (Mem2[0]).epsy=chiy2+1.0             # <<<<<<<<<<<<<<
 *         (Mem2[0]).epsz=chiz2+1.0
 *         (Mem2[0]).vz1=sqrt(omvyvy+chix2)
 */
    (__pyx_v_Mem2[0]).epsy = __Pyx_c_sum_double(__pyx_v_chiy2, __pyx_t_double_complex_from_parts(1.0, 0));

    /* "MOKE_polar.pyx":118
 * 
 *         (Mem2[0]).epsy=chiy2+1.0
 *         (Mem2[0]).epsz=chiz2+1.0             # <<<<<<<<<<<<<<
 *         (Mem2[0]).vz1=sqrt(omvyvy+chix2)
 *         (Mem2[0]).vz2=sqrt( (1-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy )
 */
    (__pyx_v_Mem2[0]).epsz = __Pyx_c_sum_double(__pyx_v_chiz2, __pyx_t_double_complex_from_parts(1.0, 0));

    /* "MOKE_polar.pyx":119
 *         (Mem2[0]).epsy=chiy2+1.0
 *         (Mem2[0]).epsz=chiz2+1.0
 *         (Mem2[0]).vz1=sqrt(omvyvy+chix2)             # <<<<<<<<<<<<<<
 *         (Mem2[0]).vz2=sqrt( (1-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy )
 *         (Mem2[0]).IsFilled=1
 */
    (__pyx_v_Mem2[0]).vz1 = sqrt(__Pyx_c_sum_double(__pyx_t_double_complex_from_parts(__pyx_v_omvyvy, 0), __pyx_v_chix2));

    /* "MOKE_polar.pyx":120
 *         (Mem2[0]).epsz=chiz2+1.0
 *         (Mem2[0]).vz1=sqrt(omvyvy+chix2)
 *         (Mem2[0]).vz2=sqrt( (1-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy )             # <<<<<<<<<<<<<<
 *         (Mem2[0]).IsFilled=1
 *         ez1ez2=(Mem1[0]).epsz*(Mem2[0]).epsz
 */
    __pyx_t_2 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem2[0]).epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 120, __pyx_L1_error)
    }
    (__pyx_v_Mem2[0]).vz2 = sqrt(__Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_quot_double(__pyx_t_2, (__pyx_v_Mem2[0]).epsz)), (__pyx_v_Mem2[0]).epsy));

    /* "MOKE_polar.pyx":121
 *         (Mem2[0]).vz1=sqrt(omvyvy+chix2)
 *         (Mem2[0]).vz2=sqrt( (1-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy )
 *         (Mem2[0]).IsFilled=1             # <<<<<<<<<<<<<<
 *         ez1ez2=(Mem1[0]).epsz*(Mem2[0]).epsz
 *         difB=(((chiz1+chiy1)*omvyvy)*0.5-chiz1*omvyvy)/(Mem1[0]).epsz-chix2
 */
    (__pyx_v_Mem2[0]).IsFilled = 1;

    /* "MOKE_polar.pyx":122
 *         (Mem2[0]).vz2=sqrt( (1-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy )
 *         (Mem2[0]).IsFilled=1
 *         ez1ez2=(Mem1[0]).epsz*(Mem2[0]).epsz             # <<<<<<<<<<<<<<
 *         difB=(((chiz1+chiy1)*omvyvy)*0.5-chiz1*omvyvy)/(Mem1[0]).epsz-chix2
 *         difvz1vz3=( (Mem1[0]).B2+(Mem1[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz1)
 */
    __pyx_v_ez1ez2 = __Pyx_c_prod_double((__pyx_v_Mem1[0]).epsz, (__pyx_v_Mem2[0]).epsz);

    /* "MOKE_polar.pyx":123
 *         (Mem2[0]).IsFilled=1
 *         ez1ez2=(Mem1[0]).epsz*(Mem2[0]).epsz
 *         difB=(((chiz1+chiy1)*omvyvy)*0.5-chiz1*omvyvy)/(Mem1[0]).epsz-chix2             # <<<<<<<<<<<<<<
 *         difvz1vz3=( (Mem1[0]).B2+(Mem1[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz1)
 *         difvz2vz3=( (Mem1[0]).B2-(Mem1[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz1)
 */
    __pyx_t_2 = __Pyx_c_diff_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_sum_double(__pyx_v_chiz1, __pyx_v_chiy1), __pyx_t_double_complex_from_parts(__pyx_v_omvyvy, 0)), __pyx_t_double_complex_from_parts(0.5, 0)), __Pyx_c_prod_double(__pyx_v_chiz1, __pyx_t_double_complex_from_parts(__pyx_v_omvyvy, 0)));
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 123, __pyx_L1_error)
    }
    __pyx_v_difB = __Pyx_c_diff_double(__Pyx_c_quot_double(__pyx_t_2, (__pyx_v_Mem1[0]).epsz), __pyx_v_chix2);

    /* "MOKE_polar.pyx":124
 *         ez1ez2=(Mem1[0]).epsz*(Mem2[0]).epsz
 *         difB=(((chiz1+chiy1)*omvyvy)*0.5-chiz1*omvyvy)/(Mem1[0]).epsz-chix2
 *         difvz1vz3=( (Mem1[0]).B2+(Mem1[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz1)             # <<<<<<<<<<<<<<
 *         difvz2vz3=( (Mem1[0]).B2-(Mem1[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz1)
 *         difB=  ( chiz2*(omvyvy-(Mem2[0]).epsy)+0.5*(chiy1+chiz1)*omvyvy*(Mem2[0]).epsz- omvyvy*chiy2)/ez1ez2 -chiz1*(1-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy/(Mem1[0]).epsz
 */
    __pyx_t_2 = __Pyx_c_sum_double(__Pyx_c_sum_double((__pyx_v_Mem1[0]).B2, (__pyx_v_Mem1[0]).root), __pyx_v_difB);
    __pyx_t_3 = __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz1, (__pyx_v_Mem2[0]).vz1);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_3))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 124, __pyx_L1_error)
    }
    __pyx_v_difvz1vz3 = __Pyx_c_quot_double(__pyx_t_2, __pyx_t_3);

    /* "MOKE_polar.pyx":125
 *         difB=(((chiz1+chiy1)*omvyvy)*0.5-chiz1*omvyvy)/(Mem1[0]).epsz-chix2
 *         difvz1vz3=( (Mem1[0]).B2+(Mem1[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz1)
 *         difvz2vz3=( (Mem1[0]).B2-(Mem1[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz1)             # <<<<<<<<<<<<<<
 *         difB=  ( chiz2*(omvyvy-(Mem2[0]).epsy)+0.5*(chiy1+chiz1)*omvyvy*(Mem2[0]).epsz- omvyvy*chiy2)/ez1ez2 -chiz1*(1-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy/(Mem1[0]).epsz
 *         difvz1vz4=( (Mem1[0]).B2+(Mem1[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz2)
 */
    __pyx_t_3 = __Pyx_c_sum_double(__Pyx_c_diff_double((__pyx_v_Mem1[0]).B2, (__pyx_v_Mem1[0]).root), __pyx_v_difB);
    __pyx_t_2 = __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem2[0]).vz1);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 125, __pyx_L1_error)
    }
    __pyx_v_difvz2vz3 = __Pyx_c_quot_double(__pyx_t_3, __pyx_t_2);

    /* "MOKE_polar.pyx":126
 *         difvz1vz3=( (Mem1[0]).B2+(Mem1[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz1)
 *         difvz2vz3=( (Mem1[0]).B2-(Mem1[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz1)
 *         difB=  ( chiz2*(omvyvy-(Mem2[0]).epsy)+0.5*(chiy1+chiz1)*omvyvy*(Mem2[0]).epsz- omvyvy*chiy2)/ez1ez2 -chiz1*(1-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy/(Mem1[0]).epsz             # <<<<<<<<<<<<<<
 *         difvz1vz4=( (Mem1[0]).B2+(Mem1[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz2)
 *         difvz2vz4=( (Mem1[0]).B2-(Mem1[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz2)
 */
    __pyx_t_2 = __Pyx_c_diff_double(__Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_chiz2, __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(__pyx_v_omvyvy, 0), (__pyx_v_Mem2[0]).epsy)), __Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __Pyx_c_sum_double(__pyx_v_chiy1, __pyx_v_chiz1)), __pyx_t_double_complex_from_parts(__pyx_v_omvyvy, 0)), (__pyx_v_Mem2[0]).epsz)), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_omvyvy, 0), __pyx_v_chiy2));
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_ez1ez2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 126, __pyx_L1_error)
    }
    __pyx_t_3 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem2[0]).epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 126, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_v_chiz1, __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_quot_double(__pyx_t_3, (__pyx_v_Mem2[0]).epsz))), (__pyx_v_Mem2[0]).epsy);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 126, __pyx_L1_error)
    }
    __pyx_v_difB = __Pyx_c_diff_double(__Pyx_c_quot_double(__pyx_t_2, __pyx_v_ez1ez2), __Pyx_c_quot_double(__pyx_t_5, (__pyx_v_Mem1[0]).epsz));

    /* "MOKE_polar.pyx":127
 *         difvz2vz3=( (Mem1[0]).B2-(Mem1[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz1)
 *         difB=  ( chiz2*(omvyvy-(Mem2[0]).epsy)+0.5*(chiy1+chiz1)*omvyvy*(Mem2[0]).epsz- omvyvy*chiy2)/ez1ez2 -chiz1*(1-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy/(Mem1[0]).epsz
 *         difvz1vz4=( (Mem1[0]).B2+(Mem1[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz2)             # <<<<<<<<<<<<<<
 *         difvz2vz4=( (Mem1[0]).B2-(Mem1[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz2)
 * 
 */
    __pyx_t_5 = __Pyx_c_sum_double(__Pyx_c_sum_double((__pyx_v_Mem1[0]).B2, (__pyx_v_Mem1[0]).root), __pyx_v_difB);
    __pyx_t_2 = __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz1, (__pyx_v_Mem2[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 127, __pyx_L1_error)
    }
    __pyx_v_difvz1vz4 = __Pyx_c_quot_double(__pyx_t_5, __pyx_t_2);

    /* "MOKE_polar.pyx":128
 *         difB=  ( chiz2*(omvyvy-(Mem2[0]).epsy)+0.5*(chiy1+chiz1)*omvyvy*(Mem2[0]).epsz- omvyvy*chiy2)/ez1ez2 -chiz1*(1-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy/(Mem1[0]).epsz
 *         difvz1vz4=( (Mem1[0]).B2+(Mem1[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz2)
 *         difvz2vz4=( (Mem1[0]).B2-(Mem1[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz2)             # <<<<<<<<<<<<<<
 * 
 *         save3=(1-vyvy/(Mem1[0]).epsz)
 */
    __pyx_t_2 = __Pyx_c_sum_double(__Pyx_c_diff_double((__pyx_v_Mem1[0]).B2, (__pyx_v_Mem1[0]).root), __pyx_v_difB);
    __pyx_t_5 = __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem2[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_5))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 128, __pyx_L1_error)
    }
    __pyx_v_difvz2vz4 = __Pyx_c_quot_double(__pyx_t_2, __pyx_t_5);

    /* "MOKE_polar.pyx":130
 *         difvz2vz4=( (Mem1[0]).B2-(Mem1[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz2)
 * 
 *         save3=(1-vyvy/(Mem1[0]).epsz)             # <<<<<<<<<<<<<<
 *         save4=(1-vyvy/(Mem2[0]).epsz)
 * 
 */
    __pyx_t_5 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 130, __pyx_L1_error)
    }
    __pyx_v_save3 = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_quot_double(__pyx_t_5, (__pyx_v_Mem1[0]).epsz));

    /* "MOKE_polar.pyx":131
 * 
 *         save3=(1-vyvy/(Mem1[0]).epsz)
 *         save4=(1-vyvy/(Mem2[0]).epsz)             # <<<<<<<<<<<<<<
 * 
 * #        divide1=1.0/(2*(  (Mem1[0]).PHI3    - (Mem1[0]).PHI2 *(Mem1[0]).PHI1))
 */
    __pyx_t_5 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem2[0]).epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 131, __pyx_L1_error)
    }
    __pyx_v_save4 = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_quot_double(__pyx_t_5, (__pyx_v_Mem2[0]).epsz));

    /* "MOKE_polar.pyx":150
 * #        J[1][0]=save1*( (Mem1[0]).vz2+(Mem2[0]).vz1 )
 * #        J[1][2]=save1*difvz2vz3
 *         save1=save3/((Mem1[0]).vz1*(Mem1[0]).vz2)             # <<<<<<<<<<<<<<
 *         J[0][0]=save1*( (Mem1[0]).vz1+(Mem2[0]).vz1 )
 *         J[0][2]=save1*difvz1vz3
 */
    __pyx_t_5 = __Pyx_c_prod_double((__pyx_v_Mem1[0]).vz1, (__pyx_v_Mem1[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_5))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 150, __pyx_L1_error)
    }
    __pyx_v_save1 = __Pyx_c_quot_double(__pyx_v_save3, __pyx_t_5);

    /* "MOKE_polar.pyx":151
 * #        J[1][2]=save1*difvz2vz3
 *         save1=save3/((Mem1[0]).vz1*(Mem1[0]).vz2)
 *         J[0][0]=save1*( (Mem1[0]).vz1+(Mem2[0]).vz1 )             # <<<<<<<<<<<<<<
 *         J[0][2]=save1*difvz1vz3
 * 
 */
    ((__pyx_v_J[0])[0]) = __Pyx_c_prod_double(__pyx_v_save1, __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz1, (__pyx_v_Mem2[0]).vz1));

    /* "MOKE_polar.pyx":152
 *         save1=save3/((Mem1[0]).vz1*(Mem1[0]).vz2)
 *         J[0][0]=save1*( (Mem1[0]).vz1+(Mem2[0]).vz1 )
 *         J[0][2]=save1*difvz1vz3             # <<<<<<<<<<<<<<
 * 
 *         save1=1.0/((Mem2[0]).vz2*(Mem1[0]).vz2)
 */
    ((__pyx_v_J[0])[2]) = __Pyx_c_prod_double(__pyx_v_save1, __pyx_v_difvz1vz3);

    /* "MOKE_polar.pyx":154
 *         J[0][2]=save1*difvz1vz3
 * 
 *         save1=1.0/((Mem2[0]).vz2*(Mem1[0]).vz2)             # <<<<<<<<<<<<<<
 * 
 *         J[1][1]=save1*( save3*(Mem2[0]).vz2+save4*(Mem1[0]).vz2  )
 */
    __pyx_t_5 = __pyx_t_double_complex_from_parts(1.0, 0);
    __pyx_t_2 = __Pyx_c_prod_double((__pyx_v_Mem2[0]).vz2, (__pyx_v_Mem1[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 154, __pyx_L1_error)
    }
    __pyx_v_save1 = __Pyx_c_quot_double(__pyx_t_5, __pyx_t_2);

    /* "MOKE_polar.pyx":156
 *         save1=1.0/((Mem2[0]).vz2*(Mem1[0]).vz2)
 * 
 *         J[1][1]=save1*( save3*(Mem2[0]).vz2+save4*(Mem1[0]).vz2  )             # <<<<<<<<<<<<<<
 *         J[1][3]=save1*( -difvz2vz4-(vyvy/ez1ez2)*( -difvz2vz4+ (Mem2[0]).vz2*chiz2-(Mem1[0]).vz2*chiz1 ) )
 * 
 */
    ((__pyx_v_J[1])[1]) = __Pyx_c_prod_double(__pyx_v_save1, __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_save3, (__pyx_v_Mem2[0]).vz2), __Pyx_c_prod_double(__pyx_v_save4, (__pyx_v_Mem1[0]).vz2)));

    /* "MOKE_polar.pyx":157
 * 
 *         J[1][1]=save1*( save3*(Mem2[0]).vz2+save4*(Mem1[0]).vz2  )
 *         J[1][3]=save1*( -difvz2vz4-(vyvy/ez1ez2)*( -difvz2vz4+ (Mem2[0]).vz2*chiz2-(Mem1[0]).vz2*chiz1 ) )             # <<<<<<<<<<<<<<
 * 
 *         save1=-(Mem1[0]).PHI2/( (Mem2[0]).vz2*(Mem1[0]).vz1 )
 */
    __pyx_t_2 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_ez1ez2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 157, __pyx_L1_error)
    }
    ((__pyx_v_J[1])[3]) = __Pyx_c_prod_double(__pyx_v_save1, __Pyx_c_diff_double(__Pyx_c_neg_double(__pyx_v_difvz2vz4), __Pyx_c_prod_double(__Pyx_c_quot_double(__pyx_t_2, __pyx_v_ez1ez2), __Pyx_c_diff_double(__Pyx_c_sum_double(__Pyx_c_neg_double(__pyx_v_difvz2vz4), __Pyx_c_prod_double((__pyx_v_Mem2[0]).vz2, __pyx_v_chiz2)), __Pyx_c_prod_double((__pyx_v_Mem1[0]).vz2, __pyx_v_chiz1)))));

    /* "MOKE_polar.pyx":159
 *         J[1][3]=save1*( -difvz2vz4-(vyvy/ez1ez2)*( -difvz2vz4+ (Mem2[0]).vz2*chiz2-(Mem1[0]).vz2*chiz1 ) )
 * 
 *         save1=-(Mem1[0]).PHI2/( (Mem2[0]).vz2*(Mem1[0]).vz1 )             # <<<<<<<<<<<<<<
 *         J[0][1]=save1*( save3*(Mem2[0]).vz2 + save4*(Mem1[0]).vz1 )
 *         J[0][3]=save1*( -difvz1vz4-(vyvy/ez1ez2)*( -difvz1vz4+ (Mem2[0]).vz2*chiz2-(Mem1[0]).vz1*chiz1 ) )
 */
    __pyx_t_2 = __Pyx_c_neg_double((__pyx_v_Mem1[0]).PHI2);
    __pyx_t_5 = __Pyx_c_prod_double((__pyx_v_Mem2[0]).vz2, (__pyx_v_Mem1[0]).vz1);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_5))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 159, __pyx_L1_error)
    }
    __pyx_v_save1 = __Pyx_c_quot_double(__pyx_t_2, __pyx_t_5);

    /* "MOKE_polar.pyx":160
 * 
 *         save1=-(Mem1[0]).PHI2/( (Mem2[0]).vz2*(Mem1[0]).vz1 )
 *         J[0][1]=save1*( save3*(Mem2[0]).vz2 + save4*(Mem1[0]).vz1 )             # <<<<<<<<<<<<<<
 *         J[0][3]=save1*( -difvz1vz4-(vyvy/ez1ez2)*( -difvz1vz4+ (Mem2[0]).vz2*chiz2-(Mem1[0]).vz1*chiz1 ) )
 * 
 */
    ((__pyx_v_J[0])[1]) = __Pyx_c_prod_double(__pyx_v_save1, __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_save3, (__pyx_v_Mem2[0]).vz2), __Pyx_c_prod_double(__pyx_v_save4, (__pyx_v_Mem1[0]).vz1)));

    /* "MOKE_polar.pyx":161
 *         save1=-(Mem1[0]).PHI2/( (Mem2[0]).vz2*(Mem1[0]).vz1 )
 *         J[0][1]=save1*( save3*(Mem2[0]).vz2 + save4*(Mem1[0]).vz1 )
 *         J[0][3]=save1*( -difvz1vz4-(vyvy/ez1ez2)*( -difvz1vz4+ (Mem2[0]).vz2*chiz2-(Mem1[0]).vz1*chiz1 ) )             # <<<<<<<<<<<<<<
 * 
 *         save1=-(Mem1[0]).PHI1/(Mem1[0]).vz2
 */
    __pyx_t_5 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_ez1ez2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 161, __pyx_L1_error)
    }
    ((__pyx_v_J[0])[3]) = __Pyx_c_prod_double(__pyx_v_save1, __Pyx_c_diff_double(__Pyx_c_neg_double(__pyx_v_difvz1vz4), __Pyx_c_prod_double(__Pyx_c_quot_double(__pyx_t_5, __pyx_v_ez1ez2), __Pyx_c_diff_double(__Pyx_c_sum_double(__Pyx_c_neg_double(__pyx_v_difvz1vz4), __Pyx_c_prod_double((__pyx_v_Mem2[0]).vz2, __pyx_v_chiz2)), __Pyx_c_prod_double((__pyx_v_Mem1[0]).vz1, __pyx_v_chiz1)))));

    /* "MOKE_polar.pyx":163
 *         J[0][3]=save1*( -difvz1vz4-(vyvy/ez1ez2)*( -difvz1vz4+ (Mem2[0]).vz2*chiz2-(Mem1[0]).vz1*chiz1 ) )
 * 
 *         save1=-(Mem1[0]).PHI1/(Mem1[0]).vz2             # <<<<<<<<<<<<<<
 *         J[1][0]=save1*( (Mem1[0]).vz2+(Mem2[0]).vz1 )
 *         J[1][2]=save1*difvz2vz3
 */
    __pyx_t_5 = __Pyx_c_neg_double((__pyx_v_Mem1[0]).PHI1);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 163, __pyx_L1_error)
    }
    __pyx_v_save1 = __Pyx_c_quot_double(__pyx_t_5, (__pyx_v_Mem1[0]).vz2);

    /* "MOKE_polar.pyx":164
 * 
 *         save1=-(Mem1[0]).PHI1/(Mem1[0]).vz2
 *         J[1][0]=save1*( (Mem1[0]).vz2+(Mem2[0]).vz1 )             # <<<<<<<<<<<<<<
 *         J[1][2]=save1*difvz2vz3
 * 
 */
    ((__pyx_v_J[1])[0]) = __Pyx_c_prod_double(__pyx_v_save1, __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem2[0]).vz1));

    /* "MOKE_polar.pyx":165
 *         save1=-(Mem1[0]).PHI1/(Mem1[0]).vz2
 *         J[1][0]=save1*( (Mem1[0]).vz2+(Mem2[0]).vz1 )
 *         J[1][2]=save1*difvz2vz3             # <<<<<<<<<<<<<<
 * 
 *     elif(IsMagnetic2):
 */
    ((__pyx_v_J[1])[2]) = __Pyx_c_prod_double(__pyx_v_save1, __pyx_v_difvz2vz3);

    /* "MOKE_polar.pyx":115
 * 
 * 
 *     elif(IsMagnetic1):             # <<<<<<<<<<<<<<
 * 
 *         (Mem2[0]).epsy=chiy2+1.0
 */
    goto __pyx_L3;
  }

  /* "MOKE_polar.pyx":167
 *         J[1][2]=save1*difvz2vz3
 * 
 *     elif(IsMagnetic2):             # <<<<<<<<<<<<<<
 *         Fill_rMemory_z(Mem2, vy, vyvy, omvyvy, chix2, chiy2, chiz2, chig2)
 * 
 */
  __pyx_t_1 = (__pyx_v_IsMagnetic2 != 0);
  if (__pyx_t_1) {

    /* "MOKE_polar.pyx":168
 * 
 *     elif(IsMagnetic2):
 *         Fill_rMemory_z(Mem2, vy, vyvy, omvyvy, chix2, chiy2, chiz2, chig2)             # <<<<<<<<<<<<<<
 * 
 *         difB=chix1+( omvyvy*chiz2-(chiy2+chiz2)*omvyvy*0.5 )/(Mem2[0]).epsz
 */
    __pyx_f_10MOKE_polar_Fill_rMemory_z(__pyx_v_Mem2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_chix2, __pyx_v_chiy2, __pyx_v_chiz2, __pyx_v_chig2);

    /* "MOKE_polar.pyx":170
 *         Fill_rMemory_z(Mem2, vy, vyvy, omvyvy, chix2, chiy2, chiz2, chig2)
 * 
 *         difB=chix1+( omvyvy*chiz2-(chiy2+chiz2)*omvyvy*0.5 )/(Mem2[0]).epsz             # <<<<<<<<<<<<<<
 *         ez1ez2=(Mem1[0]).epsz*(Mem2[0]).epsz
 *         difvz1vz3=( -(Mem2[0]).B2-(Mem2[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz1)
 */
    __pyx_t_5 = __Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_omvyvy, 0), __pyx_v_chiz2), __Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_sum_double(__pyx_v_chiy2, __pyx_v_chiz2), __pyx_t_double_complex_from_parts(__pyx_v_omvyvy, 0)), __pyx_t_double_complex_from_parts(0.5, 0)));
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem2[0]).epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 170, __pyx_L1_error)
    }
    __pyx_v_difB = __Pyx_c_sum_double(__pyx_v_chix1, __Pyx_c_quot_double(__pyx_t_5, (__pyx_v_Mem2[0]).epsz));

    /* "MOKE_polar.pyx":171
 * 
 *         difB=chix1+( omvyvy*chiz2-(chiy2+chiz2)*omvyvy*0.5 )/(Mem2[0]).epsz
 *         ez1ez2=(Mem1[0]).epsz*(Mem2[0]).epsz             # <<<<<<<<<<<<<<
 *         difvz1vz3=( -(Mem2[0]).B2-(Mem2[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz1)
 *         difvz1vz4=( -(Mem2[0]).B2+(Mem2[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz2)
 */
    __pyx_v_ez1ez2 = __Pyx_c_prod_double((__pyx_v_Mem1[0]).epsz, (__pyx_v_Mem2[0]).epsz);

    /* "MOKE_polar.pyx":172
 *         difB=chix1+( omvyvy*chiz2-(chiy2+chiz2)*omvyvy*0.5 )/(Mem2[0]).epsz
 *         ez1ez2=(Mem1[0]).epsz*(Mem2[0]).epsz
 *         difvz1vz3=( -(Mem2[0]).B2-(Mem2[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz1)             # <<<<<<<<<<<<<<
 *         difvz1vz4=( -(Mem2[0]).B2+(Mem2[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz2)
 *         difB=-( ( chiz1*(omvyvy-(Mem1[0]).epsy)+0.5*(chiy2+chiz2)*omvyvy*(Mem1[0]).epsz- omvyvy*chiy1)/ez1ez2 -chiz2*(1-vyvy/(Mem1[0]).epsz)*(Mem1[0]).epsy/(Mem2[0]).epsz)
 */
    __pyx_t_5 = __Pyx_c_sum_double(__Pyx_c_diff_double(__Pyx_c_neg_double((__pyx_v_Mem2[0]).B2), (__pyx_v_Mem2[0]).root), __pyx_v_difB);
    __pyx_t_2 = __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz1, (__pyx_v_Mem2[0]).vz1);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 172, __pyx_L1_error)
    }
    __pyx_v_difvz1vz3 = __Pyx_c_quot_double(__pyx_t_5, __pyx_t_2);

    /* "MOKE_polar.pyx":173
 *         ez1ez2=(Mem1[0]).epsz*(Mem2[0]).epsz
 *         difvz1vz3=( -(Mem2[0]).B2-(Mem2[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz1)
 *         difvz1vz4=( -(Mem2[0]).B2+(Mem2[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz2)             # <<<<<<<<<<<<<<
 *         difB=-( ( chiz1*(omvyvy-(Mem1[0]).epsy)+0.5*(chiy2+chiz2)*omvyvy*(Mem1[0]).epsz- omvyvy*chiy1)/ez1ez2 -chiz2*(1-vyvy/(Mem1[0]).epsz)*(Mem1[0]).epsy/(Mem2[0]).epsz)
 *         difvz2vz3=( -(Mem2[0]).B2-(Mem2[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz1)
 */
    __pyx_t_2 = __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_neg_double((__pyx_v_Mem2[0]).B2), (__pyx_v_Mem2[0]).root), __pyx_v_difB);
    __pyx_t_5 = __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz1, (__pyx_v_Mem2[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_5))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 173, __pyx_L1_error)
    }
    __pyx_v_difvz1vz4 = __Pyx_c_quot_double(__pyx_t_2, __pyx_t_5);

    /* "MOKE_polar.pyx":174
 *         difvz1vz3=( -(Mem2[0]).B2-(Mem2[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz1)
 *         difvz1vz4=( -(Mem2[0]).B2+(Mem2[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz2)
 *         difB=-( ( chiz1*(omvyvy-(Mem1[0]).epsy)+0.5*(chiy2+chiz2)*omvyvy*(Mem1[0]).epsz- omvyvy*chiy1)/ez1ez2 -chiz2*(1-vyvy/(Mem1[0]).epsz)*(Mem1[0]).epsy/(Mem2[0]).epsz)             # <<<<<<<<<<<<<<
 *         difvz2vz3=( -(Mem2[0]).B2-(Mem2[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz1)
 *         difvz2vz4=( -(Mem2[0]).B2+(Mem2[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz2)
 */
    __pyx_t_5 = __Pyx_c_diff_double(__Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_chiz1, __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(__pyx_v_omvyvy, 0), (__pyx_v_Mem1[0]).epsy)), __Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __Pyx_c_sum_double(__pyx_v_chiy2, __pyx_v_chiz2)), __pyx_t_double_complex_from_parts(__pyx_v_omvyvy, 0)), (__pyx_v_Mem1[0]).epsz)), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_omvyvy, 0), __pyx_v_chiy1));
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_ez1ez2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 174, __pyx_L1_error)
    }
    __pyx_t_2 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 174, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_v_chiz2, __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_quot_double(__pyx_t_2, (__pyx_v_Mem1[0]).epsz))), (__pyx_v_Mem1[0]).epsy);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem2[0]).epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 174, __pyx_L1_error)
    }
    __pyx_v_difB = __Pyx_c_neg_double(__Pyx_c_diff_double(__Pyx_c_quot_double(__pyx_t_5, __pyx_v_ez1ez2), __Pyx_c_quot_double(__pyx_t_3, (__pyx_v_Mem2[0]).epsz)));

    /* "MOKE_polar.pyx":175
 *         difvz1vz4=( -(Mem2[0]).B2+(Mem2[0]).root+difB )/((Mem1[0]).vz1+(Mem2[0]).vz2)
 *         difB=-( ( chiz1*(omvyvy-(Mem1[0]).epsy)+0.5*(chiy2+chiz2)*omvyvy*(Mem1[0]).epsz- omvyvy*chiy1)/ez1ez2 -chiz2*(1-vyvy/(Mem1[0]).epsz)*(Mem1[0]).epsy/(Mem2[0]).epsz)
 *         difvz2vz3=( -(Mem2[0]).B2-(Mem2[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz1)             # <<<<<<<<<<<<<<
 *         difvz2vz4=( -(Mem2[0]).B2+(Mem2[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz2)
 *         save3=(1-vyvy/(Mem1[0]).epsz)
 */
    __pyx_t_3 = __Pyx_c_sum_double(__Pyx_c_diff_double(__Pyx_c_neg_double((__pyx_v_Mem2[0]).B2), (__pyx_v_Mem2[0]).root), __pyx_v_difB);
    __pyx_t_5 = __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem2[0]).vz1);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_5))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 175, __pyx_L1_error)
    }
    __pyx_v_difvz2vz3 = __Pyx_c_quot_double(__pyx_t_3, __pyx_t_5);

    /* "MOKE_polar.pyx":176
 *         difB=-( ( chiz1*(omvyvy-(Mem1[0]).epsy)+0.5*(chiy2+chiz2)*omvyvy*(Mem1[0]).epsz- omvyvy*chiy1)/ez1ez2 -chiz2*(1-vyvy/(Mem1[0]).epsz)*(Mem1[0]).epsy/(Mem2[0]).epsz)
 *         difvz2vz3=( -(Mem2[0]).B2-(Mem2[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz1)
 *         difvz2vz4=( -(Mem2[0]).B2+(Mem2[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz2)             # <<<<<<<<<<<<<<
 *         save3=(1-vyvy/(Mem1[0]).epsz)
 *         save4=(1-vyvy/(Mem2[0]).epsz)
 */
    __pyx_t_5 = __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_neg_double((__pyx_v_Mem2[0]).B2), (__pyx_v_Mem2[0]).root), __pyx_v_difB);
    __pyx_t_3 = __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem2[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_3))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 176, __pyx_L1_error)
    }
    __pyx_v_difvz2vz4 = __Pyx_c_quot_double(__pyx_t_5, __pyx_t_3);

    /* "MOKE_polar.pyx":177
 *         difvz2vz3=( -(Mem2[0]).B2-(Mem2[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz1)
 *         difvz2vz4=( -(Mem2[0]).B2+(Mem2[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz2)
 *         save3=(1-vyvy/(Mem1[0]).epsz)             # <<<<<<<<<<<<<<
 *         save4=(1-vyvy/(Mem2[0]).epsz)
 * 
 */
    __pyx_t_3 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 177, __pyx_L1_error)
    }
    __pyx_v_save3 = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_quot_double(__pyx_t_3, (__pyx_v_Mem1[0]).epsz));

    /* "MOKE_polar.pyx":178
 *         difvz2vz4=( -(Mem2[0]).B2+(Mem2[0]).root+difB )/((Mem1[0]).vz2+(Mem2[0]).vz2)
 *         save3=(1-vyvy/(Mem1[0]).epsz)
 *         save4=(1-vyvy/(Mem2[0]).epsz)             # <<<<<<<<<<<<<<
 * 
 * #        save1=0.5/(Mem1[0]).vz1
 */
    __pyx_t_3 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem2[0]).epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 178, __pyx_L1_error)
    }
    __pyx_v_save4 = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_quot_double(__pyx_t_3, (__pyx_v_Mem2[0]).epsz));

    /* "MOKE_polar.pyx":201
 * #        J[1][2]=save1*( difvz2vz3+  -vyvy/ez1ez2*( difvz2vz3+ (Mem1[0]).vz2*chiz1-(Mem2[0]).vz1*chiz2   ) )
 * 
 *         save1=1.0/(Mem1[0]).vz1             # <<<<<<<<<<<<<<
 *         J[0][0]=save1*((Mem1[0]).vz1+(Mem2[0]).vz1)
 *         J[0][2]=save1*difvz1vz3
 */
    __pyx_t_3 = __pyx_t_double_complex_from_parts(1.0, 0);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz1))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 201, __pyx_L1_error)
    }
    __pyx_v_save1 = __Pyx_c_quot_double(__pyx_t_3, (__pyx_v_Mem1[0]).vz1);

    /* "MOKE_polar.pyx":202
 * 
 *         save1=1.0/(Mem1[0]).vz1
 *         J[0][0]=save1*((Mem1[0]).vz1+(Mem2[0]).vz1)             # <<<<<<<<<<<<<<
 *         J[0][2]=save1*difvz1vz3
 * 
 */
    ((__pyx_v_J[0])[0]) = __Pyx_c_prod_double(__pyx_v_save1, __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz1, (__pyx_v_Mem2[0]).vz1));

    /* "MOKE_polar.pyx":203
 *         save1=1.0/(Mem1[0]).vz1
 *         J[0][0]=save1*((Mem1[0]).vz1+(Mem2[0]).vz1)
 *         J[0][2]=save1*difvz1vz3             # <<<<<<<<<<<<<<
 * 
 * 
 */
    ((__pyx_v_J[0])[2]) = __Pyx_c_prod_double(__pyx_v_save1, __pyx_v_difvz1vz3);

    /* "MOKE_polar.pyx":206
 * 
 * 
 *         save1=1.0/( save3*(Mem2[0]).vz2 )             # <<<<<<<<<<<<<<
 *         J[1][1]=save1*( save3*(Mem2[0]).vz2 + save4*(Mem1[0]).vz2 )
 *         J[1][3]=save1*( -difvz2vz4-(vyvy/ez1ez2)*( -difvz2vz4+ (Mem2[0]).vz2*chiz2 - (Mem1[0]).vz2*chiz1 ) )
 */
    __pyx_t_3 = __pyx_t_double_complex_from_parts(1.0, 0);
    __pyx_t_5 = __Pyx_c_prod_double(__pyx_v_save3, (__pyx_v_Mem2[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_5))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 206, __pyx_L1_error)
    }
    __pyx_v_save1 = __Pyx_c_quot_double(__pyx_t_3, __pyx_t_5);

    /* "MOKE_polar.pyx":207
 * 
 *         save1=1.0/( save3*(Mem2[0]).vz2 )
 *         J[1][1]=save1*( save3*(Mem2[0]).vz2 + save4*(Mem1[0]).vz2 )             # <<<<<<<<<<<<<<
 *         J[1][3]=save1*( -difvz2vz4-(vyvy/ez1ez2)*( -difvz2vz4+ (Mem2[0]).vz2*chiz2 - (Mem1[0]).vz2*chiz1 ) )
 * 
 */
    ((__pyx_v_J[1])[1]) = __Pyx_c_prod_double(__pyx_v_save1, __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_save3, (__pyx_v_Mem2[0]).vz2), __Pyx_c_prod_double(__pyx_v_save4, (__pyx_v_Mem1[0]).vz2)));

    /* "MOKE_polar.pyx":208
 *         save1=1.0/( save3*(Mem2[0]).vz2 )
 *         J[1][1]=save1*( save3*(Mem2[0]).vz2 + save4*(Mem1[0]).vz2 )
 *         J[1][3]=save1*( -difvz2vz4-(vyvy/ez1ez2)*( -difvz2vz4+ (Mem2[0]).vz2*chiz2 - (Mem1[0]).vz2*chiz1 ) )             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_5 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_ez1ez2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 208, __pyx_L1_error)
    }
    ((__pyx_v_J[1])[3]) = __Pyx_c_prod_double(__pyx_v_save1, __Pyx_c_diff_double(__Pyx_c_neg_double(__pyx_v_difvz2vz4), __Pyx_c_prod_double(__Pyx_c_quot_double(__pyx_t_5, __pyx_v_ez1ez2), __Pyx_c_diff_double(__Pyx_c_sum_double(__Pyx_c_neg_double(__pyx_v_difvz2vz4), __Pyx_c_prod_double((__pyx_v_Mem2[0]).vz2, __pyx_v_chiz2)), __Pyx_c_prod_double((__pyx_v_Mem1[0]).vz2, __pyx_v_chiz1)))));

    /* "MOKE_polar.pyx":212
 * 
 * 
 *         save1=1.0*(Mem2[0]).PHI2/(Mem1[0]).vz1             # <<<<<<<<<<<<<<
 * 
 *         J[0][1]=save1*((Mem2[0]).vz2+(Mem1[0]).vz1)
 */
    __pyx_t_5 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(1.0, 0), (__pyx_v_Mem2[0]).PHI2);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz1))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 212, __pyx_L1_error)
    }
    __pyx_v_save1 = __Pyx_c_quot_double(__pyx_t_5, (__pyx_v_Mem1[0]).vz1);

    /* "MOKE_polar.pyx":214
 *         save1=1.0*(Mem2[0]).PHI2/(Mem1[0]).vz1
 * 
 *         J[0][1]=save1*((Mem2[0]).vz2+(Mem1[0]).vz1)             # <<<<<<<<<<<<<<
 *         J[0][3]=-save1*difvz1vz4
 * 
 */
    ((__pyx_v_J[0])[1]) = __Pyx_c_prod_double(__pyx_v_save1, __Pyx_c_sum_double((__pyx_v_Mem2[0]).vz2, (__pyx_v_Mem1[0]).vz1));

    /* "MOKE_polar.pyx":215
 * 
 *         J[0][1]=save1*((Mem2[0]).vz2+(Mem1[0]).vz1)
 *         J[0][3]=-save1*difvz1vz4             # <<<<<<<<<<<<<<
 * 
 * 
 */
    ((__pyx_v_J[0])[3]) = __Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_save1), __pyx_v_difvz1vz4);

    /* "MOKE_polar.pyx":218
 * 
 * 
 *         save1=(Mem2[0]).PHI1/(save3*save4)             # <<<<<<<<<<<<<<
 *         J[1][0]=save1*( (Mem1[0]).vz2*save4+(Mem2[0]).vz1*save3 )
 *         J[1][2]=save1*( difvz2vz3+  -vyvy/ez1ez2*( difvz2vz3+ (Mem1[0]).vz2*chiz1-(Mem2[0]).vz1*chiz2   ) )
 */
    __pyx_t_5 = __Pyx_c_prod_double(__pyx_v_save3, __pyx_v_save4);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_5))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 218, __pyx_L1_error)
    }
    __pyx_v_save1 = __Pyx_c_quot_double((__pyx_v_Mem2[0]).PHI1, __pyx_t_5);

    /* "MOKE_polar.pyx":219
 * 
 *         save1=(Mem2[0]).PHI1/(save3*save4)
 *         J[1][0]=save1*( (Mem1[0]).vz2*save4+(Mem2[0]).vz1*save3 )             # <<<<<<<<<<<<<<
 *         J[1][2]=save1*( difvz2vz3+  -vyvy/ez1ez2*( difvz2vz3+ (Mem1[0]).vz2*chiz1-(Mem2[0]).vz1*chiz2   ) )
 * 
 */
    ((__pyx_v_J[1])[0]) = __Pyx_c_prod_double(__pyx_v_save1, __Pyx_c_sum_double(__Pyx_c_prod_double((__pyx_v_Mem1[0]).vz2, __pyx_v_save4), __Pyx_c_prod_double((__pyx_v_Mem2[0]).vz1, __pyx_v_save3)));

    /* "MOKE_polar.pyx":220
 *         save1=(Mem2[0]).PHI1/(save3*save4)
 *         J[1][0]=save1*( (Mem1[0]).vz2*save4+(Mem2[0]).vz1*save3 )
 *         J[1][2]=save1*( difvz2vz3+  -vyvy/ez1ez2*( difvz2vz3+ (Mem1[0]).vz2*chiz1-(Mem2[0]).vz1*chiz2   ) )             # <<<<<<<<<<<<<<
 * 
 *     else:
 */
    __pyx_t_5 = __pyx_t_double_complex_from_parts((-__pyx_v_vyvy), 0);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_ez1ez2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 220, __pyx_L1_error)
    }
    ((__pyx_v_J[1])[2]) = __Pyx_c_prod_double(__pyx_v_save1, __Pyx_c_sum_double(__pyx_v_difvz2vz3, __Pyx_c_prod_double(__Pyx_c_quot_double(__pyx_t_5, __pyx_v_ez1ez2), __Pyx_c_diff_double(__Pyx_c_sum_double(__pyx_v_difvz2vz3, __Pyx_c_prod_double((__pyx_v_Mem1[0]).vz2, __pyx_v_chiz1)), __Pyx_c_prod_double((__pyx_v_Mem2[0]).vz1, __pyx_v_chiz2)))));

    /* "MOKE_polar.pyx":167
 *         J[1][2]=save1*difvz2vz3
 * 
 *     elif(IsMagnetic2):             # <<<<<<<<<<<<<<
 *         Fill_rMemory_z(Mem2, vy, vyvy, omvyvy, chix2, chiy2, chiz2, chig2)
 * 
 */
    goto __pyx_L3;
  }

  /* "MOKE_polar.pyx":223
 * 
 *     else:
 *         (Mem2[0]).IsFilled=1             # <<<<<<<<<<<<<<
 *         (Mem2[0]).epsy=1.0+chiy2
 *         (Mem2[0]).epsz=1.0+chiz2
 */
  /*else*/ {
    (__pyx_v_Mem2[0]).IsFilled = 1;

    /* "MOKE_polar.pyx":224
 *     else:
 *         (Mem2[0]).IsFilled=1
 *         (Mem2[0]).epsy=1.0+chiy2             # <<<<<<<<<<<<<<
 *         (Mem2[0]).epsz=1.0+chiz2
 *         (Mem2[0]).vz1=sqrt(1.+chix2-vyvy)
 */
    (__pyx_v_Mem2[0]).epsy = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1.0, 0), __pyx_v_chiy2);

    /* "MOKE_polar.pyx":225
 *         (Mem2[0]).IsFilled=1
 *         (Mem2[0]).epsy=1.0+chiy2
 *         (Mem2[0]).epsz=1.0+chiz2             # <<<<<<<<<<<<<<
 *         (Mem2[0]).vz1=sqrt(1.+chix2-vyvy)
 *         (Mem2[0]).vz2=sqrt((1.-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy)
 */
    (__pyx_v_Mem2[0]).epsz = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1.0, 0), __pyx_v_chiz2);

    /* "MOKE_polar.pyx":226
 *         (Mem2[0]).epsy=1.0+chiy2
 *         (Mem2[0]).epsz=1.0+chiz2
 *         (Mem2[0]).vz1=sqrt(1.+chix2-vyvy)             # <<<<<<<<<<<<<<
 *         (Mem2[0]).vz2=sqrt((1.-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy)
 *         sumv11v12=((Mem1[0]).vz1+(Mem2[0]).vz1)
 */
    (__pyx_v_Mem2[0]).vz1 = sqrt(__Pyx_c_diff_double(__Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_chix2), __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0)));

    /* "MOKE_polar.pyx":227
 *         (Mem2[0]).epsz=1.0+chiz2
 *         (Mem2[0]).vz1=sqrt(1.+chix2-vyvy)
 *         (Mem2[0]).vz2=sqrt((1.-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy)             # <<<<<<<<<<<<<<
 *         sumv11v12=((Mem1[0]).vz1+(Mem2[0]).vz1)
 *         J[0][0]=sumv11v12/(Mem1[0]).vz1
 */
    __pyx_t_5 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem2[0]).epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 227, __pyx_L1_error)
    }
    (__pyx_v_Mem2[0]).vz2 = sqrt(__Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1., 0), __Pyx_c_quot_double(__pyx_t_5, (__pyx_v_Mem2[0]).epsz)), (__pyx_v_Mem2[0]).epsy));

    /* "MOKE_polar.pyx":228
 *         (Mem2[0]).vz1=sqrt(1.+chix2-vyvy)
 *         (Mem2[0]).vz2=sqrt((1.-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy)
 *         sumv11v12=((Mem1[0]).vz1+(Mem2[0]).vz1)             # <<<<<<<<<<<<<<
 *         J[0][0]=sumv11v12/(Mem1[0]).vz1
 *         difvz1vz3=(chix1-chix2)/sumv11v12
 */
    __pyx_t_5 = __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz1, (__pyx_v_Mem2[0]).vz1);
    __pyx_t_6 = __pyx_PyComplex_FromComplex(__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_v_sumv11v12 = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "MOKE_polar.pyx":229
 *         (Mem2[0]).vz2=sqrt((1.-vyvy/(Mem2[0]).epsz)*(Mem2[0]).epsy)
 *         sumv11v12=((Mem1[0]).vz1+(Mem2[0]).vz1)
 *         J[0][0]=sumv11v12/(Mem1[0]).vz1             # <<<<<<<<<<<<<<
 *         difvz1vz3=(chix1-chix2)/sumv11v12
 *         J[0][2]=difvz1vz3/(Mem1[0]).vz1
 */
    __pyx_t_6 = __pyx_PyComplex_FromComplex((__pyx_v_Mem1[0]).vz1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_v_sumv11v12, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    ((__pyx_v_J[0])[0]) = __pyx_t_5;

    /* "MOKE_polar.pyx":230
 *         sumv11v12=((Mem1[0]).vz1+(Mem2[0]).vz1)
 *         J[0][0]=sumv11v12/(Mem1[0]).vz1
 *         difvz1vz3=(chix1-chix2)/sumv11v12             # <<<<<<<<<<<<<<
 *         J[0][2]=difvz1vz3/(Mem1[0]).vz1
 *         J[1][1]=1+(Mem1[0]).epsy*(Mem2[0]).vz2/( (Mem2[0]).epsy*(Mem1[0]).vz2 )
 */
    __pyx_t_5 = __Pyx_c_diff_double(__pyx_v_chix1, __pyx_v_chix2);
    __pyx_t_7 = __pyx_PyComplex_FromComplex(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_v_sumv11v12); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_5 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_t_6); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_difvz1vz3 = __pyx_t_5;

    /* "MOKE_polar.pyx":231
 *         J[0][0]=sumv11v12/(Mem1[0]).vz1
 *         difvz1vz3=(chix1-chix2)/sumv11v12
 *         J[0][2]=difvz1vz3/(Mem1[0]).vz1             # <<<<<<<<<<<<<<
 *         J[1][1]=1+(Mem1[0]).epsy*(Mem2[0]).vz2/( (Mem2[0]).epsy*(Mem1[0]).vz2 )
 *         J[1][3]=( (Mem1[0]).epsz*(Mem2[0]).epsz*(chiy2-chiy1)+vyvy*(chiz1+chiy1+chiz1*chiy1-chiz2-chiy2-chiy2*chiz2) ) *(Mem1[0]).epsy/( (Mem1[0]).vz2*(Mem1[0]).epsz*(Mem2[0]).epsz*((Mem1[0]).vz2*(Mem2[0]).epsy+(Mem2[0]).vz2*(Mem1[0]).epsy)  )
 */
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).vz1))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 231, __pyx_L1_error)
    }
    ((__pyx_v_J[0])[2]) = __Pyx_c_quot_double(__pyx_v_difvz1vz3, (__pyx_v_Mem1[0]).vz1);

    /* "MOKE_polar.pyx":232
 *         difvz1vz3=(chix1-chix2)/sumv11v12
 *         J[0][2]=difvz1vz3/(Mem1[0]).vz1
 *         J[1][1]=1+(Mem1[0]).epsy*(Mem2[0]).vz2/( (Mem2[0]).epsy*(Mem1[0]).vz2 )             # <<<<<<<<<<<<<<
 *         J[1][3]=( (Mem1[0]).epsz*(Mem2[0]).epsz*(chiy2-chiy1)+vyvy*(chiz1+chiy1+chiz1*chiy1-chiz2-chiy2-chiy2*chiz2) ) *(Mem1[0]).epsy/( (Mem1[0]).vz2*(Mem1[0]).epsz*(Mem2[0]).epsz*((Mem1[0]).vz2*(Mem2[0]).epsy+(Mem2[0]).vz2*(Mem1[0]).epsy)  )
 * 
 */
    __pyx_t_5 = __Pyx_c_prod_double((__pyx_v_Mem1[0]).epsy, (__pyx_v_Mem2[0]).vz2);
    __pyx_t_3 = __Pyx_c_prod_double((__pyx_v_Mem2[0]).epsy, (__pyx_v_Mem1[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_3))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 232, __pyx_L1_error)
    }
    ((__pyx_v_J[1])[1]) = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_quot_double(__pyx_t_5, __pyx_t_3));

    /* "MOKE_polar.pyx":233
 *         J[0][2]=difvz1vz3/(Mem1[0]).vz1
 *         J[1][1]=1+(Mem1[0]).epsy*(Mem2[0]).vz2/( (Mem2[0]).epsy*(Mem1[0]).vz2 )
 *         J[1][3]=( (Mem1[0]).epsz*(Mem2[0]).epsz*(chiy2-chiy1)+vyvy*(chiz1+chiy1+chiz1*chiy1-chiz2-chiy2-chiy2*chiz2) ) *(Mem1[0]).epsy/( (Mem1[0]).vz2*(Mem1[0]).epsz*(Mem2[0]).epsz*((Mem1[0]).vz2*(Mem2[0]).epsy+(Mem2[0]).vz2*(Mem1[0]).epsy)  )             # <<<<<<<<<<<<<<
 * 
 *         difvz2vz4=( -vyvy*(chiz2-chiz1)/( (Mem2[0]).epsz*(Mem1[0]).epsz ) + (1-vyvy/(Mem1[0]).epsz)*chiy1 - (1-vyvy/(Mem2[0]).epsz)*chiy2 )/( (Mem1[0]).vz2+(Mem2[0]).vz2 )
 */
    __pyx_t_3 = __Pyx_c_prod_double(__Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_prod_double((__pyx_v_Mem1[0]).epsz, (__pyx_v_Mem2[0]).epsz), __Pyx_c_diff_double(__pyx_v_chiy2, __pyx_v_chiy1)), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0), __Pyx_c_diff_double(__Pyx_c_diff_double(__Pyx_c_diff_double(__Pyx_c_sum_double(__Pyx_c_sum_double(__pyx_v_chiz1, __pyx_v_chiy1), __Pyx_c_prod_double(__pyx_v_chiz1, __pyx_v_chiy1)), __pyx_v_chiz2), __pyx_v_chiy2), __Pyx_c_prod_double(__pyx_v_chiy2, __pyx_v_chiz2)))), (__pyx_v_Mem1[0]).epsy);
    __pyx_t_5 = __Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem1[0]).epsz), (__pyx_v_Mem2[0]).epsz), __Pyx_c_sum_double(__Pyx_c_prod_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem2[0]).epsy), __Pyx_c_prod_double((__pyx_v_Mem2[0]).vz2, (__pyx_v_Mem1[0]).epsy)));
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_5))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 233, __pyx_L1_error)
    }
    ((__pyx_v_J[1])[3]) = __Pyx_c_quot_double(__pyx_t_3, __pyx_t_5);

    /* "MOKE_polar.pyx":235
 *         J[1][3]=( (Mem1[0]).epsz*(Mem2[0]).epsz*(chiy2-chiy1)+vyvy*(chiz1+chiy1+chiz1*chiy1-chiz2-chiy2-chiy2*chiz2) ) *(Mem1[0]).epsy/( (Mem1[0]).vz2*(Mem1[0]).epsz*(Mem2[0]).epsz*((Mem1[0]).vz2*(Mem2[0]).epsy+(Mem2[0]).vz2*(Mem1[0]).epsy)  )
 * 
 *         difvz2vz4=( -vyvy*(chiz2-chiz1)/( (Mem2[0]).epsz*(Mem1[0]).epsz ) + (1-vyvy/(Mem1[0]).epsz)*chiy1 - (1-vyvy/(Mem2[0]).epsz)*chiy2 )/( (Mem1[0]).vz2+(Mem2[0]).vz2 )             # <<<<<<<<<<<<<<
 * 
 *         J[1][3]=( 1/( (Mem2[0]).epsy*(Mem1[0]).vz2 ) )*( difvz2vz4 + chiy2*(Mem1[0]).vz2 -chiy1*(Mem2[0]).vz2 )
 */
    __pyx_t_5 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((-__pyx_v_vyvy), 0), __Pyx_c_diff_double(__pyx_v_chiz2, __pyx_v_chiz1));
    __pyx_t_3 = __Pyx_c_prod_double((__pyx_v_Mem2[0]).epsz, (__pyx_v_Mem1[0]).epsz);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_3))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 235, __pyx_L1_error)
    }
    __pyx_t_2 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem1[0]).epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 235, __pyx_L1_error)
    }
    __pyx_t_4 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double((__pyx_v_Mem2[0]).epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 235, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_c_diff_double(__Pyx_c_sum_double(__Pyx_c_quot_double(__pyx_t_5, __pyx_t_3), __Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_quot_double(__pyx_t_2, (__pyx_v_Mem1[0]).epsz)), __pyx_v_chiy1)), __Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_quot_double(__pyx_t_4, (__pyx_v_Mem2[0]).epsz)), __pyx_v_chiy2));
    __pyx_t_4 = __Pyx_c_sum_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem2[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_4))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 235, __pyx_L1_error)
    }
    __pyx_v_difvz2vz4 = __Pyx_c_quot_double(__pyx_t_8, __pyx_t_4);

    /* "MOKE_polar.pyx":237
 *         difvz2vz4=( -vyvy*(chiz2-chiz1)/( (Mem2[0]).epsz*(Mem1[0]).epsz ) + (1-vyvy/(Mem1[0]).epsz)*chiy1 - (1-vyvy/(Mem2[0]).epsz)*chiy2 )/( (Mem1[0]).vz2+(Mem2[0]).vz2 )
 * 
 *         J[1][3]=( 1/( (Mem2[0]).epsy*(Mem1[0]).vz2 ) )*( difvz2vz4 + chiy2*(Mem1[0]).vz2 -chiy1*(Mem2[0]).vz2 )             # <<<<<<<<<<<<<<
 * 
 *         J[0][0]*=exp(roughfac*cquadr(difvz1vz3) )
 */
    __pyx_t_4 = __pyx_t_double_complex_from_parts(1, 0);
    __pyx_t_8 = __Pyx_c_prod_double((__pyx_v_Mem2[0]).epsy, (__pyx_v_Mem1[0]).vz2);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_8))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 237, __pyx_L1_error)
    }
    ((__pyx_v_J[1])[3]) = __Pyx_c_prod_double(__Pyx_c_quot_double(__pyx_t_4, __pyx_t_8), __Pyx_c_diff_double(__Pyx_c_sum_double(__pyx_v_difvz2vz4, __Pyx_c_prod_double(__pyx_v_chiy2, (__pyx_v_Mem1[0]).vz2)), __Pyx_c_prod_double(__pyx_v_chiy1, (__pyx_v_Mem2[0]).vz2)));

    /* "MOKE_polar.pyx":239
 *         J[1][3]=( 1/( (Mem2[0]).epsy*(Mem1[0]).vz2 ) )*( difvz2vz4 + chiy2*(Mem1[0]).vz2 -chiy1*(Mem2[0]).vz2 )
 * 
 *         J[0][0]*=exp(roughfac*cquadr(difvz1vz3) )             # <<<<<<<<<<<<<<
 *         J[0][2]*=exp(roughfac*cquadr((Mem1[0]).vz1+(Mem2[0]).vz1))
 *         J[1][1]*=exp(roughfac*cquadr(difvz2vz4) )
 */
    __pyx_t_9 = 0;
    __pyx_t_10 = 0;
    ((__pyx_v_J[__pyx_t_9])[__pyx_t_10]) = __Pyx_c_prod_double(((__pyx_v_J[__pyx_t_9])[__pyx_t_10]), exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_v_difvz1vz3))));

    /* "MOKE_polar.pyx":240
 * 
 *         J[0][0]*=exp(roughfac*cquadr(difvz1vz3) )
 *         J[0][2]*=exp(roughfac*cquadr((Mem1[0]).vz1+(Mem2[0]).vz1))             # <<<<<<<<<<<<<<
 *         J[1][1]*=exp(roughfac*cquadr(difvz2vz4) )
 *         J[1][3]*=exp(roughfac*cquadr((Mem1[0]).vz2+(Mem2[0]).vz2))
 */
    __pyx_t_9 = 0;
    __pyx_t_10 = 2;
    ((__pyx_v_J[__pyx_t_9])[__pyx_t_10]) = __Pyx_c_prod_double(((__pyx_v_J[__pyx_t_9])[__pyx_t_10]), exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_sum_double((__pyx_v_Mem1[0]).vz1, (__pyx_v_Mem2[0]).vz1)))));

    /* "MOKE_polar.pyx":241
 *         J[0][0]*=exp(roughfac*cquadr(difvz1vz3) )
 *         J[0][2]*=exp(roughfac*cquadr((Mem1[0]).vz1+(Mem2[0]).vz1))
 *         J[1][1]*=exp(roughfac*cquadr(difvz2vz4) )             # <<<<<<<<<<<<<<
 *         J[1][3]*=exp(roughfac*cquadr((Mem1[0]).vz2+(Mem2[0]).vz2))
 *         (r[0])[0][0]=-J[0][2]/J[0][0]
 */
    __pyx_t_9 = 1;
    __pyx_t_10 = 1;
    ((__pyx_v_J[__pyx_t_9])[__pyx_t_10]) = __Pyx_c_prod_double(((__pyx_v_J[__pyx_t_9])[__pyx_t_10]), exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_v_difvz2vz4))));

    /* "MOKE_polar.pyx":242
 *         J[0][2]*=exp(roughfac*cquadr((Mem1[0]).vz1+(Mem2[0]).vz1))
 *         J[1][1]*=exp(roughfac*cquadr(difvz2vz4) )
 *         J[1][3]*=exp(roughfac*cquadr((Mem1[0]).vz2+(Mem2[0]).vz2))             # <<<<<<<<<<<<<<
 *         (r[0])[0][0]=-J[0][2]/J[0][0]
 *         (r[0])[0][1]=0
 */
    __pyx_t_9 = 1;
    __pyx_t_10 = 3;
    ((__pyx_v_J[__pyx_t_9])[__pyx_t_10]) = __Pyx_c_prod_double(((__pyx_v_J[__pyx_t_9])[__pyx_t_10]), exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_sum_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem2[0]).vz2)))));

    /* "MOKE_polar.pyx":243
 *         J[1][1]*=exp(roughfac*cquadr(difvz2vz4) )
 *         J[1][3]*=exp(roughfac*cquadr((Mem1[0]).vz2+(Mem2[0]).vz2))
 *         (r[0])[0][0]=-J[0][2]/J[0][0]             # <<<<<<<<<<<<<<
 *         (r[0])[0][1]=0
 *         (r[0])[1][0]=0
 */
    __pyx_t_8 = __Pyx_c_neg_double(((__pyx_v_J[0])[2]));
    if (unlikely(__Pyx_c_is_zero_double(((__pyx_v_J[0])[0])))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 243, __pyx_L1_error)
    }
    (((__pyx_v_r[0])[0])[0]) = __Pyx_c_quot_double(__pyx_t_8, ((__pyx_v_J[0])[0]));

    /* "MOKE_polar.pyx":244
 *         J[1][3]*=exp(roughfac*cquadr((Mem1[0]).vz2+(Mem2[0]).vz2))
 *         (r[0])[0][0]=-J[0][2]/J[0][0]
 *         (r[0])[0][1]=0             # <<<<<<<<<<<<<<
 *         (r[0])[1][0]=0
 *         (r[0])[1][1]=-J[1][3]/J[1][1]
 */
    (((__pyx_v_r[0])[0])[1]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "MOKE_polar.pyx":245
 *         (r[0])[0][0]=-J[0][2]/J[0][0]
 *         (r[0])[0][1]=0
 *         (r[0])[1][0]=0             # <<<<<<<<<<<<<<
 *         (r[0])[1][1]=-J[1][3]/J[1][1]
 *         (t[0])[0][0]=J[0][2]*(r[0])[0][0]+J[0][0] # Incoming 1 transmitted 1
 */
    (((__pyx_v_r[0])[1])[0]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "MOKE_polar.pyx":246
 *         (r[0])[0][1]=0
 *         (r[0])[1][0]=0
 *         (r[0])[1][1]=-J[1][3]/J[1][1]             # <<<<<<<<<<<<<<
 *         (t[0])[0][0]=J[0][2]*(r[0])[0][0]+J[0][0] # Incoming 1 transmitted 1
 *         (t[0])[0][1]=0 # Incoming 2 transmitted 1
 */
    __pyx_t_8 = __Pyx_c_neg_double(((__pyx_v_J[1])[3]));
    if (unlikely(__Pyx_c_is_zero_double(((__pyx_v_J[1])[1])))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 246, __pyx_L1_error)
    }
    (((__pyx_v_r[0])[1])[1]) = __Pyx_c_quot_double(__pyx_t_8, ((__pyx_v_J[1])[1]));

    /* "MOKE_polar.pyx":247
 *         (r[0])[1][0]=0
 *         (r[0])[1][1]=-J[1][3]/J[1][1]
 *         (t[0])[0][0]=J[0][2]*(r[0])[0][0]+J[0][0] # Incoming 1 transmitted 1             # <<<<<<<<<<<<<<
 *         (t[0])[0][1]=0 # Incoming 2 transmitted 1
 *         (t[0])[1][0]=0 # Incoming 1 transmitted 2
 */
    (((__pyx_v_t[0])[0])[0]) = __Pyx_c_sum_double(__Pyx_c_prod_double(((__pyx_v_J[0])[2]), (((__pyx_v_r[0])[0])[0])), ((__pyx_v_J[0])[0]));

    /* "MOKE_polar.pyx":248
 *         (r[0])[1][1]=-J[1][3]/J[1][1]
 *         (t[0])[0][0]=J[0][2]*(r[0])[0][0]+J[0][0] # Incoming 1 transmitted 1
 *         (t[0])[0][1]=0 # Incoming 2 transmitted 1             # <<<<<<<<<<<<<<
 *         (t[0])[1][0]=0 # Incoming 1 transmitted 2
 *         (t[0])[1][1]=J[1][3]*(r[0])[1][1]+J[1][1] # Incoming 2 transmitted 2
 */
    (((__pyx_v_t[0])[0])[1]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "MOKE_polar.pyx":249
 *         (t[0])[0][0]=J[0][2]*(r[0])[0][0]+J[0][0] # Incoming 1 transmitted 1
 *         (t[0])[0][1]=0 # Incoming 2 transmitted 1
 *         (t[0])[1][0]=0 # Incoming 1 transmitted 2             # <<<<<<<<<<<<<<
 *         (t[0])[1][1]=J[1][3]*(r[0])[1][1]+J[1][1] # Incoming 2 transmitted 2
 *         (tprime[0])[0][0]=1.0/J[0][0]
 */
    (((__pyx_v_t[0])[1])[0]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "MOKE_polar.pyx":250
 *         (t[0])[0][1]=0 # Incoming 2 transmitted 1
 *         (t[0])[1][0]=0 # Incoming 1 transmitted 2
 *         (t[0])[1][1]=J[1][3]*(r[0])[1][1]+J[1][1] # Incoming 2 transmitted 2             # <<<<<<<<<<<<<<
 *         (tprime[0])[0][0]=1.0/J[0][0]
 *         (tprime[0])[0][1]=0
 */
    (((__pyx_v_t[0])[1])[1]) = __Pyx_c_sum_double(__Pyx_c_prod_double(((__pyx_v_J[1])[3]), (((__pyx_v_r[0])[1])[1])), ((__pyx_v_J[1])[1]));

    /* "MOKE_polar.pyx":251
 *         (t[0])[1][0]=0 # Incoming 1 transmitted 2
 *         (t[0])[1][1]=J[1][3]*(r[0])[1][1]+J[1][1] # Incoming 2 transmitted 2
 *         (tprime[0])[0][0]=1.0/J[0][0]             # <<<<<<<<<<<<<<
 *         (tprime[0])[0][1]=0
 *         (tprime[0])[1][0]=0
 */
    __pyx_t_8 = __pyx_t_double_complex_from_parts(1.0, 0);
    if (unlikely(__Pyx_c_is_zero_double(((__pyx_v_J[0])[0])))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 251, __pyx_L1_error)
    }
    (((__pyx_v_tprime[0])[0])[0]) = __Pyx_c_quot_double(__pyx_t_8, ((__pyx_v_J[0])[0]));

    /* "MOKE_polar.pyx":252
 *         (t[0])[1][1]=J[1][3]*(r[0])[1][1]+J[1][1] # Incoming 2 transmitted 2
 *         (tprime[0])[0][0]=1.0/J[0][0]
 *         (tprime[0])[0][1]=0             # <<<<<<<<<<<<<<
 *         (tprime[0])[1][0]=0
 *         (tprime[0])[1][1]=1.0/J[1][1]
 */
    (((__pyx_v_tprime[0])[0])[1]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "MOKE_polar.pyx":253
 *         (tprime[0])[0][0]=1.0/J[0][0]
 *         (tprime[0])[0][1]=0
 *         (tprime[0])[1][0]=0             # <<<<<<<<<<<<<<
 *         (tprime[0])[1][1]=1.0/J[1][1]
 *         (rprime[0])[0][0]=-(r[0])[0][0]
 */
    (((__pyx_v_tprime[0])[1])[0]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "MOKE_polar.pyx":254
 *         (tprime[0])[0][1]=0
 *         (tprime[0])[1][0]=0
 *         (tprime[0])[1][1]=1.0/J[1][1]             # <<<<<<<<<<<<<<
 *         (rprime[0])[0][0]=-(r[0])[0][0]
 *         (rprime[0])[0][1]=0
 */
    __pyx_t_8 = __pyx_t_double_complex_from_parts(1.0, 0);
    if (unlikely(__Pyx_c_is_zero_double(((__pyx_v_J[1])[1])))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 254, __pyx_L1_error)
    }
    (((__pyx_v_tprime[0])[1])[1]) = __Pyx_c_quot_double(__pyx_t_8, ((__pyx_v_J[1])[1]));

    /* "MOKE_polar.pyx":255
 *         (tprime[0])[1][0]=0
 *         (tprime[0])[1][1]=1.0/J[1][1]
 *         (rprime[0])[0][0]=-(r[0])[0][0]             # <<<<<<<<<<<<<<
 *         (rprime[0])[0][1]=0
 *         (rprime[0])[1][0]=0
 */
    (((__pyx_v_rprime[0])[0])[0]) = __Pyx_c_neg_double((((__pyx_v_r[0])[0])[0]));

    /* "MOKE_polar.pyx":256
 *         (tprime[0])[1][1]=1.0/J[1][1]
 *         (rprime[0])[0][0]=-(r[0])[0][0]
 *         (rprime[0])[0][1]=0             # <<<<<<<<<<<<<<
 *         (rprime[0])[1][0]=0
 *         (rprime[0])[1][1]=-(r[0])[1][1]
 */
    (((__pyx_v_rprime[0])[0])[1]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "MOKE_polar.pyx":257
 *         (rprime[0])[0][0]=-(r[0])[0][0]
 *         (rprime[0])[0][1]=0
 *         (rprime[0])[1][0]=0             # <<<<<<<<<<<<<<
 *         (rprime[0])[1][1]=-(r[0])[1][1]
 *         return
 */
    (((__pyx_v_rprime[0])[1])[0]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "MOKE_polar.pyx":258
 *         (rprime[0])[0][1]=0
 *         (rprime[0])[1][0]=0
 *         (rprime[0])[1][1]=-(r[0])[1][1]             # <<<<<<<<<<<<<<
 *         return
 * 
 */
    (((__pyx_v_rprime[0])[1])[1]) = __Pyx_c_neg_double((((__pyx_v_r[0])[1])[1]));

    /* "MOKE_polar.pyx":259
 *         (rprime[0])[1][0]=0
 *         (rprime[0])[1][1]=-(r[0])[1][1]
 *         return             # <<<<<<<<<<<<<<
 * 
 * 
 */
    goto __pyx_L0;
  }
  __pyx_L3:;

  /* "MOKE_polar.pyx":263
 * 
 * 
 *     J[0][0]*=exp(roughfac*cquadr(difvz1vz3) )             # <<<<<<<<<<<<<<
 *     J[0][2]*=exp(roughfac*cquadr((Mem1[0]).vz1+(Mem2[0]).vz1))
 *     J[1][1]*=exp(roughfac*cquadr(difvz2vz4) )
 */
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  ((__pyx_v_J[__pyx_t_9])[__pyx_t_10]) = __Pyx_c_prod_double(((__pyx_v_J[__pyx_t_9])[__pyx_t_10]), exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_v_difvz1vz3))));

  /* "MOKE_polar.pyx":264
 * 
 *     J[0][0]*=exp(roughfac*cquadr(difvz1vz3) )
 *     J[0][2]*=exp(roughfac*cquadr((Mem1[0]).vz1+(Mem2[0]).vz1))             # <<<<<<<<<<<<<<
 *     J[1][1]*=exp(roughfac*cquadr(difvz2vz4) )
 *     J[1][3]*=exp(roughfac*cquadr((Mem1[0]).vz2+(Mem2[0]).vz2))
 */
  __pyx_t_9 = 0;
  __pyx_t_10 = 2;
  ((__pyx_v_J[__pyx_t_9])[__pyx_t_10]) = __Pyx_c_prod_double(((__pyx_v_J[__pyx_t_9])[__pyx_t_10]), exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_sum_double((__pyx_v_Mem1[0]).vz1, (__pyx_v_Mem2[0]).vz1)))));

  /* "MOKE_polar.pyx":265
 *     J[0][0]*=exp(roughfac*cquadr(difvz1vz3) )
 *     J[0][2]*=exp(roughfac*cquadr((Mem1[0]).vz1+(Mem2[0]).vz1))
 *     J[1][1]*=exp(roughfac*cquadr(difvz2vz4) )             # <<<<<<<<<<<<<<
 *     J[1][3]*=exp(roughfac*cquadr((Mem1[0]).vz2+(Mem2[0]).vz2))
 *     J[0][1]*=exp(roughfac*cquadr(difvz1vz4) )
 */
  __pyx_t_9 = 1;
  __pyx_t_10 = 1;
  ((__pyx_v_J[__pyx_t_9])[__pyx_t_10]) = __Pyx_c_prod_double(((__pyx_v_J[__pyx_t_9])[__pyx_t_10]), exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_v_difvz2vz4))));

  /* "MOKE_polar.pyx":266
 *     J[0][2]*=exp(roughfac*cquadr((Mem1[0]).vz1+(Mem2[0]).vz1))
 *     J[1][1]*=exp(roughfac*cquadr(difvz2vz4) )
 *     J[1][3]*=exp(roughfac*cquadr((Mem1[0]).vz2+(Mem2[0]).vz2))             # <<<<<<<<<<<<<<
 *     J[0][1]*=exp(roughfac*cquadr(difvz1vz4) )
 *     J[0][3]*=exp(roughfac*cquadr((Mem1[0]).vz1+(Mem2[0]).vz2))
 */
  __pyx_t_9 = 1;
  __pyx_t_10 = 3;
  ((__pyx_v_J[__pyx_t_9])[__pyx_t_10]) = __Pyx_c_prod_double(((__pyx_v_J[__pyx_t_9])[__pyx_t_10]), exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_sum_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem2[0]).vz2)))));

  /* "MOKE_polar.pyx":267
 *     J[1][1]*=exp(roughfac*cquadr(difvz2vz4) )
 *     J[1][3]*=exp(roughfac*cquadr((Mem1[0]).vz2+(Mem2[0]).vz2))
 *     J[0][1]*=exp(roughfac*cquadr(difvz1vz4) )             # <<<<<<<<<<<<<<
 *     J[0][3]*=exp(roughfac*cquadr((Mem1[0]).vz1+(Mem2[0]).vz2))
 *     J[1][0]*=exp(roughfac*cquadr(difvz2vz3) )
 */
  __pyx_t_9 = 0;
  __pyx_t_10 = 1;
  ((__pyx_v_J[__pyx_t_9])[__pyx_t_10]) = __Pyx_c_prod_double(((__pyx_v_J[__pyx_t_9])[__pyx_t_10]), exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_v_difvz1vz4))));

  /* "MOKE_polar.pyx":268
 *     J[1][3]*=exp(roughfac*cquadr((Mem1[0]).vz2+(Mem2[0]).vz2))
 *     J[0][1]*=exp(roughfac*cquadr(difvz1vz4) )
 *     J[0][3]*=exp(roughfac*cquadr((Mem1[0]).vz1+(Mem2[0]).vz2))             # <<<<<<<<<<<<<<
 *     J[1][0]*=exp(roughfac*cquadr(difvz2vz3) )
 *     J[1][2]*=exp(roughfac*cquadr((Mem1[0]).vz2+(Mem2[0]).vz1))
 */
  __pyx_t_9 = 0;
  __pyx_t_10 = 3;
  ((__pyx_v_J[__pyx_t_9])[__pyx_t_10]) = __Pyx_c_prod_double(((__pyx_v_J[__pyx_t_9])[__pyx_t_10]), exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_sum_double((__pyx_v_Mem1[0]).vz1, (__pyx_v_Mem2[0]).vz2)))));

  /* "MOKE_polar.pyx":269
 *     J[0][1]*=exp(roughfac*cquadr(difvz1vz4) )
 *     J[0][3]*=exp(roughfac*cquadr((Mem1[0]).vz1+(Mem2[0]).vz2))
 *     J[1][0]*=exp(roughfac*cquadr(difvz2vz3) )             # <<<<<<<<<<<<<<
 *     J[1][2]*=exp(roughfac*cquadr((Mem1[0]).vz2+(Mem2[0]).vz1))
 * 
 */
  __pyx_t_9 = 1;
  __pyx_t_10 = 0;
  ((__pyx_v_J[__pyx_t_9])[__pyx_t_10]) = __Pyx_c_prod_double(((__pyx_v_J[__pyx_t_9])[__pyx_t_10]), exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_v_difvz2vz3))));

  /* "MOKE_polar.pyx":270
 *     J[0][3]*=exp(roughfac*cquadr((Mem1[0]).vz1+(Mem2[0]).vz2))
 *     J[1][0]*=exp(roughfac*cquadr(difvz2vz3) )
 *     J[1][2]*=exp(roughfac*cquadr((Mem1[0]).vz2+(Mem2[0]).vz1))             # <<<<<<<<<<<<<<
 * 
 *     divide2=1.0/(J[0][1]*J[1][0]-J[1][1]*J[0][0])
 */
  __pyx_t_9 = 1;
  __pyx_t_10 = 2;
  ((__pyx_v_J[__pyx_t_9])[__pyx_t_10]) = __Pyx_c_prod_double(((__pyx_v_J[__pyx_t_9])[__pyx_t_10]), exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_sum_double((__pyx_v_Mem1[0]).vz2, (__pyx_v_Mem2[0]).vz1)))));

  /* "MOKE_polar.pyx":272
 *     J[1][2]*=exp(roughfac*cquadr((Mem1[0]).vz2+(Mem2[0]).vz1))
 * 
 *     divide2=1.0/(J[0][1]*J[1][0]-J[1][1]*J[0][0])             # <<<<<<<<<<<<<<
 * 
 *     (r[0])[0][0]=(J[1][1]*J[0][2]-J[0][1]*J[1][2])*divide2 # Incoming 1 reflected 1
 */
  __pyx_t_8 = __pyx_t_double_complex_from_parts(1.0, 0);
  __pyx_t_4 = __Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_J[0])[1]), ((__pyx_v_J[1])[0])), __Pyx_c_prod_double(((__pyx_v_J[1])[1]), ((__pyx_v_J[0])[0])));
  if (unlikely(__Pyx_c_is_zero_double(__pyx_t_4))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 272, __pyx_L1_error)
  }
  __pyx_v_divide2 = __Pyx_c_quot_double(__pyx_t_8, __pyx_t_4);

  /* "MOKE_polar.pyx":274
 *     divide2=1.0/(J[0][1]*J[1][0]-J[1][1]*J[0][0])
 * 
 *     (r[0])[0][0]=(J[1][1]*J[0][2]-J[0][1]*J[1][2])*divide2 # Incoming 1 reflected 1             # <<<<<<<<<<<<<<
 *     (r[0])[0][1]=-(J[1][1]*J[0][3]-J[0][1]*J[1][3])*divide2 # Incoming 2 reflected 1
 *     (r[0])[1][0]=-(J[0][0]*J[1][2]-J[1][0]*J[0][2])*divide2 # Incoming 1 reflected 2
 */
  (((__pyx_v_r[0])[0])[0]) = __Pyx_c_prod_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_J[1])[1]), ((__pyx_v_J[0])[2])), __Pyx_c_prod_double(((__pyx_v_J[0])[1]), ((__pyx_v_J[1])[2]))), __pyx_v_divide2);

  /* "MOKE_polar.pyx":275
 * 
 *     (r[0])[0][0]=(J[1][1]*J[0][2]-J[0][1]*J[1][2])*divide2 # Incoming 1 reflected 1
 *     (r[0])[0][1]=-(J[1][1]*J[0][3]-J[0][1]*J[1][3])*divide2 # Incoming 2 reflected 1             # <<<<<<<<<<<<<<
 *     (r[0])[1][0]=-(J[0][0]*J[1][2]-J[1][0]*J[0][2])*divide2 # Incoming 1 reflected 2
 *     (r[0])[1][1]=(J[0][0]*J[1][3]-J[1][0]*J[0][3])*divide2 # Incoming 2 reflected 2
 */
  (((__pyx_v_r[0])[0])[1]) = __Pyx_c_prod_double(__Pyx_c_neg_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_J[1])[1]), ((__pyx_v_J[0])[3])), __Pyx_c_prod_double(((__pyx_v_J[0])[1]), ((__pyx_v_J[1])[3])))), __pyx_v_divide2);

  /* "MOKE_polar.pyx":276
 *     (r[0])[0][0]=(J[1][1]*J[0][2]-J[0][1]*J[1][2])*divide2 # Incoming 1 reflected 1
 *     (r[0])[0][1]=-(J[1][1]*J[0][3]-J[0][1]*J[1][3])*divide2 # Incoming 2 reflected 1
 *     (r[0])[1][0]=-(J[0][0]*J[1][2]-J[1][0]*J[0][2])*divide2 # Incoming 1 reflected 2             # <<<<<<<<<<<<<<
 *     (r[0])[1][1]=(J[0][0]*J[1][3]-J[1][0]*J[0][3])*divide2 # Incoming 2 reflected 2
 * 
 */
  (((__pyx_v_r[0])[1])[0]) = __Pyx_c_prod_double(__Pyx_c_neg_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_J[0])[0]), ((__pyx_v_J[1])[2])), __Pyx_c_prod_double(((__pyx_v_J[1])[0]), ((__pyx_v_J[0])[2])))), __pyx_v_divide2);

  /* "MOKE_polar.pyx":277
 *     (r[0])[0][1]=-(J[1][1]*J[0][3]-J[0][1]*J[1][3])*divide2 # Incoming 2 reflected 1
 *     (r[0])[1][0]=-(J[0][0]*J[1][2]-J[1][0]*J[0][2])*divide2 # Incoming 1 reflected 2
 *     (r[0])[1][1]=(J[0][0]*J[1][3]-J[1][0]*J[0][3])*divide2 # Incoming 2 reflected 2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (((__pyx_v_r[0])[1])[1]) = __Pyx_c_prod_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_J[0])[0]), ((__pyx_v_J[1])[3])), __Pyx_c_prod_double(((__pyx_v_J[1])[0]), ((__pyx_v_J[0])[3]))), __pyx_v_divide2);

  /* "MOKE_polar.pyx":281
 * 
 * 
 *     (t[0])[0][0]=J[0][2]*(r[0])[0][0]+J[0][3]*(r[0])[1][0]+J[0][0] # Incoming 1 transmitted 1             # <<<<<<<<<<<<<<
 *     (t[0])[0][1]=J[0][2]*(r[0])[0][1]+J[0][3]*(r[0])[1][1]+J[0][1] # Incoming 2 transmitted 1
 *     (t[0])[1][0]=J[1][2]*(r[0])[0][0]+J[1][3]*(r[0])[1][0]+J[1][0] # Incoming 1 transmitted 2
 */
  (((__pyx_v_t[0])[0])[0]) = __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_prod_double(((__pyx_v_J[0])[2]), (((__pyx_v_r[0])[0])[0])), __Pyx_c_prod_double(((__pyx_v_J[0])[3]), (((__pyx_v_r[0])[1])[0]))), ((__pyx_v_J[0])[0]));

  /* "MOKE_polar.pyx":282
 * 
 *     (t[0])[0][0]=J[0][2]*(r[0])[0][0]+J[0][3]*(r[0])[1][0]+J[0][0] # Incoming 1 transmitted 1
 *     (t[0])[0][1]=J[0][2]*(r[0])[0][1]+J[0][3]*(r[0])[1][1]+J[0][1] # Incoming 2 transmitted 1             # <<<<<<<<<<<<<<
 *     (t[0])[1][0]=J[1][2]*(r[0])[0][0]+J[1][3]*(r[0])[1][0]+J[1][0] # Incoming 1 transmitted 2
 *     (t[0])[1][1]=J[1][2]*(r[0])[0][1]+J[1][3]*(r[0])[1][1]+J[1][1] # Incoming 2 transmitted 2
 */
  (((__pyx_v_t[0])[0])[1]) = __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_prod_double(((__pyx_v_J[0])[2]), (((__pyx_v_r[0])[0])[1])), __Pyx_c_prod_double(((__pyx_v_J[0])[3]), (((__pyx_v_r[0])[1])[1]))), ((__pyx_v_J[0])[1]));

  /* "MOKE_polar.pyx":283
 *     (t[0])[0][0]=J[0][2]*(r[0])[0][0]+J[0][3]*(r[0])[1][0]+J[0][0] # Incoming 1 transmitted 1
 *     (t[0])[0][1]=J[0][2]*(r[0])[0][1]+J[0][3]*(r[0])[1][1]+J[0][1] # Incoming 2 transmitted 1
 *     (t[0])[1][0]=J[1][2]*(r[0])[0][0]+J[1][3]*(r[0])[1][0]+J[1][0] # Incoming 1 transmitted 2             # <<<<<<<<<<<<<<
 *     (t[0])[1][1]=J[1][2]*(r[0])[0][1]+J[1][3]*(r[0])[1][1]+J[1][1] # Incoming 2 transmitted 2
 * 
 */
  (((__pyx_v_t[0])[1])[0]) = __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_prod_double(((__pyx_v_J[1])[2]), (((__pyx_v_r[0])[0])[0])), __Pyx_c_prod_double(((__pyx_v_J[1])[3]), (((__pyx_v_r[0])[1])[0]))), ((__pyx_v_J[1])[0]));

  /* "MOKE_polar.pyx":284
 *     (t[0])[0][1]=J[0][2]*(r[0])[0][1]+J[0][3]*(r[0])[1][1]+J[0][1] # Incoming 2 transmitted 1
 *     (t[0])[1][0]=J[1][2]*(r[0])[0][0]+J[1][3]*(r[0])[1][0]+J[1][0] # Incoming 1 transmitted 2
 *     (t[0])[1][1]=J[1][2]*(r[0])[0][1]+J[1][3]*(r[0])[1][1]+J[1][1] # Incoming 2 transmitted 2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (((__pyx_v_t[0])[1])[1]) = __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_prod_double(((__pyx_v_J[1])[2]), (((__pyx_v_r[0])[0])[1])), __Pyx_c_prod_double(((__pyx_v_J[1])[3]), (((__pyx_v_r[0])[1])[1]))), ((__pyx_v_J[1])[1]));

  /* "MOKE_polar.pyx":288
 * 
 * 
 *     (tprime[0])[0][0]=-J[1][1]*divide2             # <<<<<<<<<<<<<<
 *     (tprime[0])[0][1]=-J[0][1]*divide2
 *     (tprime[0])[1][0]=-J[1][0]*divide2
 */
  (((__pyx_v_tprime[0])[0])[0]) = __Pyx_c_prod_double(__Pyx_c_neg_double(((__pyx_v_J[1])[1])), __pyx_v_divide2);

  /* "MOKE_polar.pyx":289
 * 
 *     (tprime[0])[0][0]=-J[1][1]*divide2
 *     (tprime[0])[0][1]=-J[0][1]*divide2             # <<<<<<<<<<<<<<
 *     (tprime[0])[1][0]=-J[1][0]*divide2
 *     (tprime[0])[1][1]=-J[0][0]*divide2
 */
  (((__pyx_v_tprime[0])[0])[1]) = __Pyx_c_prod_double(__Pyx_c_neg_double(((__pyx_v_J[0])[1])), __pyx_v_divide2);

  /* "MOKE_polar.pyx":290
 *     (tprime[0])[0][0]=-J[1][1]*divide2
 *     (tprime[0])[0][1]=-J[0][1]*divide2
 *     (tprime[0])[1][0]=-J[1][0]*divide2             # <<<<<<<<<<<<<<
 *     (tprime[0])[1][1]=-J[0][0]*divide2
 * 
 */
  (((__pyx_v_tprime[0])[1])[0]) = __Pyx_c_prod_double(__Pyx_c_neg_double(((__pyx_v_J[1])[0])), __pyx_v_divide2);

  /* "MOKE_polar.pyx":291
 *     (tprime[0])[0][1]=-J[0][1]*divide2
 *     (tprime[0])[1][0]=-J[1][0]*divide2
 *     (tprime[0])[1][1]=-J[0][0]*divide2             # <<<<<<<<<<<<<<
 * 
 *     (rprime[0])[0][0]=J[0][2]*(tprime[0])[0][0]+J[0][3]*((tprime[0])[1][0])
 */
  (((__pyx_v_tprime[0])[1])[1]) = __Pyx_c_prod_double(__Pyx_c_neg_double(((__pyx_v_J[0])[0])), __pyx_v_divide2);

  /* "MOKE_polar.pyx":293
 *     (tprime[0])[1][1]=-J[0][0]*divide2
 * 
 *     (rprime[0])[0][0]=J[0][2]*(tprime[0])[0][0]+J[0][3]*((tprime[0])[1][0])             # <<<<<<<<<<<<<<
 *     (rprime[0])[0][1]=J[0][2]*((tprime[0])[0][1])+J[0][3]*((tprime[0])[1][1])
 *     (rprime[0])[1][0]=J[1][2]*((tprime[0])[0][0])+J[1][3]*((tprime[0])[1][0])
 */
  (((__pyx_v_rprime[0])[0])[0]) = __Pyx_c_sum_double(__Pyx_c_prod_double(((__pyx_v_J[0])[2]), (((__pyx_v_tprime[0])[0])[0])), __Pyx_c_prod_double(((__pyx_v_J[0])[3]), (((__pyx_v_tprime[0])[1])[0])));

  /* "MOKE_polar.pyx":294
 * 
 *     (rprime[0])[0][0]=J[0][2]*(tprime[0])[0][0]+J[0][3]*((tprime[0])[1][0])
 *     (rprime[0])[0][1]=J[0][2]*((tprime[0])[0][1])+J[0][3]*((tprime[0])[1][1])             # <<<<<<<<<<<<<<
 *     (rprime[0])[1][0]=J[1][2]*((tprime[0])[0][0])+J[1][3]*((tprime[0])[1][0])
 *     (rprime[0])[1][1]=J[1][2]*((tprime[0])[0][1])+J[1][3]*((tprime[0])[1][1])
 */
  (((__pyx_v_rprime[0])[0])[1]) = __Pyx_c_sum_double(__Pyx_c_prod_double(((__pyx_v_J[0])[2]), (((__pyx_v_tprime[0])[0])[1])), __Pyx_c_prod_double(((__pyx_v_J[0])[3]), (((__pyx_v_tprime[0])[1])[1])));

  /* "MOKE_polar.pyx":295
 *     (rprime[0])[0][0]=J[0][2]*(tprime[0])[0][0]+J[0][3]*((tprime[0])[1][0])
 *     (rprime[0])[0][1]=J[0][2]*((tprime[0])[0][1])+J[0][3]*((tprime[0])[1][1])
 *     (rprime[0])[1][0]=J[1][2]*((tprime[0])[0][0])+J[1][3]*((tprime[0])[1][0])             # <<<<<<<<<<<<<<
 *     (rprime[0])[1][1]=J[1][2]*((tprime[0])[0][1])+J[1][3]*((tprime[0])[1][1])
 * 
 */
  (((__pyx_v_rprime[0])[1])[0]) = __Pyx_c_sum_double(__Pyx_c_prod_double(((__pyx_v_J[1])[2]), (((__pyx_v_tprime[0])[0])[0])), __Pyx_c_prod_double(((__pyx_v_J[1])[3]), (((__pyx_v_tprime[0])[1])[0])));

  /* "MOKE_polar.pyx":296
 *     (rprime[0])[0][1]=J[0][2]*((tprime[0])[0][1])+J[0][3]*((tprime[0])[1][1])
 *     (rprime[0])[1][0]=J[1][2]*((tprime[0])[0][0])+J[1][3]*((tprime[0])[1][0])
 *     (rprime[0])[1][1]=J[1][2]*((tprime[0])[0][1])+J[1][3]*((tprime[0])[1][1])             # <<<<<<<<<<<<<<
 * 
 * cdef void Paratt_magnetic_z(Heterostructure* HS, double th, double wavelength, double complex (*rtot)[2][2]):
 */
  (((__pyx_v_rprime[0])[1])[1]) = __Pyx_c_sum_double(__Pyx_c_prod_double(((__pyx_v_J[1])[2]), (((__pyx_v_tprime[0])[0])[1])), __Pyx_c_prod_double(((__pyx_v_J[1])[3]), (((__pyx_v_tprime[0])[1])[1])));

  /* "MOKE_polar.pyx":60
 * 
 * 
 * cdef void Calculate_rt_z(rMemory *Mem1, rMemory *Mem2, double vy, double vyvy, double omvyvy, double complex chix1, double complex chiy1, double complex chiz1, double complex chig1, double complex chix2, double complex chiy2, double complex chiz2, double complex chig2, \             # <<<<<<<<<<<<<<
 *                     int IsMagnetic1, int IsMagnetic2, double complex (*r)[2][2], double complex (*rprime)[2][2], double complex (*t)[2][2], double complex (*tprime)[2][2], double sigma, double k0):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("MOKE_polar.Calculate_rt_z", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sumv11v12);
  __Pyx_RefNannyFinishContext();
}

/* "MOKE_polar.pyx":298
 *     (rprime[0])[1][1]=J[1][2]*((tprime[0])[0][1])+J[1][3]*((tprime[0])[1][1])
 * 
 * cdef void Paratt_magnetic_z(Heterostructure* HS, double th, double wavelength, double complex (*rtot)[2][2]):             # <<<<<<<<<<<<<<
 * 
 *     cdef double k0=6.283185307179586/wavelength
 */

static void __pyx_f_10MOKE_polar_Paratt_magnetic_z(struct __pyx_t_10Structural_Heterostructure *__pyx_v_HS, double __pyx_v_th, double __pyx_v_wavelength, __pyx_t_double_complex (*__pyx_v_rtot)[2][2]) {
  double __pyx_v_k0;
  CYTHON_UNUSED double __pyx_v_sintheta;
  double __pyx_v_vy;
  double __pyx_v_vyvy;
  double __pyx_v_omvyvy;
  int __pyx_v_NLAYERS;
  int *__pyx_v_MLLENGTH;
  int **__pyx_v_MLCOMP;
  int *__pyx_v_MLREP;
  struct __pyx_t_10Structural_CLayer *__pyx_v_LR;
  int __pyx_v_i;
  int __pyx_v_j;
  struct __pyx_t_10Structural_CLayer __pyx_v_UpperLayer;
  struct __pyx_t_10Structural_CLayer __pyx_v_LowerLayer;
  struct __pyx_t_10Structural_rMemory __pyx_v_Memory1;
  struct __pyx_t_10Structural_rMemory __pyx_v_Memory2;
  struct __pyx_t_10Structural_rMemory *__pyx_v_Mempointer1;
  struct __pyx_t_10Structural_rMemory *__pyx_v_Mempointer2;
  int __pyx_v_ML_is_diagonal;
  __pyx_t_double_complex __pyx_v_r[2][2];
  __pyx_t_double_complex __pyx_v_rprime[2][2];
  __pyx_t_double_complex __pyx_v_t[2][2];
  __pyx_t_double_complex __pyx_v_tprime[2][2];
  __pyx_t_double_complex __pyx_v_p[2][2];
  __pyx_t_double_complex __pyx_v_t_ML_in_1[2][2];
  __pyx_t_double_complex __pyx_v_t_ML_back_1[2][2];
  __pyx_t_double_complex __pyx_v_r_ML_in_1[2][2];
  __pyx_t_double_complex __pyx_v_r_ML_in_2[2][2];
  __pyx_t_double_complex __pyx_v_ev1;
  __pyx_t_double_complex __pyx_v_ev2;
  __pyx_t_double_complex __pyx_v_ev3;
  __pyx_t_double_complex __pyx_v_ev4;
  double __pyx_v_product;
  double __pyx_v_product2;
  double __pyx_v_absevmax1;
  double __pyx_v_absevmax2;
  double __pyx_v_normalizator;
  int __pyx_v_Cap;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int *__pyx_t_2;
  int **__pyx_t_3;
  struct __pyx_t_10Structural_CLayer *__pyx_t_4;
  int __pyx_t_5;
  __pyx_t_double_complex __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  __pyx_t_double_complex __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Paratt_magnetic_z", 0);

  /* "MOKE_polar.pyx":300
 * cdef void Paratt_magnetic_z(Heterostructure* HS, double th, double wavelength, double complex (*rtot)[2][2]):
 * 
 *     cdef double k0=6.283185307179586/wavelength             # <<<<<<<<<<<<<<
 *     cdef double sintheta=sin(two_pi_div_360()*th)
 * 
 */
  if (unlikely(__pyx_v_wavelength == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 300, __pyx_L1_error)
  }
  __pyx_v_k0 = (6.283185307179586 / __pyx_v_wavelength);

  /* "MOKE_polar.pyx":301
 * 
 *     cdef double k0=6.283185307179586/wavelength
 *     cdef double sintheta=sin(two_pi_div_360()*th)             # <<<<<<<<<<<<<<
 * 
 *     cdef double vy=cos(two_pi_div_360()*th)
 */
  __pyx_v_sintheta = sin((__pyx_f_35Mathematical_Functions_Reflectivity_two_pi_div_360() * __pyx_v_th));

  /* "MOKE_polar.pyx":303
 *     cdef double sintheta=sin(two_pi_div_360()*th)
 * 
 *     cdef double vy=cos(two_pi_div_360()*th)             # <<<<<<<<<<<<<<
 *     cdef double vyvy=quadr(vy)
 *     cdef double omvyvy=1-vyvy
 */
  __pyx_v_vy = cos((__pyx_f_35Mathematical_Functions_Reflectivity_two_pi_div_360() * __pyx_v_th));

  /* "MOKE_polar.pyx":304
 * 
 *     cdef double vy=cos(two_pi_div_360()*th)
 *     cdef double vyvy=quadr(vy)             # <<<<<<<<<<<<<<
 *     cdef double omvyvy=1-vyvy
 *     cdef int NLAYERS=(HS[0]).NLayers
 */
  __pyx_v_vyvy = __pyx_f_35Mathematical_Functions_Reflectivity_quadr(__pyx_v_vy);

  /* "MOKE_polar.pyx":305
 *     cdef double vy=cos(two_pi_div_360()*th)
 *     cdef double vyvy=quadr(vy)
 *     cdef double omvyvy=1-vyvy             # <<<<<<<<<<<<<<
 *     cdef int NLAYERS=(HS[0]).NLayers
 *     cdef int* MLLENGTH=(HS[0]).MLLENGTH
 */
  __pyx_v_omvyvy = (1.0 - __pyx_v_vyvy);

  /* "MOKE_polar.pyx":306
 *     cdef double vyvy=quadr(vy)
 *     cdef double omvyvy=1-vyvy
 *     cdef int NLAYERS=(HS[0]).NLayers             # <<<<<<<<<<<<<<
 *     cdef int* MLLENGTH=(HS[0]).MLLENGTH
 *     cdef int** MLCOMP=(HS[0]).MLCOMP
 */
  __pyx_t_1 = (__pyx_v_HS[0]).NLayers;
  __pyx_v_NLAYERS = __pyx_t_1;

  /* "MOKE_polar.pyx":307
 *     cdef double omvyvy=1-vyvy
 *     cdef int NLAYERS=(HS[0]).NLayers
 *     cdef int* MLLENGTH=(HS[0]).MLLENGTH             # <<<<<<<<<<<<<<
 *     cdef int** MLCOMP=(HS[0]).MLCOMP
 *     cdef int* MLREP=(HS[0]).MLREP
 */
  __pyx_t_2 = (__pyx_v_HS[0]).MLLENGTH;
  __pyx_v_MLLENGTH = __pyx_t_2;

  /* "MOKE_polar.pyx":308
 *     cdef int NLAYERS=(HS[0]).NLayers
 *     cdef int* MLLENGTH=(HS[0]).MLLENGTH
 *     cdef int** MLCOMP=(HS[0]).MLCOMP             # <<<<<<<<<<<<<<
 *     cdef int* MLREP=(HS[0]).MLREP
 *     cdef CLayer* LR=(HS[0]).LR
 */
  __pyx_t_3 = (__pyx_v_HS[0]).MLCOMP;
  __pyx_v_MLCOMP = __pyx_t_3;

  /* "MOKE_polar.pyx":309
 *     cdef int* MLLENGTH=(HS[0]).MLLENGTH
 *     cdef int** MLCOMP=(HS[0]).MLCOMP
 *     cdef int* MLREP=(HS[0]).MLREP             # <<<<<<<<<<<<<<
 *     cdef CLayer* LR=(HS[0]).LR
 *     cdef int i,j
 */
  __pyx_t_2 = (__pyx_v_HS[0]).MLREP;
  __pyx_v_MLREP = __pyx_t_2;

  /* "MOKE_polar.pyx":310
 *     cdef int** MLCOMP=(HS[0]).MLCOMP
 *     cdef int* MLREP=(HS[0]).MLREP
 *     cdef CLayer* LR=(HS[0]).LR             # <<<<<<<<<<<<<<
 *     cdef int i,j
 *     cdef CLayer UpperLayer, LowerLayer
 */
  __pyx_t_4 = (__pyx_v_HS[0]).LR;
  __pyx_v_LR = __pyx_t_4;

  /* "MOKE_polar.pyx":333
 *     cdef double normalizator
 * 
 *     p[0][1]=0             # <<<<<<<<<<<<<<
 *     p[1][0]=0
 *    # print "0"
 */
  ((__pyx_v_p[0])[1]) = __pyx_t_double_complex_from_parts(0, 0);

  /* "MOKE_polar.pyx":334
 * 
 *     p[0][1]=0
 *     p[1][0]=0             # <<<<<<<<<<<<<<
 *    # print "0"
 *   #  cdef double complex test=LR[MLCOMP[0][0]].ey
 */
  ((__pyx_v_p[1])[0]) = __pyx_t_double_complex_from_parts(0, 0);

  /* "MOKE_polar.pyx":338
 *   #  cdef double complex test=LR[MLCOMP[0][0]].ey
 * 
 *     cdef int Cap=NLAYERS-1             # <<<<<<<<<<<<<<
 * 
 *    # print "1"
 */
  __pyx_v_Cap = (__pyx_v_NLAYERS - 1);

  /* "MOKE_polar.pyx":341
 * 
 *    # print "1"
 *     LowerLayer=LR[MLCOMP[0][0]]             # <<<<<<<<<<<<<<
 * 
 *     if(LowerLayer.magdir):
 */
  __pyx_v_LowerLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[0])[0])]);

  /* "MOKE_polar.pyx":343
 *     LowerLayer=LR[MLCOMP[0][0]]
 * 
 *     if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 * 
 *         Fill_rMemory_z(&Memory1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)
 */
  __pyx_t_5 = (__pyx_v_LowerLayer.magdir != 0);
  if (__pyx_t_5) {

    /* "MOKE_polar.pyx":345
 *     if(LowerLayer.magdir):
 * 
 *         Fill_rMemory_z(&Memory1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)             # <<<<<<<<<<<<<<
 *     else:
 *         Memory1.epsy=1.0+LowerLayer.cy
 */
    __pyx_f_10MOKE_polar_Fill_rMemory_z((&__pyx_v_Memory1), __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg);

    /* "MOKE_polar.pyx":343
 *     LowerLayer=LR[MLCOMP[0][0]]
 * 
 *     if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 * 
 *         Fill_rMemory_z(&Memory1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)
 */
    goto __pyx_L3;
  }

  /* "MOKE_polar.pyx":347
 *         Fill_rMemory_z(&Memory1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)
 *     else:
 *         Memory1.epsy=1.0+LowerLayer.cy             # <<<<<<<<<<<<<<
 *         Memory1.epsz=1.0+LowerLayer.cz
 *         Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)
 */
  /*else*/ {
    __pyx_v_Memory1.epsy = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1.0, 0), __pyx_v_LowerLayer.cy);

    /* "MOKE_polar.pyx":348
 *     else:
 *         Memory1.epsy=1.0+LowerLayer.cy
 *         Memory1.epsz=1.0+LowerLayer.cz             # <<<<<<<<<<<<<<
 *         Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)
 *         Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)
 */
    __pyx_v_Memory1.epsz = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1.0, 0), __pyx_v_LowerLayer.cz);

    /* "MOKE_polar.pyx":349
 *         Memory1.epsy=1.0+LowerLayer.cy
 *         Memory1.epsz=1.0+LowerLayer.cz
 *         Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)             # <<<<<<<<<<<<<<
 *         Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)
 * 
 */
    __pyx_v_Memory1.vz1 = sqrt(__Pyx_c_diff_double(__Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_LowerLayer.cx), __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0)));

    /* "MOKE_polar.pyx":350
 *         Memory1.epsz=1.0+LowerLayer.cz
 *         Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)
 *         Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)             # <<<<<<<<<<<<<<
 * 
 *     if(NLAYERS==1):
 */
    __pyx_t_6 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_Memory1.epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 350, __pyx_L1_error)
    }
    __pyx_v_Memory1.vz2 = sqrt(__Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1., 0), __Pyx_c_quot_double(__pyx_t_6, __pyx_v_Memory1.epsz)), __pyx_v_Memory1.epsy));
  }
  __pyx_L3:;

  /* "MOKE_polar.pyx":352
 *         Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)
 * 
 *     if(NLAYERS==1):             # <<<<<<<<<<<<<<
 *         Calculate_rt_z(&Memory1, &Memory2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0, 0, 0, 0, \
 *                     LowerLayer.magdir, 0, rtot, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 */
  __pyx_t_5 = ((__pyx_v_NLAYERS == 1) != 0);
  if (__pyx_t_5) {

    /* "MOKE_polar.pyx":353
 * 
 *     if(NLAYERS==1):
 *         Calculate_rt_z(&Memory1, &Memory2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0, 0, 0, 0, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, 0, rtot, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *     else:
 */
    __pyx_f_10MOKE_polar_Calculate_rt_z((&__pyx_v_Memory1), (&__pyx_v_Memory2), __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_v_LowerLayer.magdir, 0, __pyx_v_rtot, (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

    /* "MOKE_polar.pyx":352
 *         Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)
 * 
 *     if(NLAYERS==1):             # <<<<<<<<<<<<<<
 *         Calculate_rt_z(&Memory1, &Memory2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0, 0, 0, 0, \
 *                     LowerLayer.magdir, 0, rtot, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 */
    goto __pyx_L4;
  }

  /* "MOKE_polar.pyx":357
 *     else:
 * 
 *         UpperLayer=LR[MLCOMP[1][0]]             # <<<<<<<<<<<<<<
 *         Calculate_rt_z(&Memory1, &Memory2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, rtot, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 */
  /*else*/ {
    __pyx_v_UpperLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[1])[0])]);

    /* "MOKE_polar.pyx":358
 * 
 *         UpperLayer=LR[MLCOMP[1][0]]
 *         Calculate_rt_z(&Memory1, &Memory2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, UpperLayer.magdir, rtot, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *         Memory1.IsFilled=0
 */
    __pyx_f_10MOKE_polar_Calculate_rt_z((&__pyx_v_Memory1), (&__pyx_v_Memory2), __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_v_UpperLayer.cx, __pyx_v_UpperLayer.cy, __pyx_v_UpperLayer.cz, __pyx_v_UpperLayer.cg, __pyx_v_LowerLayer.magdir, __pyx_v_UpperLayer.magdir, __pyx_v_rtot, (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

    /* "MOKE_polar.pyx":360
 *         Calculate_rt_z(&Memory1, &Memory2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, rtot, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *         Memory1.IsFilled=0             # <<<<<<<<<<<<<<
 *         p[0][0]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz1)
 *         p[1][1]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz2)
 */
    __pyx_v_Memory1.IsFilled = 0;

    /* "MOKE_polar.pyx":361
 *                     LowerLayer.magdir, UpperLayer.magdir, rtot, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *         Memory1.IsFilled=0
 *         p[0][0]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz1)             # <<<<<<<<<<<<<<
 *         p[1][1]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz2)
 *     i=1
 */
    ((__pyx_v_p[0])[0]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), __pyx_v_Memory2.vz1));

    /* "MOKE_polar.pyx":362
 *         Memory1.IsFilled=0
 *         p[0][0]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz1)
 *         p[1][1]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz2)             # <<<<<<<<<<<<<<
 *     i=1
 *     while i<NLAYERS:
 */
    ((__pyx_v_p[1])[1]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), __pyx_v_Memory2.vz2));
  }
  __pyx_L4:;

  /* "MOKE_polar.pyx":363
 *         p[0][0]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz1)
 *         p[1][1]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz2)
 *     i=1             # <<<<<<<<<<<<<<
 *     while i<NLAYERS:
 *        # print "loop start", i
 */
  __pyx_v_i = 1;

  /* "MOKE_polar.pyx":364
 *         p[1][1]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz2)
 *     i=1
 *     while i<NLAYERS:             # <<<<<<<<<<<<<<
 *        # print "loop start", i
 *         if(MLLENGTH[i]==1):
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_i < __pyx_v_NLAYERS) != 0);
    if (!__pyx_t_5) break;

    /* "MOKE_polar.pyx":366
 *     while i<NLAYERS:
 *        # print "loop start", i
 *         if(MLLENGTH[i]==1):             # <<<<<<<<<<<<<<
 * 
 *             #Check which Memory to use:
 */
    __pyx_t_5 = (((__pyx_v_MLLENGTH[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_5) {

      /* "MOKE_polar.pyx":369
 * 
 *             #Check which Memory to use:
 *             if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                 Mempointer1=&Memory1
 *                 Mempointer2=&Memory2
 */
      __pyx_t_5 = (__pyx_v_Memory1.IsFilled != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":370
 *             #Check which Memory to use:
 *             if(Memory1.IsFilled):
 *                 Mempointer1=&Memory1             # <<<<<<<<<<<<<<
 *                 Mempointer2=&Memory2
 *             else:
 */
        __pyx_v_Mempointer1 = (&__pyx_v_Memory1);

        /* "MOKE_polar.pyx":371
 *             if(Memory1.IsFilled):
 *                 Mempointer1=&Memory1
 *                 Mempointer2=&Memory2             # <<<<<<<<<<<<<<
 *             else:
 *                 Mempointer2=&Memory1
 */
        __pyx_v_Mempointer2 = (&__pyx_v_Memory2);

        /* "MOKE_polar.pyx":369
 * 
 *             #Check which Memory to use:
 *             if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                 Mempointer1=&Memory1
 *                 Mempointer2=&Memory2
 */
        goto __pyx_L8;
      }

      /* "MOKE_polar.pyx":373
 *                 Mempointer2=&Memory2
 *             else:
 *                 Mempointer2=&Memory1             # <<<<<<<<<<<<<<
 *                 Mempointer1=&Memory2
 *             LowerLayer=LR[MLCOMP[i][0]]
 */
      /*else*/ {
        __pyx_v_Mempointer2 = (&__pyx_v_Memory1);

        /* "MOKE_polar.pyx":374
 *             else:
 *                 Mempointer2=&Memory1
 *                 Mempointer1=&Memory2             # <<<<<<<<<<<<<<
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             if(i!=Cap):
 */
        __pyx_v_Mempointer1 = (&__pyx_v_Memory2);
      }
      __pyx_L8:;

      /* "MOKE_polar.pyx":375
 *                 Mempointer2=&Memory1
 *                 Mempointer1=&Memory2
 *             LowerLayer=LR[MLCOMP[i][0]]             # <<<<<<<<<<<<<<
 *             if(i!=Cap):
 *                 #Upper=MLCOMP[i+1][0]
 */
      __pyx_v_LowerLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[0])]);

      /* "MOKE_polar.pyx":376
 *                 Mempointer1=&Memory2
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             if(i!=Cap):             # <<<<<<<<<<<<<<
 *                 #Upper=MLCOMP[i+1][0]
 *                 UpperLayer=LR[MLCOMP[i+1][0]]
 */
      __pyx_t_5 = ((__pyx_v_i != __pyx_v_Cap) != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":378
 *             if(i!=Cap):
 *                 #Upper=MLCOMP[i+1][0]
 *                 UpperLayer=LR[MLCOMP[i+1][0]]             # <<<<<<<<<<<<<<
 *                # print "i, Upper", i, Upper
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 */
        __pyx_v_UpperLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[(__pyx_v_i + 1)])[0])]);

        /* "MOKE_polar.pyx":380
 *                 UpperLayer=LR[MLCOMP[i+1][0]]
 *                # print "i, Upper", i, Upper
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0
 */
        __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_v_UpperLayer.cx, __pyx_v_UpperLayer.cy, __pyx_v_UpperLayer.cz, __pyx_v_UpperLayer.cg, __pyx_v_LowerLayer.magdir, __pyx_v_UpperLayer.magdir, (&__pyx_v_r), (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

        /* "MOKE_polar.pyx":382
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0             # <<<<<<<<<<<<<<
 *             else:
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0,0,0,0, \
 */
        (__pyx_v_Mempointer1[0]).IsFilled = 0;

        /* "MOKE_polar.pyx":376
 *                 Mempointer1=&Memory2
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             if(i!=Cap):             # <<<<<<<<<<<<<<
 *                 #Upper=MLCOMP[i+1][0]
 *                 UpperLayer=LR[MLCOMP[i+1][0]]
 */
        goto __pyx_L9;
      }

      /* "MOKE_polar.pyx":384
 *                 (Mempointer1[0]).IsFilled=0
 *             else:
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0,0,0,0, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, 0, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 * 
 */
      /*else*/ {

        /* "MOKE_polar.pyx":385
 *             else:
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0,0,0,0, \
 *                     LowerLayer.magdir, 0, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_v_LowerLayer.magdir, 0, (&__pyx_v_r), (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);
      }
      __pyx_L9:;

      /* "MOKE_polar.pyx":388
 * 
 * 
 *             Mult2x2_rightside(&p, rtot)             # <<<<<<<<<<<<<<
 * 
 *             Mult2x2_leftside(rtot, &p)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), __pyx_v_rtot);

      /* "MOKE_polar.pyx":390
 *             Mult2x2_rightside(&p, rtot)
 * 
 *             Mult2x2_leftside(rtot, &p)             # <<<<<<<<<<<<<<
 * 
 *             Mult2x2_rightside(&tprime, rtot)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_p));

      /* "MOKE_polar.pyx":392
 *             Mult2x2_leftside(rtot, &p)
 * 
 *             Mult2x2_rightside(&tprime, rtot)             # <<<<<<<<<<<<<<
 * 
 *             Mult2x2_leftside(rtot, &t)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_tprime), __pyx_v_rtot);

      /* "MOKE_polar.pyx":394
 *             Mult2x2_rightside(&tprime, rtot)
 * 
 *             Mult2x2_leftside(rtot, &t)             # <<<<<<<<<<<<<<
 * 
 *             (rtot[0])[0][0]+=r[0][0]
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_t));

      /* "MOKE_polar.pyx":396
 *             Mult2x2_leftside(rtot, &t)
 * 
 *             (rtot[0])[0][0]+=r[0][0]             # <<<<<<<<<<<<<<
 *             (rtot[0])[1][0]+=r[1][0]
 *             (rtot[0])[0][1]+=r[0][1]
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[0])[0]));

      /* "MOKE_polar.pyx":397
 * 
 *             (rtot[0])[0][0]+=r[0][0]
 *             (rtot[0])[1][0]+=r[1][0]             # <<<<<<<<<<<<<<
 *             (rtot[0])[0][1]+=r[0][1]
 *             (rtot[0])[1][1]+=r[1][1]
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 1;
      __pyx_t_9 = 0;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[1])[0]));

      /* "MOKE_polar.pyx":398
 *             (rtot[0])[0][0]+=r[0][0]
 *             (rtot[0])[1][0]+=r[1][0]
 *             (rtot[0])[0][1]+=r[0][1]             # <<<<<<<<<<<<<<
 *             (rtot[0])[1][1]+=r[1][1]
 * 
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 1;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[0])[1]));

      /* "MOKE_polar.pyx":399
 *             (rtot[0])[1][0]+=r[1][0]
 *             (rtot[0])[0][1]+=r[0][1]
 *             (rtot[0])[1][1]+=r[1][1]             # <<<<<<<<<<<<<<
 * 
 *             if(i!=Cap):
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 1;
      __pyx_t_9 = 1;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[1])[1]));

      /* "MOKE_polar.pyx":401
 *             (rtot[0])[1][1]+=r[1][1]
 * 
 *             if(i!=Cap):             # <<<<<<<<<<<<<<
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 */
      __pyx_t_5 = ((__pyx_v_i != __pyx_v_Cap) != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":402
 * 
 *             if(i!=Cap):
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)             # <<<<<<<<<<<<<<
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 * 
 */
        ((__pyx_v_p[0])[0]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz1));

        /* "MOKE_polar.pyx":403
 *             if(i!=Cap):
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        ((__pyx_v_p[1])[1]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz2));

        /* "MOKE_polar.pyx":401
 *             (rtot[0])[1][1]+=r[1][1]
 * 
 *             if(i!=Cap):             # <<<<<<<<<<<<<<
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 */
      }

      /* "MOKE_polar.pyx":366
 *     while i<NLAYERS:
 *        # print "loop start", i
 *         if(MLLENGTH[i]==1):             # <<<<<<<<<<<<<<
 * 
 *             #Check which Memory to use:
 */
      goto __pyx_L7;
    }

    /* "MOKE_polar.pyx":410
 *         else: #A Multilayer
 * 
 *             LowerLayer=LR[MLCOMP[i][0]]             # <<<<<<<<<<<<<<
 *             UpperLayer=LR[MLCOMP[i][1]]
 *             if(Memory1.IsFilled):
 */
    /*else*/ {
      __pyx_v_LowerLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[0])]);

      /* "MOKE_polar.pyx":411
 * 
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             UpperLayer=LR[MLCOMP[i][1]]             # <<<<<<<<<<<<<<
 *             if(Memory1.IsFilled):
 *                 Mempointer1=&Memory1
 */
      __pyx_v_UpperLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[1])]);

      /* "MOKE_polar.pyx":412
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             UpperLayer=LR[MLCOMP[i][1]]
 *             if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                 Mempointer1=&Memory1
 *                 Mempointer2=&Memory2
 */
      __pyx_t_5 = (__pyx_v_Memory1.IsFilled != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":413
 *             UpperLayer=LR[MLCOMP[i][1]]
 *             if(Memory1.IsFilled):
 *                 Mempointer1=&Memory1             # <<<<<<<<<<<<<<
 *                 Mempointer2=&Memory2
 *             else:
 */
        __pyx_v_Mempointer1 = (&__pyx_v_Memory1);

        /* "MOKE_polar.pyx":414
 *             if(Memory1.IsFilled):
 *                 Mempointer1=&Memory1
 *                 Mempointer2=&Memory2             # <<<<<<<<<<<<<<
 *             else:
 *                 Mempointer2=&Memory1
 */
        __pyx_v_Mempointer2 = (&__pyx_v_Memory2);

        /* "MOKE_polar.pyx":412
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             UpperLayer=LR[MLCOMP[i][1]]
 *             if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                 Mempointer1=&Memory1
 *                 Mempointer2=&Memory2
 */
        goto __pyx_L11;
      }

      /* "MOKE_polar.pyx":416
 *                 Mempointer2=&Memory2
 *             else:
 *                 Mempointer2=&Memory1             # <<<<<<<<<<<<<<
 *                 Mempointer1=&Memory2
 * 
 */
      /*else*/ {
        __pyx_v_Mempointer2 = (&__pyx_v_Memory1);

        /* "MOKE_polar.pyx":417
 *             else:
 *                 Mempointer2=&Memory1
 *                 Mempointer1=&Memory2             # <<<<<<<<<<<<<<
 * 
 *             Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 */
        __pyx_v_Mempointer1 = (&__pyx_v_Memory2);
      }
      __pyx_L11:;

      /* "MOKE_polar.pyx":419
 *                 Mempointer1=&Memory2
 * 
 *             Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, UpperLayer.magdir, &r_ML_in_1, &rprime, &t_ML_in_1, &t_ML_back_1, LowerLayer.Roughness, k0)
 *             (Mempointer1[0]).IsFilled=0
 */
      __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_v_UpperLayer.cx, __pyx_v_UpperLayer.cy, __pyx_v_UpperLayer.cz, __pyx_v_UpperLayer.cg, __pyx_v_LowerLayer.magdir, __pyx_v_UpperLayer.magdir, (&__pyx_v_r_ML_in_1), (&__pyx_v_rprime), (&__pyx_v_t_ML_in_1), (&__pyx_v_t_ML_back_1), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

      /* "MOKE_polar.pyx":421
 *             Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, &r_ML_in_1, &rprime, &t_ML_in_1, &t_ML_back_1, LowerLayer.Roughness, k0)
 *             (Mempointer1[0]).IsFilled=0             # <<<<<<<<<<<<<<
 *             if(LowerLayer.magdir):
 *                 ML_is_diagonal=0
 */
      (__pyx_v_Mempointer1[0]).IsFilled = 0;

      /* "MOKE_polar.pyx":422
 *                     LowerLayer.magdir, UpperLayer.magdir, &r_ML_in_1, &rprime, &t_ML_in_1, &t_ML_back_1, LowerLayer.Roughness, k0)
 *             (Mempointer1[0]).IsFilled=0
 *             if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 *                 ML_is_diagonal=0
 * 
 */
      __pyx_t_5 = (__pyx_v_LowerLayer.magdir != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":423
 *             (Mempointer1[0]).IsFilled=0
 *             if(LowerLayer.magdir):
 *                 ML_is_diagonal=0             # <<<<<<<<<<<<<<
 * 
 *             Mult2x2_leftside(&t_ML_back_1, &p) # t'(AB)*p(A)
 */
        __pyx_v_ML_is_diagonal = 0;

        /* "MOKE_polar.pyx":422
 *                     LowerLayer.magdir, UpperLayer.magdir, &r_ML_in_1, &rprime, &t_ML_in_1, &t_ML_back_1, LowerLayer.Roughness, k0)
 *             (Mempointer1[0]).IsFilled=0
 *             if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 *                 ML_is_diagonal=0
 * 
 */
      }

      /* "MOKE_polar.pyx":425
 *                 ML_is_diagonal=0
 * 
 *             Mult2x2_leftside(&t_ML_back_1, &p) # t'(AB)*p(A)             # <<<<<<<<<<<<<<
 *             Mult2x2_rightside(&p, &t_ML_in_1) # p(A) * t(AB)
 * 
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_t_ML_back_1), (&__pyx_v_p));

      /* "MOKE_polar.pyx":426
 * 
 *             Mult2x2_leftside(&t_ML_back_1, &p) # t'(AB)*p(A)
 *             Mult2x2_rightside(&p, &t_ML_in_1) # p(A) * t(AB)             # <<<<<<<<<<<<<<
 * 
 *             p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), (&__pyx_v_t_ML_in_1));

      /* "MOKE_polar.pyx":428
 *             Mult2x2_rightside(&p, &t_ML_in_1) # p(A) * t(AB)
 * 
 *             p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)             # <<<<<<<<<<<<<<
 *             p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 * 
 */
      ((__pyx_v_p[0])[0]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz1));

      /* "MOKE_polar.pyx":429
 * 
 *             p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *             p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)             # <<<<<<<<<<<<<<
 * 
 *             j=1
 */
      ((__pyx_v_p[1])[1]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz2));

      /* "MOKE_polar.pyx":431
 *             p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 * 
 *             j=1             # <<<<<<<<<<<<<<
 *             while j<MLLENGTH[i]:
 *                # Upper=MLCOMP[i][(j+1)%MLLENGTH[i]]
 */
      __pyx_v_j = 1;

      /* "MOKE_polar.pyx":432
 * 
 *             j=1
 *             while j<MLLENGTH[i]:             # <<<<<<<<<<<<<<
 *                # Upper=MLCOMP[i][(j+1)%MLLENGTH[i]]
 * 
 */
      while (1) {
        __pyx_t_5 = ((__pyx_v_j < (__pyx_v_MLLENGTH[__pyx_v_i])) != 0);
        if (!__pyx_t_5) break;

        /* "MOKE_polar.pyx":435
 *                # Upper=MLCOMP[i][(j+1)%MLLENGTH[i]]
 * 
 *                 UpperLayer=LR[ MLCOMP[i][(j+1)%MLLENGTH[i]] ]             # <<<<<<<<<<<<<<
 *                 LowerLayer=LR[ MLCOMP[i][j] ]
 *                 if(LowerLayer.magdir):
 */
        __pyx_t_7 = (__pyx_v_j + 1);
        if (unlikely((__pyx_v_MLLENGTH[__pyx_v_i]) == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(0, 435, __pyx_L1_error)
        }
        __pyx_v_UpperLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[__Pyx_mod_long(__pyx_t_7, (__pyx_v_MLLENGTH[__pyx_v_i]))])]);

        /* "MOKE_polar.pyx":436
 * 
 *                 UpperLayer=LR[ MLCOMP[i][(j+1)%MLLENGTH[i]] ]
 *                 LowerLayer=LR[ MLCOMP[i][j] ]             # <<<<<<<<<<<<<<
 *                 if(LowerLayer.magdir):
 *                     ML_is_diagonal=0
 */
        __pyx_v_LowerLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[__pyx_v_j])]);

        /* "MOKE_polar.pyx":437
 *                 UpperLayer=LR[ MLCOMP[i][(j+1)%MLLENGTH[i]] ]
 *                 LowerLayer=LR[ MLCOMP[i][j] ]
 *                 if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 *                     ML_is_diagonal=0
 *                 if(Memory1.IsFilled):
 */
        __pyx_t_5 = (__pyx_v_LowerLayer.magdir != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":438
 *                 LowerLayer=LR[ MLCOMP[i][j] ]
 *                 if(LowerLayer.magdir):
 *                     ML_is_diagonal=0             # <<<<<<<<<<<<<<
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 */
          __pyx_v_ML_is_diagonal = 0;

          /* "MOKE_polar.pyx":437
 *                 UpperLayer=LR[ MLCOMP[i][(j+1)%MLLENGTH[i]] ]
 *                 LowerLayer=LR[ MLCOMP[i][j] ]
 *                 if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 *                     ML_is_diagonal=0
 *                 if(Memory1.IsFilled):
 */
        }

        /* "MOKE_polar.pyx":439
 *                 if(LowerLayer.magdir):
 *                     ML_is_diagonal=0
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
        __pyx_t_5 = (__pyx_v_Memory1.IsFilled != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":440
 *                     ML_is_diagonal=0
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer2=&Memory2
 *                 else:
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":441
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2             # <<<<<<<<<<<<<<
 *                 else:
 *                     Mempointer2=&Memory1
 */
          __pyx_v_Mempointer2 = (&__pyx_v_Memory2);

          /* "MOKE_polar.pyx":439
 *                 if(LowerLayer.magdir):
 *                     ML_is_diagonal=0
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
          goto __pyx_L16;
        }

        /* "MOKE_polar.pyx":443
 *                     Mempointer2=&Memory2
 *                 else:
 *                     Mempointer2=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory2
 * 
 */
        /*else*/ {
          __pyx_v_Mempointer2 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":444
 *                 else:
 *                     Mempointer2=&Memory1
 *                     Mempointer1=&Memory2             # <<<<<<<<<<<<<<
 * 
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory2);
        }
        __pyx_L16:;

        /* "MOKE_polar.pyx":446
 *                     Mempointer1=&Memory2
 * 
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0
 */
        __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_v_UpperLayer.cx, __pyx_v_UpperLayer.cy, __pyx_v_UpperLayer.cz, __pyx_v_UpperLayer.cg, __pyx_v_LowerLayer.magdir, __pyx_v_UpperLayer.magdir, (&__pyx_v_r), (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

        /* "MOKE_polar.pyx":448
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0             # <<<<<<<<<<<<<<
 * 
 *                 Mult2x2_rightside(&p, &r_ML_in_1) #p_B r p_B and so on
 */
        (__pyx_v_Mempointer1[0]).IsFilled = 0;

        /* "MOKE_polar.pyx":450
 *                 (Mempointer1[0]).IsFilled=0
 * 
 *                 Mult2x2_rightside(&p, &r_ML_in_1) #p_B r p_B and so on             # <<<<<<<<<<<<<<
 * 
 *                 Mult2x2_leftside(&r_ML_in_1, &p)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), (&__pyx_v_r_ML_in_1));

        /* "MOKE_polar.pyx":452
 *                 Mult2x2_rightside(&p, &r_ML_in_1) #p_B r p_B and so on
 * 
 *                 Mult2x2_leftside(&r_ML_in_1, &p)             # <<<<<<<<<<<<<<
 * 
 *                 Mult2x2_rightside(&tprime, &r_ML_in_1) #t' p_B r p_b t and so on
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_r_ML_in_1), (&__pyx_v_p));

        /* "MOKE_polar.pyx":454
 *                 Mult2x2_leftside(&r_ML_in_1, &p)
 * 
 *                 Mult2x2_rightside(&tprime, &r_ML_in_1) #t' p_B r p_b t and so on             # <<<<<<<<<<<<<<
 * 
 *                 Mult2x2_leftside(&r_ML_in_1, &t)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_tprime), (&__pyx_v_r_ML_in_1));

        /* "MOKE_polar.pyx":456
 *                 Mult2x2_rightside(&tprime, &r_ML_in_1) #t' p_B r p_b t and so on
 * 
 *                 Mult2x2_leftside(&r_ML_in_1, &t)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_r_ML_in_1), (&__pyx_v_t));

        /* "MOKE_polar.pyx":459
 * 
 * 
 *                 r_ML_in_1[0][0]+=r[0][0]             # <<<<<<<<<<<<<<
 *                 r_ML_in_1[1][0]+=r[1][0]
 *                 r_ML_in_1[0][1]+=r[0][1]
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        ((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_sum_double(((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_r[0])[0]));

        /* "MOKE_polar.pyx":460
 * 
 *                 r_ML_in_1[0][0]+=r[0][0]
 *                 r_ML_in_1[1][0]+=r[1][0]             # <<<<<<<<<<<<<<
 *                 r_ML_in_1[0][1]+=r[0][1]
 *                 r_ML_in_1[1][1]+=r[1][1]
 */
        __pyx_t_7 = 1;
        __pyx_t_8 = 0;
        ((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_sum_double(((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_r[1])[0]));

        /* "MOKE_polar.pyx":461
 *                 r_ML_in_1[0][0]+=r[0][0]
 *                 r_ML_in_1[1][0]+=r[1][0]
 *                 r_ML_in_1[0][1]+=r[0][1]             # <<<<<<<<<<<<<<
 *                 r_ML_in_1[1][1]+=r[1][1]
 * 
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 1;
        ((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_sum_double(((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_r[0])[1]));

        /* "MOKE_polar.pyx":462
 *                 r_ML_in_1[1][0]+=r[1][0]
 *                 r_ML_in_1[0][1]+=r[0][1]
 *                 r_ML_in_1[1][1]+=r[1][1]             # <<<<<<<<<<<<<<
 * 
 *                 Mult2x2_leftside(&t_ML_in_1, &p)
 */
        __pyx_t_7 = 1;
        __pyx_t_8 = 1;
        ((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_sum_double(((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_r[1])[1]));

        /* "MOKE_polar.pyx":464
 *                 r_ML_in_1[1][1]+=r[1][1]
 * 
 *                 Mult2x2_leftside(&t_ML_in_1, &p)             # <<<<<<<<<<<<<<
 *                 Mult2x2_rightside(&p, &t_ML_back_1)
 * 
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_t_ML_in_1), (&__pyx_v_p));

        /* "MOKE_polar.pyx":465
 * 
 *                 Mult2x2_leftside(&t_ML_in_1, &p)
 *                 Mult2x2_rightside(&p, &t_ML_back_1)             # <<<<<<<<<<<<<<
 * 
 *                 Mult2x2_leftside(&t_ML_in_1, &t) # p(A) * t(AB) p_B t(BC) and so on
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), (&__pyx_v_t_ML_back_1));

        /* "MOKE_polar.pyx":467
 *                 Mult2x2_rightside(&p, &t_ML_back_1)
 * 
 *                 Mult2x2_leftside(&t_ML_in_1, &t) # p(A) * t(AB) p_B t(BC) and so on             # <<<<<<<<<<<<<<
 *                 Mult2x2_rightside(&tprime, &t_ML_back_1)# t'(BC) p_B t'(AB)*p(A) and so on
 * 
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_t_ML_in_1), (&__pyx_v_t));

        /* "MOKE_polar.pyx":468
 * 
 *                 Mult2x2_leftside(&t_ML_in_1, &t) # p(A) * t(AB) p_B t(BC) and so on
 *                 Mult2x2_rightside(&tprime, &t_ML_back_1)# t'(BC) p_B t'(AB)*p(A) and so on             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_tprime), (&__pyx_v_t_ML_back_1));

        /* "MOKE_polar.pyx":471
 * 
 * 
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)             # <<<<<<<<<<<<<<
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 *            #     if(j==1):
 */
        ((__pyx_v_p[0])[0]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz1));

        /* "MOKE_polar.pyx":472
 * 
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)             # <<<<<<<<<<<<<<
 *            #     if(j==1):
 *             #        print "p C components"
 */
        ((__pyx_v_p[1])[1]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz2));

        /* "MOKE_polar.pyx":477
 *             #        print Upper, LR[Upper].Thickness, vz3, vz4
 * 
 *                 j=j+1             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_v_j = (__pyx_v_j + 1);
      }

      /* "MOKE_polar.pyx":481
 * 
 * 
 *             if(ML_is_diagonal):             # <<<<<<<<<<<<<<
 *                 r_ML_in_2[0][0]=r_ML_in_1[0][0]*(1-ipow(t_ML_in_1[0][0]*t_ML_back_1[0][0], MLREP[i]-1))/(1-t_ML_in_1[0][0]*t_ML_back_1[0][0])
 *                 r_ML_in_2[1][1]=r_ML_in_1[1][1]*(1-ipow(t_ML_in_1[1][1]*t_ML_back_1[1][1], MLREP[i]-1))/(1-t_ML_in_1[1][1]*t_ML_back_1[1][1])
 */
      __pyx_t_5 = (__pyx_v_ML_is_diagonal != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":482
 * 
 *             if(ML_is_diagonal):
 *                 r_ML_in_2[0][0]=r_ML_in_1[0][0]*(1-ipow(t_ML_in_1[0][0]*t_ML_back_1[0][0], MLREP[i]-1))/(1-t_ML_in_1[0][0]*t_ML_back_1[0][0])             # <<<<<<<<<<<<<<
 *                 r_ML_in_2[1][1]=r_ML_in_1[1][1]*(1-ipow(t_ML_in_1[1][1]*t_ML_back_1[1][1], MLREP[i]-1))/(1-t_ML_in_1[1][1]*t_ML_back_1[1][1])
 * 
 */
        __pyx_t_6 = __Pyx_c_prod_double(((__pyx_v_r_ML_in_1[0])[0]), __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __pyx_f_35Mathematical_Functions_Reflectivity_ipow(__Pyx_c_prod_double(((__pyx_v_t_ML_in_1[0])[0]), ((__pyx_v_t_ML_back_1[0])[0])), ((__pyx_v_MLREP[__pyx_v_i]) - 1))));
        __pyx_t_10 = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_prod_double(((__pyx_v_t_ML_in_1[0])[0]), ((__pyx_v_t_ML_back_1[0])[0])));
        if (unlikely(__Pyx_c_is_zero_double(__pyx_t_10))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 482, __pyx_L1_error)
        }
        ((__pyx_v_r_ML_in_2[0])[0]) = __Pyx_c_quot_double(__pyx_t_6, __pyx_t_10);

        /* "MOKE_polar.pyx":483
 *             if(ML_is_diagonal):
 *                 r_ML_in_2[0][0]=r_ML_in_1[0][0]*(1-ipow(t_ML_in_1[0][0]*t_ML_back_1[0][0], MLREP[i]-1))/(1-t_ML_in_1[0][0]*t_ML_back_1[0][0])
 *                 r_ML_in_2[1][1]=r_ML_in_1[1][1]*(1-ipow(t_ML_in_1[1][1]*t_ML_back_1[1][1], MLREP[i]-1))/(1-t_ML_in_1[1][1]*t_ML_back_1[1][1])             # <<<<<<<<<<<<<<
 * 
 *                 product=cabsvalue(( t_ML_in_1[0][0]*t_ML_back_1[0][0] ) )
 */
        __pyx_t_10 = __Pyx_c_prod_double(((__pyx_v_r_ML_in_1[1])[1]), __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __pyx_f_35Mathematical_Functions_Reflectivity_ipow(__Pyx_c_prod_double(((__pyx_v_t_ML_in_1[1])[1]), ((__pyx_v_t_ML_back_1[1])[1])), ((__pyx_v_MLREP[__pyx_v_i]) - 1))));
        __pyx_t_6 = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_prod_double(((__pyx_v_t_ML_in_1[1])[1]), ((__pyx_v_t_ML_back_1[1])[1])));
        if (unlikely(__Pyx_c_is_zero_double(__pyx_t_6))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 483, __pyx_L1_error)
        }
        ((__pyx_v_r_ML_in_2[1])[1]) = __Pyx_c_quot_double(__pyx_t_10, __pyx_t_6);

        /* "MOKE_polar.pyx":485
 *                 r_ML_in_2[1][1]=r_ML_in_1[1][1]*(1-ipow(t_ML_in_1[1][1]*t_ML_back_1[1][1], MLREP[i]-1))/(1-t_ML_in_1[1][1]*t_ML_back_1[1][1])
 * 
 *                 product=cabsvalue(( t_ML_in_1[0][0]*t_ML_back_1[0][0] ) )             # <<<<<<<<<<<<<<
 *                 normalizator=0.5*(1.+product)
 *                 product=normalizator/cabsvalue(( t_ML_in_1[0][0] ) )
 */
        __pyx_v_product = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__Pyx_c_prod_double(((__pyx_v_t_ML_in_1[0])[0]), ((__pyx_v_t_ML_back_1[0])[0])));

        /* "MOKE_polar.pyx":486
 * 
 *                 product=cabsvalue(( t_ML_in_1[0][0]*t_ML_back_1[0][0] ) )
 *                 normalizator=0.5*(1.+product)             # <<<<<<<<<<<<<<
 *                 product=normalizator/cabsvalue(( t_ML_in_1[0][0] ) )
 * 
 */
        __pyx_v_normalizator = (0.5 * (1. + __pyx_v_product));

        /* "MOKE_polar.pyx":487
 *                 product=cabsvalue(( t_ML_in_1[0][0]*t_ML_back_1[0][0] ) )
 *                 normalizator=0.5*(1.+product)
 *                 product=normalizator/cabsvalue(( t_ML_in_1[0][0] ) )             # <<<<<<<<<<<<<<
 * 
 *                 t_ML_in_1[0][0]*=product
 */
        __pyx_t_11 = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(((__pyx_v_t_ML_in_1[0])[0]));
        if (unlikely(__pyx_t_11 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 487, __pyx_L1_error)
        }
        __pyx_v_product = (__pyx_v_normalizator / __pyx_t_11);

        /* "MOKE_polar.pyx":489
 *                 product=normalizator/cabsvalue(( t_ML_in_1[0][0] ) )
 * 
 *                 t_ML_in_1[0][0]*=product             # <<<<<<<<<<<<<<
 *                 t_ML_back_1[0][0]/=product
 * 
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        ((__pyx_v_t_ML_in_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_prod_double(((__pyx_v_t_ML_in_1[__pyx_t_7])[__pyx_t_8]), __pyx_t_double_complex_from_parts(__pyx_v_product, 0));

        /* "MOKE_polar.pyx":490
 * 
 *                 t_ML_in_1[0][0]*=product
 *                 t_ML_back_1[0][0]/=product             # <<<<<<<<<<<<<<
 * 
 *                 product=cabsvalue(( t_ML_in_1[1][1]*t_ML_back_1[1][1] ) )
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        __pyx_t_6 = __pyx_t_double_complex_from_parts(__pyx_v_product, 0);
        if (unlikely(__Pyx_c_is_zero_double(__pyx_t_6))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 490, __pyx_L1_error)
        }
        ((__pyx_v_t_ML_back_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_quot_double(((__pyx_v_t_ML_back_1[__pyx_t_7])[__pyx_t_8]), __pyx_t_6);

        /* "MOKE_polar.pyx":492
 *                 t_ML_back_1[0][0]/=product
 * 
 *                 product=cabsvalue(( t_ML_in_1[1][1]*t_ML_back_1[1][1] ) )             # <<<<<<<<<<<<<<
 *                 normalizator=0.5*(1.+product)
 *                 product=normalizator/cabsvalue(( t_ML_in_1[1][1] ) )
 */
        __pyx_v_product = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__Pyx_c_prod_double(((__pyx_v_t_ML_in_1[1])[1]), ((__pyx_v_t_ML_back_1[1])[1])));

        /* "MOKE_polar.pyx":493
 * 
 *                 product=cabsvalue(( t_ML_in_1[1][1]*t_ML_back_1[1][1] ) )
 *                 normalizator=0.5*(1.+product)             # <<<<<<<<<<<<<<
 *                 product=normalizator/cabsvalue(( t_ML_in_1[1][1] ) )
 * 
 */
        __pyx_v_normalizator = (0.5 * (1. + __pyx_v_product));

        /* "MOKE_polar.pyx":494
 *                 product=cabsvalue(( t_ML_in_1[1][1]*t_ML_back_1[1][1] ) )
 *                 normalizator=0.5*(1.+product)
 *                 product=normalizator/cabsvalue(( t_ML_in_1[1][1] ) )             # <<<<<<<<<<<<<<
 * 
 *                 t_ML_in_1[1][1]*=product
 */
        __pyx_t_11 = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(((__pyx_v_t_ML_in_1[1])[1]));
        if (unlikely(__pyx_t_11 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 494, __pyx_L1_error)
        }
        __pyx_v_product = (__pyx_v_normalizator / __pyx_t_11);

        /* "MOKE_polar.pyx":496
 *                 product=normalizator/cabsvalue(( t_ML_in_1[1][1] ) )
 * 
 *                 t_ML_in_1[1][1]*=product             # <<<<<<<<<<<<<<
 *                 t_ML_back_1[1][1]/=product
 * 
 */
        __pyx_t_7 = 1;
        __pyx_t_8 = 1;
        ((__pyx_v_t_ML_in_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_prod_double(((__pyx_v_t_ML_in_1[__pyx_t_7])[__pyx_t_8]), __pyx_t_double_complex_from_parts(__pyx_v_product, 0));

        /* "MOKE_polar.pyx":497
 * 
 *                 t_ML_in_1[1][1]*=product
 *                 t_ML_back_1[1][1]/=product             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_7 = 1;
        __pyx_t_8 = 1;
        __pyx_t_6 = __pyx_t_double_complex_from_parts(__pyx_v_product, 0);
        if (unlikely(__Pyx_c_is_zero_double(__pyx_t_6))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 497, __pyx_L1_error)
        }
        ((__pyx_v_t_ML_back_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_quot_double(((__pyx_v_t_ML_back_1[__pyx_t_7])[__pyx_t_8]), __pyx_t_6);

        /* "MOKE_polar.pyx":500
 * 
 * 
 *                 t_ML_in_1[0][0]=ipow(t_ML_in_1[0][0],  MLREP[i]-1)             # <<<<<<<<<<<<<<
 *                 t_ML_in_1[1][1]=ipow(t_ML_in_1[1][1],  MLREP[i]-1)
 *                 t_ML_back_1[0][0]=ipow(t_ML_back_1[0][0],  MLREP[i]-1)
 */
        ((__pyx_v_t_ML_in_1[0])[0]) = __pyx_f_35Mathematical_Functions_Reflectivity_ipow(((__pyx_v_t_ML_in_1[0])[0]), ((__pyx_v_MLREP[__pyx_v_i]) - 1));

        /* "MOKE_polar.pyx":501
 * 
 *                 t_ML_in_1[0][0]=ipow(t_ML_in_1[0][0],  MLREP[i]-1)
 *                 t_ML_in_1[1][1]=ipow(t_ML_in_1[1][1],  MLREP[i]-1)             # <<<<<<<<<<<<<<
 *                 t_ML_back_1[0][0]=ipow(t_ML_back_1[0][0],  MLREP[i]-1)
 *                 t_ML_back_1[1][1]=ipow(t_ML_back_1[1][1],  MLREP[i]-1)
 */
        ((__pyx_v_t_ML_in_1[1])[1]) = __pyx_f_35Mathematical_Functions_Reflectivity_ipow(((__pyx_v_t_ML_in_1[1])[1]), ((__pyx_v_MLREP[__pyx_v_i]) - 1));

        /* "MOKE_polar.pyx":502
 *                 t_ML_in_1[0][0]=ipow(t_ML_in_1[0][0],  MLREP[i]-1)
 *                 t_ML_in_1[1][1]=ipow(t_ML_in_1[1][1],  MLREP[i]-1)
 *                 t_ML_back_1[0][0]=ipow(t_ML_back_1[0][0],  MLREP[i]-1)             # <<<<<<<<<<<<<<
 *                 t_ML_back_1[1][1]=ipow(t_ML_back_1[1][1],  MLREP[i]-1)
 * 
 */
        ((__pyx_v_t_ML_back_1[0])[0]) = __pyx_f_35Mathematical_Functions_Reflectivity_ipow(((__pyx_v_t_ML_back_1[0])[0]), ((__pyx_v_MLREP[__pyx_v_i]) - 1));

        /* "MOKE_polar.pyx":503
 *                 t_ML_in_1[1][1]=ipow(t_ML_in_1[1][1],  MLREP[i]-1)
 *                 t_ML_back_1[0][0]=ipow(t_ML_back_1[0][0],  MLREP[i]-1)
 *                 t_ML_back_1[1][1]=ipow(t_ML_back_1[1][1],  MLREP[i]-1)             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
        ((__pyx_v_t_ML_back_1[1])[1]) = __pyx_f_35Mathematical_Functions_Reflectivity_ipow(((__pyx_v_t_ML_back_1[1])[1]), ((__pyx_v_MLREP[__pyx_v_i]) - 1));

        /* "MOKE_polar.pyx":481
 * 
 * 
 *             if(ML_is_diagonal):             # <<<<<<<<<<<<<<
 *                 r_ML_in_2[0][0]=r_ML_in_1[0][0]*(1-ipow(t_ML_in_1[0][0]*t_ML_back_1[0][0], MLREP[i]-1))/(1-t_ML_in_1[0][0]*t_ML_back_1[0][0])
 *                 r_ML_in_2[1][1]=r_ML_in_1[1][1]*(1-ipow(t_ML_in_1[1][1]*t_ML_back_1[1][1], MLREP[i]-1))/(1-t_ML_in_1[1][1]*t_ML_back_1[1][1])
 */
        goto __pyx_L17;
      }

      /* "MOKE_polar.pyx":506
 * 
 *             else:
 *                 ev1=0.5*( -sqrt( t_ML_in_1[1][1]*t_ML_in_1[1][1]-2*t_ML_in_1[0][0]*t_ML_in_1[1][1]+4*t_ML_in_1[1][0]*t_ML_in_1[0][1]+t_ML_in_1[0][0]*t_ML_in_1[0][0] )+t_ML_in_1[0][0]+t_ML_in_1[1][1]  )             # <<<<<<<<<<<<<<
 *                 ev2=0.5*( sqrt( t_ML_in_1[1][1]*t_ML_in_1[1][1]-2*t_ML_in_1[0][0]*t_ML_in_1[1][1]+4*t_ML_in_1[1][0]*t_ML_in_1[0][1]+t_ML_in_1[0][0]*t_ML_in_1[0][0] )+t_ML_in_1[0][0]+t_ML_in_1[1][1]  )
 * 
 */
      /*else*/ {
        __pyx_v_ev1 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_neg_double(sqrt(__Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_t_ML_in_1[1])[1]), ((__pyx_v_t_ML_in_1[1])[1])), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), ((__pyx_v_t_ML_in_1[0])[0])), ((__pyx_v_t_ML_in_1[1])[1]))), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(4, 0), ((__pyx_v_t_ML_in_1[1])[0])), ((__pyx_v_t_ML_in_1[0])[1]))), __Pyx_c_prod_double(((__pyx_v_t_ML_in_1[0])[0]), ((__pyx_v_t_ML_in_1[0])[0]))))), ((__pyx_v_t_ML_in_1[0])[0])), ((__pyx_v_t_ML_in_1[1])[1])));

        /* "MOKE_polar.pyx":507
 *             else:
 *                 ev1=0.5*( -sqrt( t_ML_in_1[1][1]*t_ML_in_1[1][1]-2*t_ML_in_1[0][0]*t_ML_in_1[1][1]+4*t_ML_in_1[1][0]*t_ML_in_1[0][1]+t_ML_in_1[0][0]*t_ML_in_1[0][0] )+t_ML_in_1[0][0]+t_ML_in_1[1][1]  )
 *                 ev2=0.5*( sqrt( t_ML_in_1[1][1]*t_ML_in_1[1][1]-2*t_ML_in_1[0][0]*t_ML_in_1[1][1]+4*t_ML_in_1[1][0]*t_ML_in_1[0][1]+t_ML_in_1[0][0]*t_ML_in_1[0][0] )+t_ML_in_1[0][0]+t_ML_in_1[1][1]  )             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_v_ev2 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __Pyx_c_sum_double(__Pyx_c_sum_double(sqrt(__Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_t_ML_in_1[1])[1]), ((__pyx_v_t_ML_in_1[1])[1])), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), ((__pyx_v_t_ML_in_1[0])[0])), ((__pyx_v_t_ML_in_1[1])[1]))), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(4, 0), ((__pyx_v_t_ML_in_1[1])[0])), ((__pyx_v_t_ML_in_1[0])[1]))), __Pyx_c_prod_double(((__pyx_v_t_ML_in_1[0])[0]), ((__pyx_v_t_ML_in_1[0])[0])))), ((__pyx_v_t_ML_in_1[0])[0])), ((__pyx_v_t_ML_in_1[1])[1])));

        /* "MOKE_polar.pyx":510
 * 
 * 
 *                 absevmax1=cabsvalue(( ev1 ) )             # <<<<<<<<<<<<<<
 *                 absevmax2=cabsvalue(( ev2 ) )
 *                 if(absevmax2>absevmax1):
 */
        __pyx_v_absevmax1 = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__pyx_v_ev1);

        /* "MOKE_polar.pyx":511
 * 
 *                 absevmax1=cabsvalue(( ev1 ) )
 *                 absevmax2=cabsvalue(( ev2 ) )             # <<<<<<<<<<<<<<
 *                 if(absevmax2>absevmax1):
 *                     absevmax1=absevmax2
 */
        __pyx_v_absevmax2 = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__pyx_v_ev2);

        /* "MOKE_polar.pyx":512
 *                 absevmax1=cabsvalue(( ev1 ) )
 *                 absevmax2=cabsvalue(( ev2 ) )
 *                 if(absevmax2>absevmax1):             # <<<<<<<<<<<<<<
 *                     absevmax1=absevmax2
 * 
 */
        __pyx_t_5 = ((__pyx_v_absevmax2 > __pyx_v_absevmax1) != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":513
 *                 absevmax2=cabsvalue(( ev2 ) )
 *                 if(absevmax2>absevmax1):
 *                     absevmax1=absevmax2             # <<<<<<<<<<<<<<
 * 
 *                 ev3=0.5*( -sqrt( t_ML_back_1[1][1]*t_ML_back_1[1][1]-2*t_ML_back_1[0][0]*t_ML_back_1[1][1]+4*t_ML_back_1[1][0]*t_ML_back_1[0][1]+t_ML_back_1[0][0]*t_ML_back_1[0][0] )+t_ML_back_1[0][0]+t_ML_back_1[1][1]  )
 */
          __pyx_v_absevmax1 = __pyx_v_absevmax2;

          /* "MOKE_polar.pyx":512
 *                 absevmax1=cabsvalue(( ev1 ) )
 *                 absevmax2=cabsvalue(( ev2 ) )
 *                 if(absevmax2>absevmax1):             # <<<<<<<<<<<<<<
 *                     absevmax1=absevmax2
 * 
 */
        }

        /* "MOKE_polar.pyx":515
 *                     absevmax1=absevmax2
 * 
 *                 ev3=0.5*( -sqrt( t_ML_back_1[1][1]*t_ML_back_1[1][1]-2*t_ML_back_1[0][0]*t_ML_back_1[1][1]+4*t_ML_back_1[1][0]*t_ML_back_1[0][1]+t_ML_back_1[0][0]*t_ML_back_1[0][0] )+t_ML_back_1[0][0]+t_ML_back_1[1][1]  )             # <<<<<<<<<<<<<<
 *                 ev4=0.5*( sqrt( t_ML_back_1[1][1]*t_ML_back_1[1][1]-2*t_ML_back_1[0][0]*t_ML_back_1[1][1]+4*t_ML_back_1[1][0]*t_ML_back_1[0][1]+t_ML_back_1[0][0]*t_ML_back_1[0][0] )+t_ML_back_1[0][0]+t_ML_back_1[1][1]  )
 * 
 */
        __pyx_v_ev3 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_neg_double(sqrt(__Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_t_ML_back_1[1])[1]), ((__pyx_v_t_ML_back_1[1])[1])), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), ((__pyx_v_t_ML_back_1[0])[0])), ((__pyx_v_t_ML_back_1[1])[1]))), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(4, 0), ((__pyx_v_t_ML_back_1[1])[0])), ((__pyx_v_t_ML_back_1[0])[1]))), __Pyx_c_prod_double(((__pyx_v_t_ML_back_1[0])[0]), ((__pyx_v_t_ML_back_1[0])[0]))))), ((__pyx_v_t_ML_back_1[0])[0])), ((__pyx_v_t_ML_back_1[1])[1])));

        /* "MOKE_polar.pyx":516
 * 
 *                 ev3=0.5*( -sqrt( t_ML_back_1[1][1]*t_ML_back_1[1][1]-2*t_ML_back_1[0][0]*t_ML_back_1[1][1]+4*t_ML_back_1[1][0]*t_ML_back_1[0][1]+t_ML_back_1[0][0]*t_ML_back_1[0][0] )+t_ML_back_1[0][0]+t_ML_back_1[1][1]  )
 *                 ev4=0.5*( sqrt( t_ML_back_1[1][1]*t_ML_back_1[1][1]-2*t_ML_back_1[0][0]*t_ML_back_1[1][1]+4*t_ML_back_1[1][0]*t_ML_back_1[0][1]+t_ML_back_1[0][0]*t_ML_back_1[0][0] )+t_ML_back_1[0][0]+t_ML_back_1[1][1]  )             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_v_ev4 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __Pyx_c_sum_double(__Pyx_c_sum_double(sqrt(__Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_t_ML_back_1[1])[1]), ((__pyx_v_t_ML_back_1[1])[1])), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), ((__pyx_v_t_ML_back_1[0])[0])), ((__pyx_v_t_ML_back_1[1])[1]))), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(4, 0), ((__pyx_v_t_ML_back_1[1])[0])), ((__pyx_v_t_ML_back_1[0])[1]))), __Pyx_c_prod_double(((__pyx_v_t_ML_back_1[0])[0]), ((__pyx_v_t_ML_back_1[0])[0])))), ((__pyx_v_t_ML_back_1[0])[0])), ((__pyx_v_t_ML_back_1[1])[1])));

        /* "MOKE_polar.pyx":521
 *               #  print(ev3, abs(ev3), ev4, abs(ev4) )
 * 
 *                 product= cabsvalue(( ev1*ev3 ) )             # <<<<<<<<<<<<<<
 *               #  print(product)
 *                 product2= cabsvalue(( ev1*ev4 ) )
 */
        __pyx_v_product = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__Pyx_c_prod_double(__pyx_v_ev1, __pyx_v_ev3));

        /* "MOKE_polar.pyx":523
 *                 product= cabsvalue(( ev1*ev3 ) )
 *               #  print(product)
 *                 product2= cabsvalue(( ev1*ev4 ) )             # <<<<<<<<<<<<<<
 *               #  print(product2)
 *                 if( product2>product  ):
 */
        __pyx_v_product2 = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__Pyx_c_prod_double(__pyx_v_ev1, __pyx_v_ev4));

        /* "MOKE_polar.pyx":525
 *                 product2= cabsvalue(( ev1*ev4 ) )
 *               #  print(product2)
 *                 if( product2>product  ):             # <<<<<<<<<<<<<<
 *                     product=product2
 *                 product2= cabsvalue(( ev2*ev3 ) )
 */
        __pyx_t_5 = ((__pyx_v_product2 > __pyx_v_product) != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":526
 *               #  print(product2)
 *                 if( product2>product  ):
 *                     product=product2             # <<<<<<<<<<<<<<
 *                 product2= cabsvalue(( ev2*ev3 ) )
 *                # print(product2)
 */
          __pyx_v_product = __pyx_v_product2;

          /* "MOKE_polar.pyx":525
 *                 product2= cabsvalue(( ev1*ev4 ) )
 *               #  print(product2)
 *                 if( product2>product  ):             # <<<<<<<<<<<<<<
 *                     product=product2
 *                 product2= cabsvalue(( ev2*ev3 ) )
 */
        }

        /* "MOKE_polar.pyx":527
 *                 if( product2>product  ):
 *                     product=product2
 *                 product2= cabsvalue(( ev2*ev3 ) )             # <<<<<<<<<<<<<<
 *                # print(product2)
 *                 if( product2>product  ):
 */
        __pyx_v_product2 = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__Pyx_c_prod_double(__pyx_v_ev2, __pyx_v_ev3));

        /* "MOKE_polar.pyx":529
 *                 product2= cabsvalue(( ev2*ev3 ) )
 *                # print(product2)
 *                 if( product2>product  ):             # <<<<<<<<<<<<<<
 *                     product=product2
 *                 product2= cabsvalue(( ev2*ev4 ) )
 */
        __pyx_t_5 = ((__pyx_v_product2 > __pyx_v_product) != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":530
 *                # print(product2)
 *                 if( product2>product  ):
 *                     product=product2             # <<<<<<<<<<<<<<
 *                 product2= cabsvalue(( ev2*ev4 ) )
 *               #  print(product2)
 */
          __pyx_v_product = __pyx_v_product2;

          /* "MOKE_polar.pyx":529
 *                 product2= cabsvalue(( ev2*ev3 ) )
 *                # print(product2)
 *                 if( product2>product  ):             # <<<<<<<<<<<<<<
 *                     product=product2
 *                 product2= cabsvalue(( ev2*ev4 ) )
 */
        }

        /* "MOKE_polar.pyx":531
 *                 if( product2>product  ):
 *                     product=product2
 *                 product2= cabsvalue(( ev2*ev4 ) )             # <<<<<<<<<<<<<<
 *               #  print(product2)
 *                 if( product2>product  ):
 */
        __pyx_v_product2 = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__Pyx_c_prod_double(__pyx_v_ev2, __pyx_v_ev4));

        /* "MOKE_polar.pyx":533
 *                 product2= cabsvalue(( ev2*ev4 ) )
 *               #  print(product2)
 *                 if( product2>product  ):             # <<<<<<<<<<<<<<
 *                     product=product2
 *              #   print(product)
 */
        __pyx_t_5 = ((__pyx_v_product2 > __pyx_v_product) != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":534
 *               #  print(product2)
 *                 if( product2>product  ):
 *                     product=product2             # <<<<<<<<<<<<<<
 *              #   print(product)
 *                 normalizator=0.5*(1.+product)
 */
          __pyx_v_product = __pyx_v_product2;

          /* "MOKE_polar.pyx":533
 *                 product2= cabsvalue(( ev2*ev4 ) )
 *               #  print(product2)
 *                 if( product2>product  ):             # <<<<<<<<<<<<<<
 *                     product=product2
 *              #   print(product)
 */
        }

        /* "MOKE_polar.pyx":536
 *                     product=product2
 *              #   print(product)
 *                 normalizator=0.5*(1.+product)             # <<<<<<<<<<<<<<
 * 
 *                 t_ML_in_1[0][0]=(normalizator/absevmax1)*( t_ML_in_1[0][0] )
 */
        __pyx_v_normalizator = (0.5 * (1. + __pyx_v_product));

        /* "MOKE_polar.pyx":538
 *                 normalizator=0.5*(1.+product)
 * 
 *                 t_ML_in_1[0][0]=(normalizator/absevmax1)*( t_ML_in_1[0][0] )             # <<<<<<<<<<<<<<
 *                 t_ML_in_1[0][1]=(normalizator/absevmax1)*( t_ML_in_1[0][1] )
 *                 t_ML_in_1[1][0]=(normalizator/absevmax1)*( t_ML_in_1[1][0] )
 */
        if (unlikely(__pyx_v_absevmax1 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 538, __pyx_L1_error)
        }
        ((__pyx_v_t_ML_in_1[0])[0]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_normalizator / __pyx_v_absevmax1), 0), ((__pyx_v_t_ML_in_1[0])[0]));

        /* "MOKE_polar.pyx":539
 * 
 *                 t_ML_in_1[0][0]=(normalizator/absevmax1)*( t_ML_in_1[0][0] )
 *                 t_ML_in_1[0][1]=(normalizator/absevmax1)*( t_ML_in_1[0][1] )             # <<<<<<<<<<<<<<
 *                 t_ML_in_1[1][0]=(normalizator/absevmax1)*( t_ML_in_1[1][0] )
 *                 t_ML_in_1[1][1]=(normalizator/absevmax1)*( t_ML_in_1[1][1] )
 */
        if (unlikely(__pyx_v_absevmax1 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 539, __pyx_L1_error)
        }
        ((__pyx_v_t_ML_in_1[0])[1]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_normalizator / __pyx_v_absevmax1), 0), ((__pyx_v_t_ML_in_1[0])[1]));

        /* "MOKE_polar.pyx":540
 *                 t_ML_in_1[0][0]=(normalizator/absevmax1)*( t_ML_in_1[0][0] )
 *                 t_ML_in_1[0][1]=(normalizator/absevmax1)*( t_ML_in_1[0][1] )
 *                 t_ML_in_1[1][0]=(normalizator/absevmax1)*( t_ML_in_1[1][0] )             # <<<<<<<<<<<<<<
 *                 t_ML_in_1[1][1]=(normalizator/absevmax1)*( t_ML_in_1[1][1] )
 *                 t_ML_back_1[0][0]=(absevmax1/normalizator)*( t_ML_back_1[0][0] )
 */
        if (unlikely(__pyx_v_absevmax1 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 540, __pyx_L1_error)
        }
        ((__pyx_v_t_ML_in_1[1])[0]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_normalizator / __pyx_v_absevmax1), 0), ((__pyx_v_t_ML_in_1[1])[0]));

        /* "MOKE_polar.pyx":541
 *                 t_ML_in_1[0][1]=(normalizator/absevmax1)*( t_ML_in_1[0][1] )
 *                 t_ML_in_1[1][0]=(normalizator/absevmax1)*( t_ML_in_1[1][0] )
 *                 t_ML_in_1[1][1]=(normalizator/absevmax1)*( t_ML_in_1[1][1] )             # <<<<<<<<<<<<<<
 *                 t_ML_back_1[0][0]=(absevmax1/normalizator)*( t_ML_back_1[0][0] )
 *                 t_ML_back_1[0][1]=(absevmax1/normalizator)*( t_ML_back_1[0][1] )
 */
        if (unlikely(__pyx_v_absevmax1 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 541, __pyx_L1_error)
        }
        ((__pyx_v_t_ML_in_1[1])[1]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_normalizator / __pyx_v_absevmax1), 0), ((__pyx_v_t_ML_in_1[1])[1]));

        /* "MOKE_polar.pyx":542
 *                 t_ML_in_1[1][0]=(normalizator/absevmax1)*( t_ML_in_1[1][0] )
 *                 t_ML_in_1[1][1]=(normalizator/absevmax1)*( t_ML_in_1[1][1] )
 *                 t_ML_back_1[0][0]=(absevmax1/normalizator)*( t_ML_back_1[0][0] )             # <<<<<<<<<<<<<<
 *                 t_ML_back_1[0][1]=(absevmax1/normalizator)*( t_ML_back_1[0][1] )
 *                 t_ML_back_1[1][0]=(absevmax1/normalizator)*( t_ML_back_1[1][0] )
 */
        if (unlikely(__pyx_v_normalizator == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 542, __pyx_L1_error)
        }
        ((__pyx_v_t_ML_back_1[0])[0]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_absevmax1 / __pyx_v_normalizator), 0), ((__pyx_v_t_ML_back_1[0])[0]));

        /* "MOKE_polar.pyx":543
 *                 t_ML_in_1[1][1]=(normalizator/absevmax1)*( t_ML_in_1[1][1] )
 *                 t_ML_back_1[0][0]=(absevmax1/normalizator)*( t_ML_back_1[0][0] )
 *                 t_ML_back_1[0][1]=(absevmax1/normalizator)*( t_ML_back_1[0][1] )             # <<<<<<<<<<<<<<
 *                 t_ML_back_1[1][0]=(absevmax1/normalizator)*( t_ML_back_1[1][0] )
 *                 t_ML_back_1[1][1]=(absevmax1/normalizator)*( t_ML_back_1[1][1] )
 */
        if (unlikely(__pyx_v_normalizator == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 543, __pyx_L1_error)
        }
        ((__pyx_v_t_ML_back_1[0])[1]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_absevmax1 / __pyx_v_normalizator), 0), ((__pyx_v_t_ML_back_1[0])[1]));

        /* "MOKE_polar.pyx":544
 *                 t_ML_back_1[0][0]=(absevmax1/normalizator)*( t_ML_back_1[0][0] )
 *                 t_ML_back_1[0][1]=(absevmax1/normalizator)*( t_ML_back_1[0][1] )
 *                 t_ML_back_1[1][0]=(absevmax1/normalizator)*( t_ML_back_1[1][0] )             # <<<<<<<<<<<<<<
 *                 t_ML_back_1[1][1]=(absevmax1/normalizator)*( t_ML_back_1[1][1] )
 * 
 */
        if (unlikely(__pyx_v_normalizator == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 544, __pyx_L1_error)
        }
        ((__pyx_v_t_ML_back_1[1])[0]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_absevmax1 / __pyx_v_normalizator), 0), ((__pyx_v_t_ML_back_1[1])[0]));

        /* "MOKE_polar.pyx":545
 *                 t_ML_back_1[0][1]=(absevmax1/normalizator)*( t_ML_back_1[0][1] )
 *                 t_ML_back_1[1][0]=(absevmax1/normalizator)*( t_ML_back_1[1][0] )
 *                 t_ML_back_1[1][1]=(absevmax1/normalizator)*( t_ML_back_1[1][1] )             # <<<<<<<<<<<<<<
 * 
 *                 Calculate_Multilayer_equation(&t_ML_back_1, &t_ML_in_1, &r_ML_in_1, &r_ML_in_2, MLREP[i]-1)
 */
        if (unlikely(__pyx_v_normalizator == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 545, __pyx_L1_error)
        }
        ((__pyx_v_t_ML_back_1[1])[1]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_absevmax1 / __pyx_v_normalizator), 0), ((__pyx_v_t_ML_back_1[1])[1]));

        /* "MOKE_polar.pyx":547
 *                 t_ML_back_1[1][1]=(absevmax1/normalizator)*( t_ML_back_1[1][1] )
 * 
 *                 Calculate_Multilayer_equation(&t_ML_back_1, &t_ML_in_1, &r_ML_in_1, &r_ML_in_2, MLREP[i]-1)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_f_33Multilayer_Functions_Reflectivity_Calculate_Multilayer_equation((&__pyx_v_t_ML_back_1), (&__pyx_v_t_ML_in_1), (&__pyx_v_r_ML_in_1), (&__pyx_v_r_ML_in_2), ((__pyx_v_MLREP[__pyx_v_i]) - 1));
      }
      __pyx_L17:;

      /* "MOKE_polar.pyx":551
 * 
 * 
 *             ML_is_diagonal=1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_ML_is_diagonal = 1;

      /* "MOKE_polar.pyx":555
 * 
 * 
 *             Mult2x2_rightside(&t_ML_back_1, rtot)             # <<<<<<<<<<<<<<
 *             Mult2x2_leftside(rtot, &t_ML_in_1) # (t'(CA) p_C t'(BC) p_B t'(AB)*p(A))^N rtot (p(A) * t(AB) p_B t(BC) p_C t(CA))^N
 * 
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_t_ML_back_1), __pyx_v_rtot);

      /* "MOKE_polar.pyx":556
 * 
 *             Mult2x2_rightside(&t_ML_back_1, rtot)
 *             Mult2x2_leftside(rtot, &t_ML_in_1) # (t'(CA) p_C t'(BC) p_B t'(AB)*p(A))^N rtot (p(A) * t(AB) p_B t(BC) p_C t(CA))^N             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_t_ML_in_1));

      /* "MOKE_polar.pyx":560
 * 
 * 
 *             (rtot[0])[0][0]+=r_ML_in_2[0][0]             # <<<<<<<<<<<<<<
 *             (rtot[0])[1][0]+=r_ML_in_2[1][0]
 *             (rtot[0])[0][1]+=r_ML_in_2[0][1]
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r_ML_in_2[0])[0]));

      /* "MOKE_polar.pyx":561
 * 
 *             (rtot[0])[0][0]+=r_ML_in_2[0][0]
 *             (rtot[0])[1][0]+=r_ML_in_2[1][0]             # <<<<<<<<<<<<<<
 *             (rtot[0])[0][1]+=r_ML_in_2[0][1]
 *             (rtot[0])[1][1]+=r_ML_in_2[1][1]
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 1;
      __pyx_t_9 = 0;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r_ML_in_2[1])[0]));

      /* "MOKE_polar.pyx":562
 *             (rtot[0])[0][0]+=r_ML_in_2[0][0]
 *             (rtot[0])[1][0]+=r_ML_in_2[1][0]
 *             (rtot[0])[0][1]+=r_ML_in_2[0][1]             # <<<<<<<<<<<<<<
 *             (rtot[0])[1][1]+=r_ML_in_2[1][1]
 * 
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 1;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r_ML_in_2[0])[1]));

      /* "MOKE_polar.pyx":563
 *             (rtot[0])[1][0]+=r_ML_in_2[1][0]
 *             (rtot[0])[0][1]+=r_ML_in_2[0][1]
 *             (rtot[0])[1][1]+=r_ML_in_2[1][1]             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 1;
      __pyx_t_9 = 1;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r_ML_in_2[1])[1]));

      /* "MOKE_polar.pyx":566
 * 
 * 
 *             j=1             # <<<<<<<<<<<<<<
 *          #   print "9"
 *             while j<MLLENGTH[i]:
 */
      __pyx_v_j = 1;

      /* "MOKE_polar.pyx":568
 *             j=1
 *          #   print "9"
 *             while j<MLLENGTH[i]:             # <<<<<<<<<<<<<<
 *                 LowerLayer=LR[MLCOMP[i][j-1]]
 *                 UpperLayer=LR[MLCOMP[i][j]]
 */
      while (1) {
        __pyx_t_5 = ((__pyx_v_j < (__pyx_v_MLLENGTH[__pyx_v_i])) != 0);
        if (!__pyx_t_5) break;

        /* "MOKE_polar.pyx":569
 *          #   print "9"
 *             while j<MLLENGTH[i]:
 *                 LowerLayer=LR[MLCOMP[i][j-1]]             # <<<<<<<<<<<<<<
 *                 UpperLayer=LR[MLCOMP[i][j]]
 *                 if(Memory1.IsFilled):
 */
        __pyx_v_LowerLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[(__pyx_v_j - 1)])]);

        /* "MOKE_polar.pyx":570
 *             while j<MLLENGTH[i]:
 *                 LowerLayer=LR[MLCOMP[i][j-1]]
 *                 UpperLayer=LR[MLCOMP[i][j]]             # <<<<<<<<<<<<<<
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 */
        __pyx_v_UpperLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[__pyx_v_j])]);

        /* "MOKE_polar.pyx":571
 *                 LowerLayer=LR[MLCOMP[i][j-1]]
 *                 UpperLayer=LR[MLCOMP[i][j]]
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
        __pyx_t_5 = (__pyx_v_Memory1.IsFilled != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":572
 *                 UpperLayer=LR[MLCOMP[i][j]]
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer2=&Memory2
 *                 else:
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":573
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2             # <<<<<<<<<<<<<<
 *                 else:
 *                     Mempointer2=&Memory1
 */
          __pyx_v_Mempointer2 = (&__pyx_v_Memory2);

          /* "MOKE_polar.pyx":571
 *                 LowerLayer=LR[MLCOMP[i][j-1]]
 *                 UpperLayer=LR[MLCOMP[i][j]]
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
          goto __pyx_L24;
        }

        /* "MOKE_polar.pyx":575
 *                     Mempointer2=&Memory2
 *                 else:
 *                     Mempointer2=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory2
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 */
        /*else*/ {
          __pyx_v_Mempointer2 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":576
 *                 else:
 *                     Mempointer2=&Memory1
 *                     Mempointer1=&Memory2             # <<<<<<<<<<<<<<
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory2);
        }
        __pyx_L24:;

        /* "MOKE_polar.pyx":577
 *                     Mempointer2=&Memory1
 *                     Mempointer1=&Memory2
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0
 */
        __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_v_UpperLayer.cx, __pyx_v_UpperLayer.cy, __pyx_v_UpperLayer.cz, __pyx_v_UpperLayer.cg, __pyx_v_LowerLayer.magdir, __pyx_v_UpperLayer.magdir, (&__pyx_v_r), (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

        /* "MOKE_polar.pyx":579
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0             # <<<<<<<<<<<<<<
 *                 Mult2x2_rightside(&p, rtot)
 *                 Mult2x2_leftside(rtot, &p)
 */
        (__pyx_v_Mempointer1[0]).IsFilled = 0;

        /* "MOKE_polar.pyx":580
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0
 *                 Mult2x2_rightside(&p, rtot)             # <<<<<<<<<<<<<<
 *                 Mult2x2_leftside(rtot, &p)
 *                 Mult2x2_rightside(&tprime, rtot)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), __pyx_v_rtot);

        /* "MOKE_polar.pyx":581
 *                 (Mempointer1[0]).IsFilled=0
 *                 Mult2x2_rightside(&p, rtot)
 *                 Mult2x2_leftside(rtot, &p)             # <<<<<<<<<<<<<<
 *                 Mult2x2_rightside(&tprime, rtot)
 *                 Mult2x2_leftside(rtot, &t)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_p));

        /* "MOKE_polar.pyx":582
 *                 Mult2x2_rightside(&p, rtot)
 *                 Mult2x2_leftside(rtot, &p)
 *                 Mult2x2_rightside(&tprime, rtot)             # <<<<<<<<<<<<<<
 *                 Mult2x2_leftside(rtot, &t)
 *                 (rtot[0])[0][0]+=r[0][0]
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_tprime), __pyx_v_rtot);

        /* "MOKE_polar.pyx":583
 *                 Mult2x2_leftside(rtot, &p)
 *                 Mult2x2_rightside(&tprime, rtot)
 *                 Mult2x2_leftside(rtot, &t)             # <<<<<<<<<<<<<<
 *                 (rtot[0])[0][0]+=r[0][0]
 *                 (rtot[0])[1][0]+=r[1][0]
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_t));

        /* "MOKE_polar.pyx":584
 *                 Mult2x2_rightside(&tprime, rtot)
 *                 Mult2x2_leftside(rtot, &t)
 *                 (rtot[0])[0][0]+=r[0][0]             # <<<<<<<<<<<<<<
 *                 (rtot[0])[1][0]+=r[1][0]
 *                 (rtot[0])[0][1]+=r[0][1]
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        __pyx_t_9 = 0;
        (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[0])[0]));

        /* "MOKE_polar.pyx":585
 *                 Mult2x2_leftside(rtot, &t)
 *                 (rtot[0])[0][0]+=r[0][0]
 *                 (rtot[0])[1][0]+=r[1][0]             # <<<<<<<<<<<<<<
 *                 (rtot[0])[0][1]+=r[0][1]
 *                 (rtot[0])[1][1]+=r[1][1]
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 1;
        __pyx_t_9 = 0;
        (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[1])[0]));

        /* "MOKE_polar.pyx":586
 *                 (rtot[0])[0][0]+=r[0][0]
 *                 (rtot[0])[1][0]+=r[1][0]
 *                 (rtot[0])[0][1]+=r[0][1]             # <<<<<<<<<<<<<<
 *                 (rtot[0])[1][1]+=r[1][1]
 * 
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        __pyx_t_9 = 1;
        (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[0])[1]));

        /* "MOKE_polar.pyx":587
 *                 (rtot[0])[1][0]+=r[1][0]
 *                 (rtot[0])[0][1]+=r[0][1]
 *                 (rtot[0])[1][1]+=r[1][1]             # <<<<<<<<<<<<<<
 * 
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 1;
        __pyx_t_9 = 1;
        (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[1])[1]));

        /* "MOKE_polar.pyx":589
 *                 (rtot[0])[1][1]+=r[1][1]
 * 
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)             # <<<<<<<<<<<<<<
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 *                 j=j+1
 */
        ((__pyx_v_p[0])[0]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz1));

        /* "MOKE_polar.pyx":590
 * 
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)             # <<<<<<<<<<<<<<
 *                 j=j+1
 *             LowerLayer=LR[MLCOMP[i][j-1]]
 */
        ((__pyx_v_p[1])[1]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz2));

        /* "MOKE_polar.pyx":591
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 *                 j=j+1             # <<<<<<<<<<<<<<
 *             LowerLayer=LR[MLCOMP[i][j-1]]
 *             if(i==Cap):
 */
        __pyx_v_j = (__pyx_v_j + 1);
      }

      /* "MOKE_polar.pyx":592
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 *                 j=j+1
 *             LowerLayer=LR[MLCOMP[i][j-1]]             # <<<<<<<<<<<<<<
 *             if(i==Cap):
 *                 if(Memory1.IsFilled):
 */
      __pyx_v_LowerLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[(__pyx_v_j - 1)])]);

      /* "MOKE_polar.pyx":593
 *                 j=j+1
 *             LowerLayer=LR[MLCOMP[i][j-1]]
 *             if(i==Cap):             # <<<<<<<<<<<<<<
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 */
      __pyx_t_5 = ((__pyx_v_i == __pyx_v_Cap) != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":594
 *             LowerLayer=LR[MLCOMP[i][j-1]]
 *             if(i==Cap):
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
        __pyx_t_5 = (__pyx_v_Memory1.IsFilled != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":595
 *             if(i==Cap):
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer2=&Memory2
 *                 else:
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":596
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2             # <<<<<<<<<<<<<<
 *                 else:
 *                     Mempointer2=&Memory1
 */
          __pyx_v_Mempointer2 = (&__pyx_v_Memory2);

          /* "MOKE_polar.pyx":594
 *             LowerLayer=LR[MLCOMP[i][j-1]]
 *             if(i==Cap):
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
          goto __pyx_L26;
        }

        /* "MOKE_polar.pyx":598
 *                     Mempointer2=&Memory2
 *                 else:
 *                     Mempointer2=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory2
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0,0,0,0, \
 */
        /*else*/ {
          __pyx_v_Mempointer2 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":599
 *                 else:
 *                     Mempointer2=&Memory1
 *                     Mempointer1=&Memory2             # <<<<<<<<<<<<<<
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0,0,0,0, \
 *                     LowerLayer.magdir, 0, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory2);
        }
        __pyx_L26:;

        /* "MOKE_polar.pyx":600
 *                     Mempointer2=&Memory1
 *                     Mempointer1=&Memory2
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0,0,0,0, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, 0, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 * 
 */
        __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_v_LowerLayer.magdir, 0, (&__pyx_v_r), (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

        /* "MOKE_polar.pyx":593
 *                 j=j+1
 *             LowerLayer=LR[MLCOMP[i][j-1]]
 *             if(i==Cap):             # <<<<<<<<<<<<<<
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 */
        goto __pyx_L25;
      }

      /* "MOKE_polar.pyx":604
 * 
 *             else:
 *                 UpperLayer=LR[MLCOMP[i+1][0]]             # <<<<<<<<<<<<<<
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 */
      /*else*/ {
        __pyx_v_UpperLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[(__pyx_v_i + 1)])[0])]);

        /* "MOKE_polar.pyx":605
 *             else:
 *                 UpperLayer=LR[MLCOMP[i+1][0]]
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
        __pyx_t_5 = (__pyx_v_Memory1.IsFilled != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":606
 *                 UpperLayer=LR[MLCOMP[i+1][0]]
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer2=&Memory2
 *                 else:
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":607
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2             # <<<<<<<<<<<<<<
 *                 else:
 *                     Mempointer2=&Memory1
 */
          __pyx_v_Mempointer2 = (&__pyx_v_Memory2);

          /* "MOKE_polar.pyx":605
 *             else:
 *                 UpperLayer=LR[MLCOMP[i+1][0]]
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
          goto __pyx_L27;
        }

        /* "MOKE_polar.pyx":609
 *                     Mempointer2=&Memory2
 *                 else:
 *                     Mempointer2=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory2
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 */
        /*else*/ {
          __pyx_v_Mempointer2 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":610
 *                 else:
 *                     Mempointer2=&Memory1
 *                     Mempointer1=&Memory2             # <<<<<<<<<<<<<<
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory2);
        }
        __pyx_L27:;

        /* "MOKE_polar.pyx":611
 *                     Mempointer2=&Memory1
 *                     Mempointer1=&Memory2
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0
 */
        __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_v_UpperLayer.cx, __pyx_v_UpperLayer.cy, __pyx_v_UpperLayer.cz, __pyx_v_UpperLayer.cg, __pyx_v_LowerLayer.magdir, __pyx_v_UpperLayer.magdir, (&__pyx_v_r), (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

        /* "MOKE_polar.pyx":613
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0             # <<<<<<<<<<<<<<
 * 
 *              #   print "16"
 */
        (__pyx_v_Mempointer1[0]).IsFilled = 0;
      }
      __pyx_L25:;

      /* "MOKE_polar.pyx":617
 *              #   print "16"
 *          #   print "17"
 *             Mult2x2_rightside(&p, rtot)             # <<<<<<<<<<<<<<
 *             Mult2x2_leftside(rtot, &p)
 *             Mult2x2_rightside(&tprime, rtot)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), __pyx_v_rtot);

      /* "MOKE_polar.pyx":618
 *          #   print "17"
 *             Mult2x2_rightside(&p, rtot)
 *             Mult2x2_leftside(rtot, &p)             # <<<<<<<<<<<<<<
 *             Mult2x2_rightside(&tprime, rtot)
 *             Mult2x2_leftside(rtot, &t)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_p));

      /* "MOKE_polar.pyx":619
 *             Mult2x2_rightside(&p, rtot)
 *             Mult2x2_leftside(rtot, &p)
 *             Mult2x2_rightside(&tprime, rtot)             # <<<<<<<<<<<<<<
 *             Mult2x2_leftside(rtot, &t)
 *             (rtot[0])[0][0]+=r[0][0]
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_tprime), __pyx_v_rtot);

      /* "MOKE_polar.pyx":620
 *             Mult2x2_leftside(rtot, &p)
 *             Mult2x2_rightside(&tprime, rtot)
 *             Mult2x2_leftside(rtot, &t)             # <<<<<<<<<<<<<<
 *             (rtot[0])[0][0]+=r[0][0]
 *             (rtot[0])[1][0]+=r[1][0]
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_t));

      /* "MOKE_polar.pyx":621
 *             Mult2x2_rightside(&tprime, rtot)
 *             Mult2x2_leftside(rtot, &t)
 *             (rtot[0])[0][0]+=r[0][0]             # <<<<<<<<<<<<<<
 *             (rtot[0])[1][0]+=r[1][0]
 *             (rtot[0])[0][1]+=r[0][1]
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[0])[0]));

      /* "MOKE_polar.pyx":622
 *             Mult2x2_leftside(rtot, &t)
 *             (rtot[0])[0][0]+=r[0][0]
 *             (rtot[0])[1][0]+=r[1][0]             # <<<<<<<<<<<<<<
 *             (rtot[0])[0][1]+=r[0][1]
 *             (rtot[0])[1][1]+=r[1][1]
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 1;
      __pyx_t_9 = 0;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[1])[0]));

      /* "MOKE_polar.pyx":623
 *             (rtot[0])[0][0]+=r[0][0]
 *             (rtot[0])[1][0]+=r[1][0]
 *             (rtot[0])[0][1]+=r[0][1]             # <<<<<<<<<<<<<<
 *             (rtot[0])[1][1]+=r[1][1]
 * 
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 1;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[0])[1]));

      /* "MOKE_polar.pyx":624
 *             (rtot[0])[1][0]+=r[1][0]
 *             (rtot[0])[0][1]+=r[0][1]
 *             (rtot[0])[1][1]+=r[1][1]             # <<<<<<<<<<<<<<
 * 
 *             p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 1;
      __pyx_t_9 = 1;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[1])[1]));

      /* "MOKE_polar.pyx":626
 *             (rtot[0])[1][1]+=r[1][1]
 * 
 *             p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)             # <<<<<<<<<<<<<<
 *             p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 * 
 */
      ((__pyx_v_p[0])[0]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz1));

      /* "MOKE_polar.pyx":627
 * 
 *             p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *             p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)             # <<<<<<<<<<<<<<
 * 
 *         i=i+1
 */
      ((__pyx_v_p[1])[1]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz2));
    }
    __pyx_L7:;

    /* "MOKE_polar.pyx":629
 *             p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 * 
 *         i=i+1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "MOKE_polar.pyx":298
 *     (rprime[0])[1][1]=J[1][2]*((tprime[0])[0][1])+J[1][3]*((tprime[0])[1][1])
 * 
 * cdef void Paratt_magnetic_z(Heterostructure* HS, double th, double wavelength, double complex (*rtot)[2][2]):             # <<<<<<<<<<<<<<
 * 
 *     cdef double k0=6.283185307179586/wavelength
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("MOKE_polar.Paratt_magnetic_z", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "MOKE_polar.pyx":632
 * 
 * 
 * cdef void Paratt_magnetic_z_MS(Heterostructure* HS, double th, double wavelength, double complex (*rtot)[2][2]):             # <<<<<<<<<<<<<<
 * 
 *     cdef double k0=6.283185307179586/wavelength
 */

static void __pyx_f_10MOKE_polar_Paratt_magnetic_z_MS(struct __pyx_t_10Structural_Heterostructure *__pyx_v_HS, double __pyx_v_th, double __pyx_v_wavelength, __pyx_t_double_complex (*__pyx_v_rtot)[2][2]) {
  double __pyx_v_k0;
  CYTHON_UNUSED double __pyx_v_sintheta;
  double __pyx_v_vy;
  double __pyx_v_vyvy;
  double __pyx_v_omvyvy;
  int __pyx_v_NLAYERS;
  int *__pyx_v_MLLENGTH;
  int **__pyx_v_MLCOMP;
  int *__pyx_v_MLREP;
  struct __pyx_t_10Structural_CLayer *__pyx_v_LR;
  int __pyx_v_i;
  int __pyx_v_j;
  struct __pyx_t_10Structural_CLayer __pyx_v_UpperLayer;
  struct __pyx_t_10Structural_CLayer __pyx_v_LowerLayer;
  struct __pyx_t_10Structural_rMemory __pyx_v_Memory1;
  struct __pyx_t_10Structural_rMemory __pyx_v_Memory2;
  struct __pyx_t_10Structural_rMemory *__pyx_v_Mempointer1;
  struct __pyx_t_10Structural_rMemory *__pyx_v_Mempointer2;
  CYTHON_UNUSED int __pyx_v_ML_is_diagonal;
  __pyx_t_double_complex __pyx_v_r[2][2];
  __pyx_t_double_complex __pyx_v_rprime[2][2];
  __pyx_t_double_complex __pyx_v_t[2][2];
  __pyx_t_double_complex __pyx_v_tprime[2][2];
  __pyx_t_double_complex __pyx_v_p[2][2];
  __pyx_t_double_complex __pyx_v_t_ML_in_1[2][2];
  __pyx_t_double_complex __pyx_v_t_ML_back_1[2][2];
  __pyx_t_double_complex __pyx_v_t_ML_in_2[2][2];
  __pyx_t_double_complex __pyx_v_t_ML_back_2[2][2];
  __pyx_t_double_complex __pyx_v_r_ML_in_1[2][2];
  __pyx_t_double_complex __pyx_v_r_ML_in_2[2][2];
  __pyx_t_double_complex __pyx_v_r_ML_back_1[2][2];
  __pyx_t_double_complex __pyx_v_r_ML_back_2[2][2];
  __pyx_t_double_complex __pyx_v_C0[2][2];
  __pyx_t_double_complex __pyx_v_C1[2][2];
  __pyx_t_double_complex __pyx_v_ev1;
  __pyx_t_double_complex __pyx_v_ev2;
  __pyx_t_double_complex __pyx_v_ev3;
  __pyx_t_double_complex __pyx_v_ev4;
  double __pyx_v_product;
  double __pyx_v_product2;
  double __pyx_v_absevmax1;
  double __pyx_v_absevmax2;
  double __pyx_v_normalizator;
  int __pyx_v_Cap;
  CYTHON_UNUSED struct __pyx_t_10Structural_CLayer __pyx_v_Layer;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int *__pyx_t_2;
  int **__pyx_t_3;
  struct __pyx_t_10Structural_CLayer *__pyx_t_4;
  int __pyx_t_5;
  __pyx_t_double_complex __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  struct __pyx_t_10Structural_CLayer __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Paratt_magnetic_z_MS", 0);

  /* "MOKE_polar.pyx":634
 * cdef void Paratt_magnetic_z_MS(Heterostructure* HS, double th, double wavelength, double complex (*rtot)[2][2]):
 * 
 *     cdef double k0=6.283185307179586/wavelength             # <<<<<<<<<<<<<<
 *     cdef double sintheta=sin(two_pi_div_360()*th)
 * 
 */
  if (unlikely(__pyx_v_wavelength == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 634, __pyx_L1_error)
  }
  __pyx_v_k0 = (6.283185307179586 / __pyx_v_wavelength);

  /* "MOKE_polar.pyx":635
 * 
 *     cdef double k0=6.283185307179586/wavelength
 *     cdef double sintheta=sin(two_pi_div_360()*th)             # <<<<<<<<<<<<<<
 * 
 *     cdef double vy=cos(two_pi_div_360()*th)
 */
  __pyx_v_sintheta = sin((__pyx_f_35Mathematical_Functions_Reflectivity_two_pi_div_360() * __pyx_v_th));

  /* "MOKE_polar.pyx":637
 *     cdef double sintheta=sin(two_pi_div_360()*th)
 * 
 *     cdef double vy=cos(two_pi_div_360()*th)             # <<<<<<<<<<<<<<
 *     cdef double vyvy=quadr(vy)
 *     cdef double omvyvy=1-vyvy
 */
  __pyx_v_vy = cos((__pyx_f_35Mathematical_Functions_Reflectivity_two_pi_div_360() * __pyx_v_th));

  /* "MOKE_polar.pyx":638
 * 
 *     cdef double vy=cos(two_pi_div_360()*th)
 *     cdef double vyvy=quadr(vy)             # <<<<<<<<<<<<<<
 *     cdef double omvyvy=1-vyvy
 *     cdef int NLAYERS=(HS[0]).NLayers
 */
  __pyx_v_vyvy = __pyx_f_35Mathematical_Functions_Reflectivity_quadr(__pyx_v_vy);

  /* "MOKE_polar.pyx":639
 *     cdef double vy=cos(two_pi_div_360()*th)
 *     cdef double vyvy=quadr(vy)
 *     cdef double omvyvy=1-vyvy             # <<<<<<<<<<<<<<
 *     cdef int NLAYERS=(HS[0]).NLayers
 *     cdef int* MLLENGTH=(HS[0]).MLLENGTH
 */
  __pyx_v_omvyvy = (1.0 - __pyx_v_vyvy);

  /* "MOKE_polar.pyx":640
 *     cdef double vyvy=quadr(vy)
 *     cdef double omvyvy=1-vyvy
 *     cdef int NLAYERS=(HS[0]).NLayers             # <<<<<<<<<<<<<<
 *     cdef int* MLLENGTH=(HS[0]).MLLENGTH
 *     cdef int** MLCOMP=(HS[0]).MLCOMP
 */
  __pyx_t_1 = (__pyx_v_HS[0]).NLayers;
  __pyx_v_NLAYERS = __pyx_t_1;

  /* "MOKE_polar.pyx":641
 *     cdef double omvyvy=1-vyvy
 *     cdef int NLAYERS=(HS[0]).NLayers
 *     cdef int* MLLENGTH=(HS[0]).MLLENGTH             # <<<<<<<<<<<<<<
 *     cdef int** MLCOMP=(HS[0]).MLCOMP
 *     cdef int* MLREP=(HS[0]).MLREP
 */
  __pyx_t_2 = (__pyx_v_HS[0]).MLLENGTH;
  __pyx_v_MLLENGTH = __pyx_t_2;

  /* "MOKE_polar.pyx":642
 *     cdef int NLAYERS=(HS[0]).NLayers
 *     cdef int* MLLENGTH=(HS[0]).MLLENGTH
 *     cdef int** MLCOMP=(HS[0]).MLCOMP             # <<<<<<<<<<<<<<
 *     cdef int* MLREP=(HS[0]).MLREP
 *     cdef CLayer* LR=(HS[0]).LR
 */
  __pyx_t_3 = (__pyx_v_HS[0]).MLCOMP;
  __pyx_v_MLCOMP = __pyx_t_3;

  /* "MOKE_polar.pyx":643
 *     cdef int* MLLENGTH=(HS[0]).MLLENGTH
 *     cdef int** MLCOMP=(HS[0]).MLCOMP
 *     cdef int* MLREP=(HS[0]).MLREP             # <<<<<<<<<<<<<<
 *     cdef CLayer* LR=(HS[0]).LR
 *     cdef int i,j
 */
  __pyx_t_2 = (__pyx_v_HS[0]).MLREP;
  __pyx_v_MLREP = __pyx_t_2;

  /* "MOKE_polar.pyx":644
 *     cdef int** MLCOMP=(HS[0]).MLCOMP
 *     cdef int* MLREP=(HS[0]).MLREP
 *     cdef CLayer* LR=(HS[0]).LR             # <<<<<<<<<<<<<<
 *     cdef int i,j
 *     cdef CLayer UpperLayer, LowerLayer
 */
  __pyx_t_4 = (__pyx_v_HS[0]).LR;
  __pyx_v_LR = __pyx_t_4;

  /* "MOKE_polar.pyx":651
 *     cdef rMemory* Mempointer2
 * 
 *     cdef int ML_is_diagonal=1             # <<<<<<<<<<<<<<
 * 
 *     cdef double complex r[2][2]
 */
  __pyx_v_ML_is_diagonal = 1;

  /* "MOKE_polar.pyx":672
 *     cdef double product, product2, absevmax1, absevmax2
 *     cdef double normalizator
 *     p[0][1]=0             # <<<<<<<<<<<<<<
 *     p[1][0]=0
 *    # print "0"
 */
  ((__pyx_v_p[0])[1]) = __pyx_t_double_complex_from_parts(0, 0);

  /* "MOKE_polar.pyx":673
 *     cdef double normalizator
 *     p[0][1]=0
 *     p[1][0]=0             # <<<<<<<<<<<<<<
 *    # print "0"
 *    # cdef double complex test=LR[MLCOMP[0][0]].ey
 */
  ((__pyx_v_p[1])[0]) = __pyx_t_double_complex_from_parts(0, 0);

  /* "MOKE_polar.pyx":677
 *    # cdef double complex test=LR[MLCOMP[0][0]].ey
 * 
 *     cdef int Cap=NLAYERS-1             # <<<<<<<<<<<<<<
 *     LowerLayer=LR[MLCOMP[0][0]]
 * 
 */
  __pyx_v_Cap = (__pyx_v_NLAYERS - 1);

  /* "MOKE_polar.pyx":678
 * 
 *     cdef int Cap=NLAYERS-1
 *     LowerLayer=LR[MLCOMP[0][0]]             # <<<<<<<<<<<<<<
 * 
 *     if(LowerLayer.magdir):
 */
  __pyx_v_LowerLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[0])[0])]);

  /* "MOKE_polar.pyx":680
 *     LowerLayer=LR[MLCOMP[0][0]]
 * 
 *     if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 * 
 *         Fill_rMemory_z(&Memory1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)
 */
  __pyx_t_5 = (__pyx_v_LowerLayer.magdir != 0);
  if (__pyx_t_5) {

    /* "MOKE_polar.pyx":682
 *     if(LowerLayer.magdir):
 * 
 *         Fill_rMemory_z(&Memory1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)             # <<<<<<<<<<<<<<
 *     else:
 *         Memory1.epsy=1.0+LowerLayer.cy
 */
    __pyx_f_10MOKE_polar_Fill_rMemory_z((&__pyx_v_Memory1), __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg);

    /* "MOKE_polar.pyx":680
 *     LowerLayer=LR[MLCOMP[0][0]]
 * 
 *     if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 * 
 *         Fill_rMemory_z(&Memory1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)
 */
    goto __pyx_L3;
  }

  /* "MOKE_polar.pyx":684
 *         Fill_rMemory_z(&Memory1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)
 *     else:
 *         Memory1.epsy=1.0+LowerLayer.cy             # <<<<<<<<<<<<<<
 *         Memory1.epsz=1.0+LowerLayer.cz
 *         Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)
 */
  /*else*/ {
    __pyx_v_Memory1.epsy = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1.0, 0), __pyx_v_LowerLayer.cy);

    /* "MOKE_polar.pyx":685
 *     else:
 *         Memory1.epsy=1.0+LowerLayer.cy
 *         Memory1.epsz=1.0+LowerLayer.cz             # <<<<<<<<<<<<<<
 *         Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)
 *         Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)
 */
    __pyx_v_Memory1.epsz = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1.0, 0), __pyx_v_LowerLayer.cz);

    /* "MOKE_polar.pyx":686
 *         Memory1.epsy=1.0+LowerLayer.cy
 *         Memory1.epsz=1.0+LowerLayer.cz
 *         Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)             # <<<<<<<<<<<<<<
 *         Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)
 * 
 */
    __pyx_v_Memory1.vz1 = sqrt(__Pyx_c_diff_double(__Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_LowerLayer.cx), __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0)));

    /* "MOKE_polar.pyx":687
 *         Memory1.epsz=1.0+LowerLayer.cz
 *         Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)
 *         Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)             # <<<<<<<<<<<<<<
 * 
 *     if(NLAYERS==1):
 */
    __pyx_t_6 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_Memory1.epsz))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 687, __pyx_L1_error)
    }
    __pyx_v_Memory1.vz2 = sqrt(__Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1., 0), __Pyx_c_quot_double(__pyx_t_6, __pyx_v_Memory1.epsz)), __pyx_v_Memory1.epsy));
  }
  __pyx_L3:;

  /* "MOKE_polar.pyx":689
 *         Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)
 * 
 *     if(NLAYERS==1):             # <<<<<<<<<<<<<<
 *         Calculate_rt_z(&Memory1, &Memory2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0, 0, 0, 0, \
 *                     LowerLayer.magdir, 0, rtot, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 */
  __pyx_t_5 = ((__pyx_v_NLAYERS == 1) != 0);
  if (__pyx_t_5) {

    /* "MOKE_polar.pyx":690
 * 
 *     if(NLAYERS==1):
 *         Calculate_rt_z(&Memory1, &Memory2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0, 0, 0, 0, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, 0, rtot, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *     else:
 */
    __pyx_f_10MOKE_polar_Calculate_rt_z((&__pyx_v_Memory1), (&__pyx_v_Memory2), __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_v_LowerLayer.magdir, 0, __pyx_v_rtot, (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

    /* "MOKE_polar.pyx":689
 *         Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)
 * 
 *     if(NLAYERS==1):             # <<<<<<<<<<<<<<
 *         Calculate_rt_z(&Memory1, &Memory2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0, 0, 0, 0, \
 *                     LowerLayer.magdir, 0, rtot, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 */
    goto __pyx_L4;
  }

  /* "MOKE_polar.pyx":694
 *     else:
 * 
 *         UpperLayer=LR[MLCOMP[1][0]]             # <<<<<<<<<<<<<<
 *         Calculate_rt_z(&Memory1, &Memory2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, rtot, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 */
  /*else*/ {
    __pyx_v_UpperLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[1])[0])]);

    /* "MOKE_polar.pyx":695
 * 
 *         UpperLayer=LR[MLCOMP[1][0]]
 *         Calculate_rt_z(&Memory1, &Memory2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, UpperLayer.magdir, rtot, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *         Memory1.IsFilled=0
 */
    __pyx_f_10MOKE_polar_Calculate_rt_z((&__pyx_v_Memory1), (&__pyx_v_Memory2), __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_v_UpperLayer.cx, __pyx_v_UpperLayer.cy, __pyx_v_UpperLayer.cz, __pyx_v_UpperLayer.cg, __pyx_v_LowerLayer.magdir, __pyx_v_UpperLayer.magdir, __pyx_v_rtot, (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

    /* "MOKE_polar.pyx":697
 *         Calculate_rt_z(&Memory1, &Memory2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, rtot, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *         Memory1.IsFilled=0             # <<<<<<<<<<<<<<
 *         p[0][0]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz1)
 *         p[1][1]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz2)
 */
    __pyx_v_Memory1.IsFilled = 0;

    /* "MOKE_polar.pyx":698
 *                     LowerLayer.magdir, UpperLayer.magdir, rtot, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *         Memory1.IsFilled=0
 *         p[0][0]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz1)             # <<<<<<<<<<<<<<
 *         p[1][1]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz2)
 *     i=1
 */
    ((__pyx_v_p[0])[0]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), __pyx_v_Memory2.vz1));

    /* "MOKE_polar.pyx":699
 *         Memory1.IsFilled=0
 *         p[0][0]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz1)
 *         p[1][1]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz2)             # <<<<<<<<<<<<<<
 *     i=1
 *     while i<NLAYERS:
 */
    ((__pyx_v_p[1])[1]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), __pyx_v_Memory2.vz2));
  }
  __pyx_L4:;

  /* "MOKE_polar.pyx":700
 *         p[0][0]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz1)
 *         p[1][1]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz2)
 *     i=1             # <<<<<<<<<<<<<<
 *     while i<NLAYERS:
 *        # print "loop start", i
 */
  __pyx_v_i = 1;

  /* "MOKE_polar.pyx":701
 *         p[1][1]=exp(1j*k0*UpperLayer.Thickness*Memory2.vz2)
 *     i=1
 *     while i<NLAYERS:             # <<<<<<<<<<<<<<
 *        # print "loop start", i
 *         if(MLLENGTH[i]==1):
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_i < __pyx_v_NLAYERS) != 0);
    if (!__pyx_t_5) break;

    /* "MOKE_polar.pyx":703
 *     while i<NLAYERS:
 *        # print "loop start", i
 *         if(MLLENGTH[i]==1):             # <<<<<<<<<<<<<<
 * 
 *             if(Memory1.IsFilled):
 */
    __pyx_t_5 = (((__pyx_v_MLLENGTH[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_5) {

      /* "MOKE_polar.pyx":705
 *         if(MLLENGTH[i]==1):
 * 
 *             if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                 Mempointer1=&Memory1
 *                 Mempointer2=&Memory2
 */
      __pyx_t_5 = (__pyx_v_Memory1.IsFilled != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":706
 * 
 *             if(Memory1.IsFilled):
 *                 Mempointer1=&Memory1             # <<<<<<<<<<<<<<
 *                 Mempointer2=&Memory2
 *             else:
 */
        __pyx_v_Mempointer1 = (&__pyx_v_Memory1);

        /* "MOKE_polar.pyx":707
 *             if(Memory1.IsFilled):
 *                 Mempointer1=&Memory1
 *                 Mempointer2=&Memory2             # <<<<<<<<<<<<<<
 *             else:
 *                 Mempointer2=&Memory1
 */
        __pyx_v_Mempointer2 = (&__pyx_v_Memory2);

        /* "MOKE_polar.pyx":705
 *         if(MLLENGTH[i]==1):
 * 
 *             if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                 Mempointer1=&Memory1
 *                 Mempointer2=&Memory2
 */
        goto __pyx_L8;
      }

      /* "MOKE_polar.pyx":709
 *                 Mempointer2=&Memory2
 *             else:
 *                 Mempointer2=&Memory1             # <<<<<<<<<<<<<<
 *                 Mempointer1=&Memory2
 *             LowerLayer=LR[MLCOMP[i][0]]
 */
      /*else*/ {
        __pyx_v_Mempointer2 = (&__pyx_v_Memory1);

        /* "MOKE_polar.pyx":710
 *             else:
 *                 Mempointer2=&Memory1
 *                 Mempointer1=&Memory2             # <<<<<<<<<<<<<<
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             if(i!=Cap):
 */
        __pyx_v_Mempointer1 = (&__pyx_v_Memory2);
      }
      __pyx_L8:;

      /* "MOKE_polar.pyx":711
 *                 Mempointer2=&Memory1
 *                 Mempointer1=&Memory2
 *             LowerLayer=LR[MLCOMP[i][0]]             # <<<<<<<<<<<<<<
 *             if(i!=Cap):
 *                 #Upper=MLCOMP[i+1][0]
 */
      __pyx_v_LowerLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[0])]);

      /* "MOKE_polar.pyx":712
 *                 Mempointer1=&Memory2
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             if(i!=Cap):             # <<<<<<<<<<<<<<
 *                 #Upper=MLCOMP[i+1][0]
 *                 UpperLayer=LR[MLCOMP[i+1][0]]
 */
      __pyx_t_5 = ((__pyx_v_i != __pyx_v_Cap) != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":714
 *             if(i!=Cap):
 *                 #Upper=MLCOMP[i+1][0]
 *                 UpperLayer=LR[MLCOMP[i+1][0]]             # <<<<<<<<<<<<<<
 *                # print "i, Upper", i, Upper
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 */
        __pyx_v_UpperLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[(__pyx_v_i + 1)])[0])]);

        /* "MOKE_polar.pyx":716
 *                 UpperLayer=LR[MLCOMP[i+1][0]]
 *                # print "i, Upper", i, Upper
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0
 */
        __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_v_UpperLayer.cx, __pyx_v_UpperLayer.cy, __pyx_v_UpperLayer.cz, __pyx_v_UpperLayer.cg, __pyx_v_LowerLayer.magdir, __pyx_v_UpperLayer.magdir, (&__pyx_v_r), (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

        /* "MOKE_polar.pyx":718
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0             # <<<<<<<<<<<<<<
 *             else:
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0,0,0,0, \
 */
        (__pyx_v_Mempointer1[0]).IsFilled = 0;

        /* "MOKE_polar.pyx":712
 *                 Mempointer1=&Memory2
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             if(i!=Cap):             # <<<<<<<<<<<<<<
 *                 #Upper=MLCOMP[i+1][0]
 *                 UpperLayer=LR[MLCOMP[i+1][0]]
 */
        goto __pyx_L9;
      }

      /* "MOKE_polar.pyx":720
 *                 (Mempointer1[0]).IsFilled=0
 *             else:
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0,0,0,0, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, 0, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 * 
 */
      /*else*/ {

        /* "MOKE_polar.pyx":721
 *             else:
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0,0,0,0, \
 *                     LowerLayer.magdir, 0, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)             # <<<<<<<<<<<<<<
 * 
 *             FillC0(&C0, &rprime, rtot, &p)
 */
        __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_v_LowerLayer.magdir, 0, (&__pyx_v_r), (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);
      }
      __pyx_L9:;

      /* "MOKE_polar.pyx":723
 *                     LowerLayer.magdir, 0, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 * 
 *             FillC0(&C0, &rprime, rtot, &p)             # <<<<<<<<<<<<<<
 * 
 *             Mult2x2_rightside(&p, rtot)
 */
      __pyx_f_33Multilayer_Functions_Reflectivity_FillC0((&__pyx_v_C0), (&__pyx_v_rprime), __pyx_v_rtot, (&__pyx_v_p));

      /* "MOKE_polar.pyx":725
 *             FillC0(&C0, &rprime, rtot, &p)
 * 
 *             Mult2x2_rightside(&p, rtot)             # <<<<<<<<<<<<<<
 * 
 *             Mult2x2_leftside(rtot, &p)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), __pyx_v_rtot);

      /* "MOKE_polar.pyx":727
 *             Mult2x2_rightside(&p, rtot)
 * 
 *             Mult2x2_leftside(rtot, &p)             # <<<<<<<<<<<<<<
 * 
 *             Mult2x2_rightside(&tprime, rtot)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_p));

      /* "MOKE_polar.pyx":729
 *             Mult2x2_leftside(rtot, &p)
 * 
 *             Mult2x2_rightside(&tprime, rtot)             # <<<<<<<<<<<<<<
 * 
 *             Mult2x2_leftside(rtot, &C0)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_tprime), __pyx_v_rtot);

      /* "MOKE_polar.pyx":731
 *             Mult2x2_rightside(&tprime, rtot)
 * 
 *             Mult2x2_leftside(rtot, &C0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_C0));

      /* "MOKE_polar.pyx":734
 * 
 * 
 *             Mult2x2_leftside(rtot, &t)             # <<<<<<<<<<<<<<
 * 
 *             (rtot[0])[0][0]+=r[0][0]
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_t));

      /* "MOKE_polar.pyx":736
 *             Mult2x2_leftside(rtot, &t)
 * 
 *             (rtot[0])[0][0]+=r[0][0]             # <<<<<<<<<<<<<<
 *             (rtot[0])[1][0]+=r[1][0]
 *             (rtot[0])[0][1]+=r[0][1]
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[0])[0]));

      /* "MOKE_polar.pyx":737
 * 
 *             (rtot[0])[0][0]+=r[0][0]
 *             (rtot[0])[1][0]+=r[1][0]             # <<<<<<<<<<<<<<
 *             (rtot[0])[0][1]+=r[0][1]
 *             (rtot[0])[1][1]+=r[1][1]
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 1;
      __pyx_t_9 = 0;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[1])[0]));

      /* "MOKE_polar.pyx":738
 *             (rtot[0])[0][0]+=r[0][0]
 *             (rtot[0])[1][0]+=r[1][0]
 *             (rtot[0])[0][1]+=r[0][1]             # <<<<<<<<<<<<<<
 *             (rtot[0])[1][1]+=r[1][1]
 * 
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 1;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[0])[1]));

      /* "MOKE_polar.pyx":739
 *             (rtot[0])[1][0]+=r[1][0]
 *             (rtot[0])[0][1]+=r[0][1]
 *             (rtot[0])[1][1]+=r[1][1]             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 1;
      __pyx_t_9 = 1;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[1])[1]));

      /* "MOKE_polar.pyx":742
 * 
 * 
 *             if(i!=Cap):             # <<<<<<<<<<<<<<
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 */
      __pyx_t_5 = ((__pyx_v_i != __pyx_v_Cap) != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":743
 * 
 *             if(i!=Cap):
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)             # <<<<<<<<<<<<<<
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 *         else: #Multilayer
 */
        ((__pyx_v_p[0])[0]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz1));

        /* "MOKE_polar.pyx":744
 *             if(i!=Cap):
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)             # <<<<<<<<<<<<<<
 *         else: #Multilayer
 *             LowerLayer=LR[MLCOMP[i][0]]
 */
        ((__pyx_v_p[1])[1]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz2));

        /* "MOKE_polar.pyx":742
 * 
 * 
 *             if(i!=Cap):             # <<<<<<<<<<<<<<
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 */
      }

      /* "MOKE_polar.pyx":703
 *     while i<NLAYERS:
 *        # print "loop start", i
 *         if(MLLENGTH[i]==1):             # <<<<<<<<<<<<<<
 * 
 *             if(Memory1.IsFilled):
 */
      goto __pyx_L7;
    }

    /* "MOKE_polar.pyx":746
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 *         else: #Multilayer
 *             LowerLayer=LR[MLCOMP[i][0]]             # <<<<<<<<<<<<<<
 *             UpperLayer=LR[MLCOMP[i][1]]
 *             if(Memory1.IsFilled):
 */
    /*else*/ {
      __pyx_v_LowerLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[0])]);

      /* "MOKE_polar.pyx":747
 *         else: #Multilayer
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             UpperLayer=LR[MLCOMP[i][1]]             # <<<<<<<<<<<<<<
 *             if(Memory1.IsFilled):
 *                 Mempointer1=&Memory1
 */
      __pyx_v_UpperLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[1])]);

      /* "MOKE_polar.pyx":748
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             UpperLayer=LR[MLCOMP[i][1]]
 *             if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                 Mempointer1=&Memory1
 *                 Mempointer2=&Memory2
 */
      __pyx_t_5 = (__pyx_v_Memory1.IsFilled != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":749
 *             UpperLayer=LR[MLCOMP[i][1]]
 *             if(Memory1.IsFilled):
 *                 Mempointer1=&Memory1             # <<<<<<<<<<<<<<
 *                 Mempointer2=&Memory2
 *             else:
 */
        __pyx_v_Mempointer1 = (&__pyx_v_Memory1);

        /* "MOKE_polar.pyx":750
 *             if(Memory1.IsFilled):
 *                 Mempointer1=&Memory1
 *                 Mempointer2=&Memory2             # <<<<<<<<<<<<<<
 *             else:
 *                 Mempointer2=&Memory1
 */
        __pyx_v_Mempointer2 = (&__pyx_v_Memory2);

        /* "MOKE_polar.pyx":748
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             UpperLayer=LR[MLCOMP[i][1]]
 *             if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                 Mempointer1=&Memory1
 *                 Mempointer2=&Memory2
 */
        goto __pyx_L11;
      }

      /* "MOKE_polar.pyx":752
 *                 Mempointer2=&Memory2
 *             else:
 *                 Mempointer2=&Memory1             # <<<<<<<<<<<<<<
 *                 Mempointer1=&Memory2
 * 
 */
      /*else*/ {
        __pyx_v_Mempointer2 = (&__pyx_v_Memory1);

        /* "MOKE_polar.pyx":753
 *             else:
 *                 Mempointer2=&Memory1
 *                 Mempointer1=&Memory2             # <<<<<<<<<<<<<<
 * 
 *             Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 */
        __pyx_v_Mempointer1 = (&__pyx_v_Memory2);
      }
      __pyx_L11:;

      /* "MOKE_polar.pyx":755
 *                 Mempointer1=&Memory2
 * 
 *             Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, UpperLayer.magdir, &r_ML_in_1, &rprime, &t_ML_in_1, &t_ML_back_1, LowerLayer.Roughness, k0)
 * 
 */
      __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_v_UpperLayer.cx, __pyx_v_UpperLayer.cy, __pyx_v_UpperLayer.cz, __pyx_v_UpperLayer.cg, __pyx_v_LowerLayer.magdir, __pyx_v_UpperLayer.magdir, (&__pyx_v_r_ML_in_1), (&__pyx_v_rprime), (&__pyx_v_t_ML_in_1), (&__pyx_v_t_ML_back_1), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

      /* "MOKE_polar.pyx":760
 * 
 * 
 *             (Mempointer1[0]).IsFilled=0             # <<<<<<<<<<<<<<
 *             if(LowerLayer.magdir):
 *                 ML_is_diagonal=0
 */
      (__pyx_v_Mempointer1[0]).IsFilled = 0;

      /* "MOKE_polar.pyx":761
 * 
 *             (Mempointer1[0]).IsFilled=0
 *             if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 *                 ML_is_diagonal=0
 * 
 */
      __pyx_t_5 = (__pyx_v_LowerLayer.magdir != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":762
 *             (Mempointer1[0]).IsFilled=0
 *             if(LowerLayer.magdir):
 *                 ML_is_diagonal=0             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_v_ML_is_diagonal = 0;

        /* "MOKE_polar.pyx":761
 * 
 *             (Mempointer1[0]).IsFilled=0
 *             if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 *                 ML_is_diagonal=0
 * 
 */
      }

      /* "MOKE_polar.pyx":765
 * 
 * 
 *             Mult2x2_leftside(&t_ML_back_1, &p) # t'(AB)*p(A)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_t_ML_back_1), (&__pyx_v_p));

      /* "MOKE_polar.pyx":768
 * 
 * 
 *             p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)             # <<<<<<<<<<<<<<
 *             p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 * 
 */
      ((__pyx_v_p[0])[0]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz1));

      /* "MOKE_polar.pyx":769
 * 
 *             p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *             p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)             # <<<<<<<<<<<<<<
 * 
 *             j=1
 */
      ((__pyx_v_p[1])[1]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz2));

      /* "MOKE_polar.pyx":771
 *             p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 * 
 *             j=1             # <<<<<<<<<<<<<<
 *             while j<MLLENGTH[i]:
 *                # Upper=MLCOMP[i][(j+1)%MLLENGTH[i]]
 */
      __pyx_v_j = 1;

      /* "MOKE_polar.pyx":772
 * 
 *             j=1
 *             while j<MLLENGTH[i]:             # <<<<<<<<<<<<<<
 *                # Upper=MLCOMP[i][(j+1)%MLLENGTH[i]]
 * 
 */
      while (1) {
        __pyx_t_5 = ((__pyx_v_j < (__pyx_v_MLLENGTH[__pyx_v_i])) != 0);
        if (!__pyx_t_5) break;

        /* "MOKE_polar.pyx":777
 * 
 * 
 *                 UpperLayer=LR[ MLCOMP[i][(j+1)%MLLENGTH[i]] ]             # <<<<<<<<<<<<<<
 *                 LowerLayer=LR[ MLCOMP[i][j] ]
 *                 if(LowerLayer.magdir):
 */
        __pyx_t_7 = (__pyx_v_j + 1);
        if (unlikely((__pyx_v_MLLENGTH[__pyx_v_i]) == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          __PYX_ERR(0, 777, __pyx_L1_error)
        }
        __pyx_v_UpperLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[__Pyx_mod_long(__pyx_t_7, (__pyx_v_MLLENGTH[__pyx_v_i]))])]);

        /* "MOKE_polar.pyx":778
 * 
 *                 UpperLayer=LR[ MLCOMP[i][(j+1)%MLLENGTH[i]] ]
 *                 LowerLayer=LR[ MLCOMP[i][j] ]             # <<<<<<<<<<<<<<
 *                 if(LowerLayer.magdir):
 *                     ML_is_diagonal=0
 */
        __pyx_v_LowerLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[__pyx_v_j])]);

        /* "MOKE_polar.pyx":779
 *                 UpperLayer=LR[ MLCOMP[i][(j+1)%MLLENGTH[i]] ]
 *                 LowerLayer=LR[ MLCOMP[i][j] ]
 *                 if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 *                     ML_is_diagonal=0
 *                 if(Memory1.IsFilled):
 */
        __pyx_t_5 = (__pyx_v_LowerLayer.magdir != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":780
 *                 LowerLayer=LR[ MLCOMP[i][j] ]
 *                 if(LowerLayer.magdir):
 *                     ML_is_diagonal=0             # <<<<<<<<<<<<<<
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 */
          __pyx_v_ML_is_diagonal = 0;

          /* "MOKE_polar.pyx":779
 *                 UpperLayer=LR[ MLCOMP[i][(j+1)%MLLENGTH[i]] ]
 *                 LowerLayer=LR[ MLCOMP[i][j] ]
 *                 if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 *                     ML_is_diagonal=0
 *                 if(Memory1.IsFilled):
 */
        }

        /* "MOKE_polar.pyx":781
 *                 if(LowerLayer.magdir):
 *                     ML_is_diagonal=0
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
        __pyx_t_5 = (__pyx_v_Memory1.IsFilled != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":782
 *                     ML_is_diagonal=0
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer2=&Memory2
 *                 else:
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":783
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2             # <<<<<<<<<<<<<<
 *                 else:
 *                     Mempointer2=&Memory1
 */
          __pyx_v_Mempointer2 = (&__pyx_v_Memory2);

          /* "MOKE_polar.pyx":781
 *                 if(LowerLayer.magdir):
 *                     ML_is_diagonal=0
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
          goto __pyx_L16;
        }

        /* "MOKE_polar.pyx":785
 *                     Mempointer2=&Memory2
 *                 else:
 *                     Mempointer2=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory2
 * 
 */
        /*else*/ {
          __pyx_v_Mempointer2 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":786
 *                 else:
 *                     Mempointer2=&Memory1
 *                     Mempointer1=&Memory2             # <<<<<<<<<<<<<<
 * 
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory2);
        }
        __pyx_L16:;

        /* "MOKE_polar.pyx":788
 *                     Mempointer1=&Memory2
 * 
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0
 */
        __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_v_UpperLayer.cx, __pyx_v_UpperLayer.cy, __pyx_v_UpperLayer.cz, __pyx_v_UpperLayer.cg, __pyx_v_LowerLayer.magdir, __pyx_v_UpperLayer.magdir, (&__pyx_v_r), (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

        /* "MOKE_polar.pyx":790
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0             # <<<<<<<<<<<<<<
 *              #   print "2", vz1, vz2, vz3, vz4
 *                 FillC0(&C0, &rprime, &r_ML_in_1, &p)
 */
        (__pyx_v_Mempointer1[0]).IsFilled = 0;

        /* "MOKE_polar.pyx":792
 *                 (Mempointer1[0]).IsFilled=0
 *              #   print "2", vz1, vz2, vz3, vz4
 *                 FillC0(&C0, &rprime, &r_ML_in_1, &p)             # <<<<<<<<<<<<<<
 *                 FillC0(&C1, &r_ML_in_1, &rprime, &p)
 *                 Mult2x2_rightside(&p, &r_ML_in_1) #p_B r p_B and so on
 */
        __pyx_f_33Multilayer_Functions_Reflectivity_FillC0((&__pyx_v_C0), (&__pyx_v_rprime), (&__pyx_v_r_ML_in_1), (&__pyx_v_p));

        /* "MOKE_polar.pyx":793
 *              #   print "2", vz1, vz2, vz3, vz4
 *                 FillC0(&C0, &rprime, &r_ML_in_1, &p)
 *                 FillC0(&C1, &r_ML_in_1, &rprime, &p)             # <<<<<<<<<<<<<<
 *                 Mult2x2_rightside(&p, &r_ML_in_1) #p_B r p_B and so on
 * 
 */
        __pyx_f_33Multilayer_Functions_Reflectivity_FillC0((&__pyx_v_C1), (&__pyx_v_r_ML_in_1), (&__pyx_v_rprime), (&__pyx_v_p));

        /* "MOKE_polar.pyx":794
 *                 FillC0(&C0, &rprime, &r_ML_in_1, &p)
 *                 FillC0(&C1, &r_ML_in_1, &rprime, &p)
 *                 Mult2x2_rightside(&p, &r_ML_in_1) #p_B r p_B and so on             # <<<<<<<<<<<<<<
 * 
 *                 Mult2x2_leftside(&r_ML_in_1, &p)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), (&__pyx_v_r_ML_in_1));

        /* "MOKE_polar.pyx":796
 *                 Mult2x2_rightside(&p, &r_ML_in_1) #p_B r p_B and so on
 * 
 *                 Mult2x2_leftside(&r_ML_in_1, &p)             # <<<<<<<<<<<<<<
 * 
 *                 Mult2x2_rightside(&tprime, &r_ML_in_1) #t' p_B r p_b t and so on
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_r_ML_in_1), (&__pyx_v_p));

        /* "MOKE_polar.pyx":798
 *                 Mult2x2_leftside(&r_ML_in_1, &p)
 * 
 *                 Mult2x2_rightside(&tprime, &r_ML_in_1) #t' p_B r p_b t and so on             # <<<<<<<<<<<<<<
 *                 Mult2x2_leftside(&r_ML_in_1, &C0)
 *                 Mult2x2_leftside(&r_ML_in_1, &t)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_tprime), (&__pyx_v_r_ML_in_1));

        /* "MOKE_polar.pyx":799
 * 
 *                 Mult2x2_rightside(&tprime, &r_ML_in_1) #t' p_B r p_b t and so on
 *                 Mult2x2_leftside(&r_ML_in_1, &C0)             # <<<<<<<<<<<<<<
 *                 Mult2x2_leftside(&r_ML_in_1, &t)
 * 
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_r_ML_in_1), (&__pyx_v_C0));

        /* "MOKE_polar.pyx":800
 *                 Mult2x2_rightside(&tprime, &r_ML_in_1) #t' p_B r p_b t and so on
 *                 Mult2x2_leftside(&r_ML_in_1, &C0)
 *                 Mult2x2_leftside(&r_ML_in_1, &t)             # <<<<<<<<<<<<<<
 * 
 *                 r_ML_in_1[0][0]+=r[0][0]
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_r_ML_in_1), (&__pyx_v_t));

        /* "MOKE_polar.pyx":802
 *                 Mult2x2_leftside(&r_ML_in_1, &t)
 * 
 *                 r_ML_in_1[0][0]+=r[0][0]             # <<<<<<<<<<<<<<
 *                 r_ML_in_1[1][0]+=r[1][0]
 *                 r_ML_in_1[0][1]+=r[0][1]
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        ((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_sum_double(((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_r[0])[0]));

        /* "MOKE_polar.pyx":803
 * 
 *                 r_ML_in_1[0][0]+=r[0][0]
 *                 r_ML_in_1[1][0]+=r[1][0]             # <<<<<<<<<<<<<<
 *                 r_ML_in_1[0][1]+=r[0][1]
 *                 r_ML_in_1[1][1]+=r[1][1]
 */
        __pyx_t_7 = 1;
        __pyx_t_8 = 0;
        ((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_sum_double(((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_r[1])[0]));

        /* "MOKE_polar.pyx":804
 *                 r_ML_in_1[0][0]+=r[0][0]
 *                 r_ML_in_1[1][0]+=r[1][0]
 *                 r_ML_in_1[0][1]+=r[0][1]             # <<<<<<<<<<<<<<
 *                 r_ML_in_1[1][1]+=r[1][1]
 * 
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 1;
        ((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_sum_double(((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_r[0])[1]));

        /* "MOKE_polar.pyx":805
 *                 r_ML_in_1[1][0]+=r[1][0]
 *                 r_ML_in_1[0][1]+=r[0][1]
 *                 r_ML_in_1[1][1]+=r[1][1]             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_7 = 1;
        __pyx_t_8 = 1;
        ((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_sum_double(((__pyx_v_r_ML_in_1[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_r[1])[1]));

        /* "MOKE_polar.pyx":809
 * 
 * 
 *                 Mult2x2_rightside(&C1, &t_ML_back_1)             # <<<<<<<<<<<<<<
 *                 Mult2x2_rightside(&p, &t_ML_back_1)
 *                # Mult2x2_leftside(&t_ML_in_1, &t) # p(A) * t(AB) p_B t(BC) and so on #this comes later now
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_C1), (&__pyx_v_t_ML_back_1));

        /* "MOKE_polar.pyx":810
 * 
 *                 Mult2x2_rightside(&C1, &t_ML_back_1)
 *                 Mult2x2_rightside(&p, &t_ML_back_1)             # <<<<<<<<<<<<<<
 *                # Mult2x2_leftside(&t_ML_in_1, &t) # p(A) * t(AB) p_B t(BC) and so on #this comes later now
 *                 Mult2x2_rightside(&tprime, &t_ML_back_1)# t'(BC) p_B t'(AB)*p(A) and so on
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), (&__pyx_v_t_ML_back_1));

        /* "MOKE_polar.pyx":812
 *                 Mult2x2_rightside(&p, &t_ML_back_1)
 *                # Mult2x2_leftside(&t_ML_in_1, &t) # p(A) * t(AB) p_B t(BC) and so on #this comes later now
 *                 Mult2x2_rightside(&tprime, &t_ML_back_1)# t'(BC) p_B t'(AB)*p(A) and so on             # <<<<<<<<<<<<<<
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_tprime), (&__pyx_v_t_ML_back_1));

        /* "MOKE_polar.pyx":813
 *                # Mult2x2_leftside(&t_ML_in_1, &t) # p(A) * t(AB) p_B t(BC) and so on #this comes later now
 *                 Mult2x2_rightside(&tprime, &t_ML_back_1)# t'(BC) p_B t'(AB)*p(A) and so on
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)             # <<<<<<<<<<<<<<
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 *                 j=j+1
 */
        ((__pyx_v_p[0])[0]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz1));

        /* "MOKE_polar.pyx":814
 *                 Mult2x2_rightside(&tprime, &t_ML_back_1)# t'(BC) p_B t'(AB)*p(A) and so on
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)             # <<<<<<<<<<<<<<
 *                 j=j+1
 * 
 */
        ((__pyx_v_p[1])[1]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz2));

        /* "MOKE_polar.pyx":815
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 *                 j=j+1             # <<<<<<<<<<<<<<
 * 
 *             p[0][0]=exp(1j*k0*LowerLayer.Thickness*(Mempointer1[0]).vz1)
 */
        __pyx_v_j = (__pyx_v_j + 1);
      }

      /* "MOKE_polar.pyx":817
 *                 j=j+1
 * 
 *             p[0][0]=exp(1j*k0*LowerLayer.Thickness*(Mempointer1[0]).vz1)             # <<<<<<<<<<<<<<
 *             p[1][1]=exp(1j*k0*LowerLayer.Thickness*(Mempointer1[0]).vz2)
 *          #   print "p C components"
 */
      ((__pyx_v_p[0])[0]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_LowerLayer.Thickness, 0)), (__pyx_v_Mempointer1[0]).vz1));

      /* "MOKE_polar.pyx":818
 * 
 *             p[0][0]=exp(1j*k0*LowerLayer.Thickness*(Mempointer1[0]).vz1)
 *             p[1][1]=exp(1j*k0*LowerLayer.Thickness*(Mempointer1[0]).vz2)             # <<<<<<<<<<<<<<
 *          #   print "p C components"
 *          #   print MLLENGTH[i]-1, LR[MLCOMP[i][MLLENGTH[i]-1]].Thickness, vz1, vz2
 */
      ((__pyx_v_p[1])[1]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_LowerLayer.Thickness, 0)), (__pyx_v_Mempointer1[0]).vz2));

      /* "MOKE_polar.pyx":821
 *          #   print "p C components"
 *          #   print MLLENGTH[i]-1, LR[MLCOMP[i][MLLENGTH[i]-1]].Thickness, vz1, vz2
 *             r_ML_back_1[0][0]=rprime[0][0]             # <<<<<<<<<<<<<<
 *             r_ML_back_1[1][0]=rprime[1][0]
 *             r_ML_back_1[0][1]=rprime[0][1]
 */
      ((__pyx_v_r_ML_back_1[0])[0]) = ((__pyx_v_rprime[0])[0]);

      /* "MOKE_polar.pyx":822
 *          #   print MLLENGTH[i]-1, LR[MLCOMP[i][MLLENGTH[i]-1]].Thickness, vz1, vz2
 *             r_ML_back_1[0][0]=rprime[0][0]
 *             r_ML_back_1[1][0]=rprime[1][0]             # <<<<<<<<<<<<<<
 *             r_ML_back_1[0][1]=rprime[0][1]
 *             r_ML_back_1[1][1]=rprime[1][1]
 */
      ((__pyx_v_r_ML_back_1[1])[0]) = ((__pyx_v_rprime[1])[0]);

      /* "MOKE_polar.pyx":823
 *             r_ML_back_1[0][0]=rprime[0][0]
 *             r_ML_back_1[1][0]=rprime[1][0]
 *             r_ML_back_1[0][1]=rprime[0][1]             # <<<<<<<<<<<<<<
 *             r_ML_back_1[1][1]=rprime[1][1]
 *             t_ML_in_1[0][0]=t[0][0]
 */
      ((__pyx_v_r_ML_back_1[0])[1]) = ((__pyx_v_rprime[0])[1]);

      /* "MOKE_polar.pyx":824
 *             r_ML_back_1[1][0]=rprime[1][0]
 *             r_ML_back_1[0][1]=rprime[0][1]
 *             r_ML_back_1[1][1]=rprime[1][1]             # <<<<<<<<<<<<<<
 *             t_ML_in_1[0][0]=t[0][0]
 *             t_ML_in_1[0][1]=t[0][1]
 */
      ((__pyx_v_r_ML_back_1[1])[1]) = ((__pyx_v_rprime[1])[1]);

      /* "MOKE_polar.pyx":825
 *             r_ML_back_1[0][1]=rprime[0][1]
 *             r_ML_back_1[1][1]=rprime[1][1]
 *             t_ML_in_1[0][0]=t[0][0]             # <<<<<<<<<<<<<<
 *             t_ML_in_1[0][1]=t[0][1]
 *             t_ML_in_1[1][0]=t[1][0]
 */
      ((__pyx_v_t_ML_in_1[0])[0]) = ((__pyx_v_t[0])[0]);

      /* "MOKE_polar.pyx":826
 *             r_ML_back_1[1][1]=rprime[1][1]
 *             t_ML_in_1[0][0]=t[0][0]
 *             t_ML_in_1[0][1]=t[0][1]             # <<<<<<<<<<<<<<
 *             t_ML_in_1[1][0]=t[1][0]
 *             t_ML_in_1[1][1]=t[1][1]
 */
      ((__pyx_v_t_ML_in_1[0])[1]) = ((__pyx_v_t[0])[1]);

      /* "MOKE_polar.pyx":827
 *             t_ML_in_1[0][0]=t[0][0]
 *             t_ML_in_1[0][1]=t[0][1]
 *             t_ML_in_1[1][0]=t[1][0]             # <<<<<<<<<<<<<<
 *             t_ML_in_1[1][1]=t[1][1]
 *             Mult2x2_rightside(&p, &t_ML_in_1)
 */
      ((__pyx_v_t_ML_in_1[1])[0]) = ((__pyx_v_t[1])[0]);

      /* "MOKE_polar.pyx":828
 *             t_ML_in_1[0][1]=t[0][1]
 *             t_ML_in_1[1][0]=t[1][0]
 *             t_ML_in_1[1][1]=t[1][1]             # <<<<<<<<<<<<<<
 *             Mult2x2_rightside(&p, &t_ML_in_1)
 *          #   Mult2x2_leftside(&t_ML_in_1, &p)
 */
      ((__pyx_v_t_ML_in_1[1])[1]) = ((__pyx_v_t[1])[1]);

      /* "MOKE_polar.pyx":829
 *             t_ML_in_1[1][0]=t[1][0]
 *             t_ML_in_1[1][1]=t[1][1]
 *             Mult2x2_rightside(&p, &t_ML_in_1)             # <<<<<<<<<<<<<<
 *          #   Mult2x2_leftside(&t_ML_in_1, &p)
 *             j=MLLENGTH[i]-1
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), (&__pyx_v_t_ML_in_1));

      /* "MOKE_polar.pyx":831
 *             Mult2x2_rightside(&p, &t_ML_in_1)
 *          #   Mult2x2_leftside(&t_ML_in_1, &p)
 *             j=MLLENGTH[i]-1             # <<<<<<<<<<<<<<
 * #            if(wavelength<23):
 * #                if(th>4):
 */
      __pyx_v_j = ((__pyx_v_MLLENGTH[__pyx_v_i]) - 1);

      /* "MOKE_polar.pyx":837
 * #                        print("tml1\n",t_ML_in_1[1][1] )
 * 
 *             while j>0:             # <<<<<<<<<<<<<<
 *                 UpperLayer=LR[ MLCOMP[i][j] ]
 *                 LowerLayer=LR[ MLCOMP[i][j-1] ]
 */
      while (1) {
        __pyx_t_5 = ((__pyx_v_j > 0) != 0);
        if (!__pyx_t_5) break;

        /* "MOKE_polar.pyx":838
 * 
 *             while j>0:
 *                 UpperLayer=LR[ MLCOMP[i][j] ]             # <<<<<<<<<<<<<<
 *                 LowerLayer=LR[ MLCOMP[i][j-1] ]
 * 
 */
        __pyx_v_UpperLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[__pyx_v_j])]);

        /* "MOKE_polar.pyx":839
 *             while j>0:
 *                 UpperLayer=LR[ MLCOMP[i][j] ]
 *                 LowerLayer=LR[ MLCOMP[i][j-1] ]             # <<<<<<<<<<<<<<
 * 
 *                 Mempointer1=&Memory1
 */
        __pyx_v_LowerLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[(__pyx_v_j - 1)])]);

        /* "MOKE_polar.pyx":841
 *                 LowerLayer=LR[ MLCOMP[i][j-1] ]
 * 
 *                 Mempointer1=&Memory1             # <<<<<<<<<<<<<<
 *                 Mempointer2=&Memory2
 * 
 */
        __pyx_v_Mempointer1 = (&__pyx_v_Memory1);

        /* "MOKE_polar.pyx":842
 * 
 *                 Mempointer1=&Memory1
 *                 Mempointer2=&Memory2             # <<<<<<<<<<<<<<
 * 
 *                 if(LowerLayer.magdir):
 */
        __pyx_v_Mempointer2 = (&__pyx_v_Memory2);

        /* "MOKE_polar.pyx":844
 *                 Mempointer2=&Memory2
 * 
 *                 if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 * 
 *                     Fill_rMemory_z(Mempointer1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)
 */
        __pyx_t_5 = (__pyx_v_LowerLayer.magdir != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":846
 *                 if(LowerLayer.magdir):
 * 
 *                     Fill_rMemory_z(Mempointer1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)             # <<<<<<<<<<<<<<
 *                 else:
 *                     Memory1.epsy=1.0+LowerLayer.cy
 */
          __pyx_f_10MOKE_polar_Fill_rMemory_z(__pyx_v_Mempointer1, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg);

          /* "MOKE_polar.pyx":844
 *                 Mempointer2=&Memory2
 * 
 *                 if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 * 
 *                     Fill_rMemory_z(Mempointer1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)
 */
          goto __pyx_L19;
        }

        /* "MOKE_polar.pyx":848
 *                     Fill_rMemory_z(Mempointer1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)
 *                 else:
 *                     Memory1.epsy=1.0+LowerLayer.cy             # <<<<<<<<<<<<<<
 *                     Memory1.epsz=1.0+LowerLayer.cz
 *                     Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)
 */
        /*else*/ {
          __pyx_v_Memory1.epsy = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1.0, 0), __pyx_v_LowerLayer.cy);

          /* "MOKE_polar.pyx":849
 *                 else:
 *                     Memory1.epsy=1.0+LowerLayer.cy
 *                     Memory1.epsz=1.0+LowerLayer.cz             # <<<<<<<<<<<<<<
 *                     Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)
 *                     Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)
 */
          __pyx_v_Memory1.epsz = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1.0, 0), __pyx_v_LowerLayer.cz);

          /* "MOKE_polar.pyx":850
 *                     Memory1.epsy=1.0+LowerLayer.cy
 *                     Memory1.epsz=1.0+LowerLayer.cz
 *                     Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)             # <<<<<<<<<<<<<<
 *                     Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)
 * 
 */
          __pyx_v_Memory1.vz1 = sqrt(__Pyx_c_diff_double(__Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_LowerLayer.cx), __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0)));

          /* "MOKE_polar.pyx":851
 *                     Memory1.epsz=1.0+LowerLayer.cz
 *                     Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)
 *                     Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_t_6 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
          if (unlikely(__Pyx_c_is_zero_double(__pyx_v_Memory1.epsz))) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 851, __pyx_L1_error)
          }
          __pyx_v_Memory1.vz2 = sqrt(__Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1., 0), __Pyx_c_quot_double(__pyx_t_6, __pyx_v_Memory1.epsz)), __pyx_v_Memory1.epsy));
        }
        __pyx_L19:;

        /* "MOKE_polar.pyx":854
 * 
 * 
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0
 */
        __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_v_UpperLayer.cx, __pyx_v_UpperLayer.cy, __pyx_v_UpperLayer.cz, __pyx_v_UpperLayer.cg, __pyx_v_LowerLayer.magdir, __pyx_v_UpperLayer.magdir, (&__pyx_v_r), (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

        /* "MOKE_polar.pyx":856
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0             # <<<<<<<<<<<<<<
 * 
 * 
 */
        (__pyx_v_Mempointer1[0]).IsFilled = 0;

        /* "MOKE_polar.pyx":859
 * 
 * 
 *                 FillC0(&C0, &r, &r_ML_back_1, &p)             # <<<<<<<<<<<<<<
 *                # FillC0(&C1, &r_ML_back_1, &r, &p)
 *                 C1[0][0]=p[0][0]
 */
        __pyx_f_33Multilayer_Functions_Reflectivity_FillC0((&__pyx_v_C0), (&__pyx_v_r), (&__pyx_v_r_ML_back_1), (&__pyx_v_p));

        /* "MOKE_polar.pyx":861
 *                 FillC0(&C0, &r, &r_ML_back_1, &p)
 *                # FillC0(&C1, &r_ML_back_1, &r, &p)
 *                 C1[0][0]=p[0][0]             # <<<<<<<<<<<<<<
 *                 C1[1][0]=0
 *                 C1[0][1]=0
 */
        ((__pyx_v_C1[0])[0]) = ((__pyx_v_p[0])[0]);

        /* "MOKE_polar.pyx":862
 *                # FillC0(&C1, &r_ML_back_1, &r, &p)
 *                 C1[0][0]=p[0][0]
 *                 C1[1][0]=0             # <<<<<<<<<<<<<<
 *                 C1[0][1]=0
 *                 C1[1][1]=p[1][1]
 */
        ((__pyx_v_C1[1])[0]) = __pyx_t_double_complex_from_parts(0, 0);

        /* "MOKE_polar.pyx":863
 *                 C1[0][0]=p[0][0]
 *                 C1[1][0]=0
 *                 C1[0][1]=0             # <<<<<<<<<<<<<<
 *                 C1[1][1]=p[1][1]
 *                 Mult2x2_leftside(&C1, &r_ML_back_1)
 */
        ((__pyx_v_C1[0])[1]) = __pyx_t_double_complex_from_parts(0, 0);

        /* "MOKE_polar.pyx":864
 *                 C1[1][0]=0
 *                 C1[0][1]=0
 *                 C1[1][1]=p[1][1]             # <<<<<<<<<<<<<<
 *                 Mult2x2_leftside(&C1, &r_ML_back_1)
 *                 Mult2x2_leftside(&C1, &p)
 */
        ((__pyx_v_C1[1])[1]) = ((__pyx_v_p[1])[1]);

        /* "MOKE_polar.pyx":865
 *                 C1[0][1]=0
 *                 C1[1][1]=p[1][1]
 *                 Mult2x2_leftside(&C1, &r_ML_back_1)             # <<<<<<<<<<<<<<
 *                 Mult2x2_leftside(&C1, &p)
 *                 Mult2x2_leftside(&C1, &r)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_C1), (&__pyx_v_r_ML_back_1));

        /* "MOKE_polar.pyx":866
 *                 C1[1][1]=p[1][1]
 *                 Mult2x2_leftside(&C1, &r_ML_back_1)
 *                 Mult2x2_leftside(&C1, &p)             # <<<<<<<<<<<<<<
 *                 Mult2x2_leftside(&C1, &r)
 *                 C1[0][0]=1.-C1[0][0]
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_C1), (&__pyx_v_p));

        /* "MOKE_polar.pyx":867
 *                 Mult2x2_leftside(&C1, &r_ML_back_1)
 *                 Mult2x2_leftside(&C1, &p)
 *                 Mult2x2_leftside(&C1, &r)             # <<<<<<<<<<<<<<
 *                 C1[0][0]=1.-C1[0][0]
 *                 C1[1][0]=-C1[1][0]
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_C1), (&__pyx_v_r));

        /* "MOKE_polar.pyx":868
 *                 Mult2x2_leftside(&C1, &p)
 *                 Mult2x2_leftside(&C1, &r)
 *                 C1[0][0]=1.-C1[0][0]             # <<<<<<<<<<<<<<
 *                 C1[1][0]=-C1[1][0]
 *                 C1[0][1]=-C1[0][1]
 */
        ((__pyx_v_C1[0])[0]) = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1., 0), ((__pyx_v_C1[0])[0]));

        /* "MOKE_polar.pyx":869
 *                 Mult2x2_leftside(&C1, &r)
 *                 C1[0][0]=1.-C1[0][0]
 *                 C1[1][0]=-C1[1][0]             # <<<<<<<<<<<<<<
 *                 C1[0][1]=-C1[0][1]
 *                 C1[1][1]=1.-C1[1][1]
 */
        ((__pyx_v_C1[1])[0]) = __Pyx_c_neg_double(((__pyx_v_C1[1])[0]));

        /* "MOKE_polar.pyx":870
 *                 C1[0][0]=1.-C1[0][0]
 *                 C1[1][0]=-C1[1][0]
 *                 C1[0][1]=-C1[0][1]             # <<<<<<<<<<<<<<
 *                 C1[1][1]=1.-C1[1][1]
 *                 Invert2x2(&C1)
 */
        ((__pyx_v_C1[0])[1]) = __Pyx_c_neg_double(((__pyx_v_C1[0])[1]));

        /* "MOKE_polar.pyx":871
 *                 C1[1][0]=-C1[1][0]
 *                 C1[0][1]=-C1[0][1]
 *                 C1[1][1]=1.-C1[1][1]             # <<<<<<<<<<<<<<
 *                 Invert2x2(&C1)
 * 
 */
        ((__pyx_v_C1[1])[1]) = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1., 0), ((__pyx_v_C1[1])[1]));

        /* "MOKE_polar.pyx":872
 *                 C1[0][1]=-C1[0][1]
 *                 C1[1][1]=1.-C1[1][1]
 *                 Invert2x2(&C1)             # <<<<<<<<<<<<<<
 * 
 *                 Mult2x2_rightside(&p, &r_ML_back_1) #p_B r p_B and so on
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Invert2x2((&__pyx_v_C1));

        /* "MOKE_polar.pyx":874
 *                 Invert2x2(&C1)
 * 
 *                 Mult2x2_rightside(&p, &r_ML_back_1) #p_B r p_B and so on             # <<<<<<<<<<<<<<
 *                 Mult2x2_leftside(&r_ML_back_1, &p)
 *                 Mult2x2_rightside(&t, &r_ML_back_1)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), (&__pyx_v_r_ML_back_1));

        /* "MOKE_polar.pyx":875
 * 
 *                 Mult2x2_rightside(&p, &r_ML_back_1) #p_B r p_B and so on
 *                 Mult2x2_leftside(&r_ML_back_1, &p)             # <<<<<<<<<<<<<<
 *                 Mult2x2_rightside(&t, &r_ML_back_1)
 *                 Mult2x2_leftside(&r_ML_back_1, &C0)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_r_ML_back_1), (&__pyx_v_p));

        /* "MOKE_polar.pyx":876
 *                 Mult2x2_rightside(&p, &r_ML_back_1) #p_B r p_B and so on
 *                 Mult2x2_leftside(&r_ML_back_1, &p)
 *                 Mult2x2_rightside(&t, &r_ML_back_1)             # <<<<<<<<<<<<<<
 *                 Mult2x2_leftside(&r_ML_back_1, &C0)
 *                 Mult2x2_leftside(&r_ML_back_1, &tprime)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_t), (&__pyx_v_r_ML_back_1));

        /* "MOKE_polar.pyx":877
 *                 Mult2x2_leftside(&r_ML_back_1, &p)
 *                 Mult2x2_rightside(&t, &r_ML_back_1)
 *                 Mult2x2_leftside(&r_ML_back_1, &C0)             # <<<<<<<<<<<<<<
 *                 Mult2x2_leftside(&r_ML_back_1, &tprime)
 * 
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_r_ML_back_1), (&__pyx_v_C0));

        /* "MOKE_polar.pyx":878
 *                 Mult2x2_rightside(&t, &r_ML_back_1)
 *                 Mult2x2_leftside(&r_ML_back_1, &C0)
 *                 Mult2x2_leftside(&r_ML_back_1, &tprime)             # <<<<<<<<<<<<<<
 * 
 *                 r_ML_back_1[0][0]+=rprime[0][0]
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_r_ML_back_1), (&__pyx_v_tprime));

        /* "MOKE_polar.pyx":880
 *                 Mult2x2_leftside(&r_ML_back_1, &tprime)
 * 
 *                 r_ML_back_1[0][0]+=rprime[0][0]             # <<<<<<<<<<<<<<
 *                 r_ML_back_1[1][0]+=rprime[1][0]
 *                 r_ML_back_1[0][1]+=rprime[0][1]
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        ((__pyx_v_r_ML_back_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_sum_double(((__pyx_v_r_ML_back_1[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_rprime[0])[0]));

        /* "MOKE_polar.pyx":881
 * 
 *                 r_ML_back_1[0][0]+=rprime[0][0]
 *                 r_ML_back_1[1][0]+=rprime[1][0]             # <<<<<<<<<<<<<<
 *                 r_ML_back_1[0][1]+=rprime[0][1]
 *                 r_ML_back_1[1][1]+=rprime[1][1]
 */
        __pyx_t_7 = 1;
        __pyx_t_8 = 0;
        ((__pyx_v_r_ML_back_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_sum_double(((__pyx_v_r_ML_back_1[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_rprime[1])[0]));

        /* "MOKE_polar.pyx":882
 *                 r_ML_back_1[0][0]+=rprime[0][0]
 *                 r_ML_back_1[1][0]+=rprime[1][0]
 *                 r_ML_back_1[0][1]+=rprime[0][1]             # <<<<<<<<<<<<<<
 *                 r_ML_back_1[1][1]+=rprime[1][1]
 * 
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 1;
        ((__pyx_v_r_ML_back_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_sum_double(((__pyx_v_r_ML_back_1[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_rprime[0])[1]));

        /* "MOKE_polar.pyx":883
 *                 r_ML_back_1[1][0]+=rprime[1][0]
 *                 r_ML_back_1[0][1]+=rprime[0][1]
 *                 r_ML_back_1[1][1]+=rprime[1][1]             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_7 = 1;
        __pyx_t_8 = 1;
        ((__pyx_v_r_ML_back_1[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_sum_double(((__pyx_v_r_ML_back_1[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_rprime[1])[1]));

        /* "MOKE_polar.pyx":886
 * 
 * 
 *                 Mult2x2_rightside(&C1, &t_ML_in_1)             # <<<<<<<<<<<<<<
 *              #   Mult2x2_rightside(&p, &t_ML_in_1)
 *                 Mult2x2_rightside(&t, &t_ML_in_1)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_C1), (&__pyx_v_t_ML_in_1));

        /* "MOKE_polar.pyx":888
 *                 Mult2x2_rightside(&C1, &t_ML_in_1)
 *              #   Mult2x2_rightside(&p, &t_ML_in_1)
 *                 Mult2x2_rightside(&t, &t_ML_in_1)             # <<<<<<<<<<<<<<
 *                 p[0][0]=exp(1j*k0*LowerLayer.Thickness*(Mempointer1[0]).vz1)
 *                 p[1][1]=exp(1j*k0*LowerLayer.Thickness*(Mempointer1[0]).vz2)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_t), (&__pyx_v_t_ML_in_1));

        /* "MOKE_polar.pyx":889
 *              #   Mult2x2_rightside(&p, &t_ML_in_1)
 *                 Mult2x2_rightside(&t, &t_ML_in_1)
 *                 p[0][0]=exp(1j*k0*LowerLayer.Thickness*(Mempointer1[0]).vz1)             # <<<<<<<<<<<<<<
 *                 p[1][1]=exp(1j*k0*LowerLayer.Thickness*(Mempointer1[0]).vz2)
 * 
 */
        ((__pyx_v_p[0])[0]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_LowerLayer.Thickness, 0)), (__pyx_v_Mempointer1[0]).vz1));

        /* "MOKE_polar.pyx":890
 *                 Mult2x2_rightside(&t, &t_ML_in_1)
 *                 p[0][0]=exp(1j*k0*LowerLayer.Thickness*(Mempointer1[0]).vz1)
 *                 p[1][1]=exp(1j*k0*LowerLayer.Thickness*(Mempointer1[0]).vz2)             # <<<<<<<<<<<<<<
 * 
 *                 Mult2x2_rightside(&p, &t_ML_in_1)
 */
        ((__pyx_v_p[1])[1]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_LowerLayer.Thickness, 0)), (__pyx_v_Mempointer1[0]).vz2));

        /* "MOKE_polar.pyx":892
 *                 p[1][1]=exp(1j*k0*LowerLayer.Thickness*(Mempointer1[0]).vz2)
 * 
 *                 Mult2x2_rightside(&p, &t_ML_in_1)             # <<<<<<<<<<<<<<
 * 
 *                 j=j-1
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), (&__pyx_v_t_ML_in_1));

        /* "MOKE_polar.pyx":894
 *                 Mult2x2_rightside(&p, &t_ML_in_1)
 * 
 *                 j=j-1             # <<<<<<<<<<<<<<
 * #                if(wavelength<23):
 * #                    if(th>4):
 */
        __pyx_v_j = (__pyx_v_j - 1);
      }

      /* "MOKE_polar.pyx":900
 * #                            print("tml1\n",t_ML_in_1[1][1] )
 * 
 *             Mult2x2_rightside(&p, &r_ML_back_1)             # <<<<<<<<<<<<<<
 *             Mult2x2_leftside(&r_ML_back_1, &p)
 * 
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), (&__pyx_v_r_ML_back_1));

      /* "MOKE_polar.pyx":901
 * 
 *             Mult2x2_rightside(&p, &r_ML_back_1)
 *             Mult2x2_leftside(&r_ML_back_1, &p)             # <<<<<<<<<<<<<<
 * 
 *             ev1=0.5*( -sqrt( t_ML_in_1[1][1]*t_ML_in_1[1][1]-2*t_ML_in_1[0][0]*t_ML_in_1[1][1]+4*t_ML_in_1[1][0]*t_ML_in_1[0][1]+t_ML_in_1[0][0]*t_ML_in_1[0][0] )+t_ML_in_1[0][0]+t_ML_in_1[1][1]  )
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside((&__pyx_v_r_ML_back_1), (&__pyx_v_p));

      /* "MOKE_polar.pyx":903
 *             Mult2x2_leftside(&r_ML_back_1, &p)
 * 
 *             ev1=0.5*( -sqrt( t_ML_in_1[1][1]*t_ML_in_1[1][1]-2*t_ML_in_1[0][0]*t_ML_in_1[1][1]+4*t_ML_in_1[1][0]*t_ML_in_1[0][1]+t_ML_in_1[0][0]*t_ML_in_1[0][0] )+t_ML_in_1[0][0]+t_ML_in_1[1][1]  )             # <<<<<<<<<<<<<<
 *             ev2=0.5*( sqrt( t_ML_in_1[1][1]*t_ML_in_1[1][1]-2*t_ML_in_1[0][0]*t_ML_in_1[1][1]+4*t_ML_in_1[1][0]*t_ML_in_1[0][1]+t_ML_in_1[0][0]*t_ML_in_1[0][0] )+t_ML_in_1[0][0]+t_ML_in_1[1][1]  )
 * 
 */
      __pyx_v_ev1 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_neg_double(sqrt(__Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_t_ML_in_1[1])[1]), ((__pyx_v_t_ML_in_1[1])[1])), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), ((__pyx_v_t_ML_in_1[0])[0])), ((__pyx_v_t_ML_in_1[1])[1]))), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(4, 0), ((__pyx_v_t_ML_in_1[1])[0])), ((__pyx_v_t_ML_in_1[0])[1]))), __Pyx_c_prod_double(((__pyx_v_t_ML_in_1[0])[0]), ((__pyx_v_t_ML_in_1[0])[0]))))), ((__pyx_v_t_ML_in_1[0])[0])), ((__pyx_v_t_ML_in_1[1])[1])));

      /* "MOKE_polar.pyx":904
 * 
 *             ev1=0.5*( -sqrt( t_ML_in_1[1][1]*t_ML_in_1[1][1]-2*t_ML_in_1[0][0]*t_ML_in_1[1][1]+4*t_ML_in_1[1][0]*t_ML_in_1[0][1]+t_ML_in_1[0][0]*t_ML_in_1[0][0] )+t_ML_in_1[0][0]+t_ML_in_1[1][1]  )
 *             ev2=0.5*( sqrt( t_ML_in_1[1][1]*t_ML_in_1[1][1]-2*t_ML_in_1[0][0]*t_ML_in_1[1][1]+4*t_ML_in_1[1][0]*t_ML_in_1[0][1]+t_ML_in_1[0][0]*t_ML_in_1[0][0] )+t_ML_in_1[0][0]+t_ML_in_1[1][1]  )             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_ev2 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __Pyx_c_sum_double(__Pyx_c_sum_double(sqrt(__Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_t_ML_in_1[1])[1]), ((__pyx_v_t_ML_in_1[1])[1])), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), ((__pyx_v_t_ML_in_1[0])[0])), ((__pyx_v_t_ML_in_1[1])[1]))), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(4, 0), ((__pyx_v_t_ML_in_1[1])[0])), ((__pyx_v_t_ML_in_1[0])[1]))), __Pyx_c_prod_double(((__pyx_v_t_ML_in_1[0])[0]), ((__pyx_v_t_ML_in_1[0])[0])))), ((__pyx_v_t_ML_in_1[0])[0])), ((__pyx_v_t_ML_in_1[1])[1])));

      /* "MOKE_polar.pyx":907
 * 
 * 
 *             absevmax1=cabsvalue(( ev1 ) )             # <<<<<<<<<<<<<<
 *             absevmax2=cabsvalue(( ev2 ) )
 *             if(absevmax2>absevmax1):
 */
      __pyx_v_absevmax1 = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__pyx_v_ev1);

      /* "MOKE_polar.pyx":908
 * 
 *             absevmax1=cabsvalue(( ev1 ) )
 *             absevmax2=cabsvalue(( ev2 ) )             # <<<<<<<<<<<<<<
 *             if(absevmax2>absevmax1):
 *                 absevmax1=absevmax2
 */
      __pyx_v_absevmax2 = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__pyx_v_ev2);

      /* "MOKE_polar.pyx":909
 *             absevmax1=cabsvalue(( ev1 ) )
 *             absevmax2=cabsvalue(( ev2 ) )
 *             if(absevmax2>absevmax1):             # <<<<<<<<<<<<<<
 *                 absevmax1=absevmax2
 * 
 */
      __pyx_t_5 = ((__pyx_v_absevmax2 > __pyx_v_absevmax1) != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":910
 *             absevmax2=cabsvalue(( ev2 ) )
 *             if(absevmax2>absevmax1):
 *                 absevmax1=absevmax2             # <<<<<<<<<<<<<<
 * 
 *             ev3=0.5*( -sqrt( t_ML_back_1[1][1]*t_ML_back_1[1][1]-2*t_ML_back_1[0][0]*t_ML_back_1[1][1]+4*t_ML_back_1[1][0]*t_ML_back_1[0][1]+t_ML_back_1[0][0]*t_ML_back_1[0][0] )+t_ML_back_1[0][0]+t_ML_back_1[1][1]  )
 */
        __pyx_v_absevmax1 = __pyx_v_absevmax2;

        /* "MOKE_polar.pyx":909
 *             absevmax1=cabsvalue(( ev1 ) )
 *             absevmax2=cabsvalue(( ev2 ) )
 *             if(absevmax2>absevmax1):             # <<<<<<<<<<<<<<
 *                 absevmax1=absevmax2
 * 
 */
      }

      /* "MOKE_polar.pyx":912
 *                 absevmax1=absevmax2
 * 
 *             ev3=0.5*( -sqrt( t_ML_back_1[1][1]*t_ML_back_1[1][1]-2*t_ML_back_1[0][0]*t_ML_back_1[1][1]+4*t_ML_back_1[1][0]*t_ML_back_1[0][1]+t_ML_back_1[0][0]*t_ML_back_1[0][0] )+t_ML_back_1[0][0]+t_ML_back_1[1][1]  )             # <<<<<<<<<<<<<<
 *             ev4=0.5*( sqrt( t_ML_back_1[1][1]*t_ML_back_1[1][1]-2*t_ML_back_1[0][0]*t_ML_back_1[1][1]+4*t_ML_back_1[1][0]*t_ML_back_1[0][1]+t_ML_back_1[0][0]*t_ML_back_1[0][0] )+t_ML_back_1[0][0]+t_ML_back_1[1][1]  )
 * 
 */
      __pyx_v_ev3 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_neg_double(sqrt(__Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_t_ML_back_1[1])[1]), ((__pyx_v_t_ML_back_1[1])[1])), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), ((__pyx_v_t_ML_back_1[0])[0])), ((__pyx_v_t_ML_back_1[1])[1]))), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(4, 0), ((__pyx_v_t_ML_back_1[1])[0])), ((__pyx_v_t_ML_back_1[0])[1]))), __Pyx_c_prod_double(((__pyx_v_t_ML_back_1[0])[0]), ((__pyx_v_t_ML_back_1[0])[0]))))), ((__pyx_v_t_ML_back_1[0])[0])), ((__pyx_v_t_ML_back_1[1])[1])));

      /* "MOKE_polar.pyx":913
 * 
 *             ev3=0.5*( -sqrt( t_ML_back_1[1][1]*t_ML_back_1[1][1]-2*t_ML_back_1[0][0]*t_ML_back_1[1][1]+4*t_ML_back_1[1][0]*t_ML_back_1[0][1]+t_ML_back_1[0][0]*t_ML_back_1[0][0] )+t_ML_back_1[0][0]+t_ML_back_1[1][1]  )
 *             ev4=0.5*( sqrt( t_ML_back_1[1][1]*t_ML_back_1[1][1]-2*t_ML_back_1[0][0]*t_ML_back_1[1][1]+4*t_ML_back_1[1][0]*t_ML_back_1[0][1]+t_ML_back_1[0][0]*t_ML_back_1[0][0] )+t_ML_back_1[0][0]+t_ML_back_1[1][1]  )             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_ev4 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __Pyx_c_sum_double(__Pyx_c_sum_double(sqrt(__Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_t_ML_back_1[1])[1]), ((__pyx_v_t_ML_back_1[1])[1])), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), ((__pyx_v_t_ML_back_1[0])[0])), ((__pyx_v_t_ML_back_1[1])[1]))), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(4, 0), ((__pyx_v_t_ML_back_1[1])[0])), ((__pyx_v_t_ML_back_1[0])[1]))), __Pyx_c_prod_double(((__pyx_v_t_ML_back_1[0])[0]), ((__pyx_v_t_ML_back_1[0])[0])))), ((__pyx_v_t_ML_back_1[0])[0])), ((__pyx_v_t_ML_back_1[1])[1])));

      /* "MOKE_polar.pyx":918
 *           #  print(ev3, abs(ev3), ev4, abs(ev4) )
 * 
 *             product= cabsvalue(( ev1*ev3 ) )             # <<<<<<<<<<<<<<
 *           #  print(product)
 *             product2= cabsvalue(( ev1*ev4 ) )
 */
      __pyx_v_product = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__Pyx_c_prod_double(__pyx_v_ev1, __pyx_v_ev3));

      /* "MOKE_polar.pyx":920
 *             product= cabsvalue(( ev1*ev3 ) )
 *           #  print(product)
 *             product2= cabsvalue(( ev1*ev4 ) )             # <<<<<<<<<<<<<<
 *           #  print(product2)
 *             if( product2>product  ):
 */
      __pyx_v_product2 = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__Pyx_c_prod_double(__pyx_v_ev1, __pyx_v_ev4));

      /* "MOKE_polar.pyx":922
 *             product2= cabsvalue(( ev1*ev4 ) )
 *           #  print(product2)
 *             if( product2>product  ):             # <<<<<<<<<<<<<<
 *                 product=product2
 *             product2= cabsvalue(( ev2*ev3 ) )
 */
      __pyx_t_5 = ((__pyx_v_product2 > __pyx_v_product) != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":923
 *           #  print(product2)
 *             if( product2>product  ):
 *                 product=product2             # <<<<<<<<<<<<<<
 *             product2= cabsvalue(( ev2*ev3 ) )
 *            # print(product2)
 */
        __pyx_v_product = __pyx_v_product2;

        /* "MOKE_polar.pyx":922
 *             product2= cabsvalue(( ev1*ev4 ) )
 *           #  print(product2)
 *             if( product2>product  ):             # <<<<<<<<<<<<<<
 *                 product=product2
 *             product2= cabsvalue(( ev2*ev3 ) )
 */
      }

      /* "MOKE_polar.pyx":924
 *             if( product2>product  ):
 *                 product=product2
 *             product2= cabsvalue(( ev2*ev3 ) )             # <<<<<<<<<<<<<<
 *            # print(product2)
 *             if( product2>product  ):
 */
      __pyx_v_product2 = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__Pyx_c_prod_double(__pyx_v_ev2, __pyx_v_ev3));

      /* "MOKE_polar.pyx":926
 *             product2= cabsvalue(( ev2*ev3 ) )
 *            # print(product2)
 *             if( product2>product  ):             # <<<<<<<<<<<<<<
 *                 product=product2
 *             product2= cabsvalue(( ev2*ev4 ) )
 */
      __pyx_t_5 = ((__pyx_v_product2 > __pyx_v_product) != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":927
 *            # print(product2)
 *             if( product2>product  ):
 *                 product=product2             # <<<<<<<<<<<<<<
 *             product2= cabsvalue(( ev2*ev4 ) )
 *           #  print(product2)
 */
        __pyx_v_product = __pyx_v_product2;

        /* "MOKE_polar.pyx":926
 *             product2= cabsvalue(( ev2*ev3 ) )
 *            # print(product2)
 *             if( product2>product  ):             # <<<<<<<<<<<<<<
 *                 product=product2
 *             product2= cabsvalue(( ev2*ev4 ) )
 */
      }

      /* "MOKE_polar.pyx":928
 *             if( product2>product  ):
 *                 product=product2
 *             product2= cabsvalue(( ev2*ev4 ) )             # <<<<<<<<<<<<<<
 *           #  print(product2)
 *             if( product2>product  ):
 */
      __pyx_v_product2 = __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__Pyx_c_prod_double(__pyx_v_ev2, __pyx_v_ev4));

      /* "MOKE_polar.pyx":930
 *             product2= cabsvalue(( ev2*ev4 ) )
 *           #  print(product2)
 *             if( product2>product  ):             # <<<<<<<<<<<<<<
 *                 product=product2
 *          #   print(product)
 */
      __pyx_t_5 = ((__pyx_v_product2 > __pyx_v_product) != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":931
 *           #  print(product2)
 *             if( product2>product  ):
 *                 product=product2             # <<<<<<<<<<<<<<
 *          #   print(product)
 *             normalizator=0.5*(1.+product)
 */
        __pyx_v_product = __pyx_v_product2;

        /* "MOKE_polar.pyx":930
 *             product2= cabsvalue(( ev2*ev4 ) )
 *           #  print(product2)
 *             if( product2>product  ):             # <<<<<<<<<<<<<<
 *                 product=product2
 *          #   print(product)
 */
      }

      /* "MOKE_polar.pyx":933
 *                 product=product2
 *          #   print(product)
 *             normalizator=0.5*(1.+product)             # <<<<<<<<<<<<<<
 * 
 *             t_ML_in_1[0][0]=(normalizator/absevmax1)*( t_ML_in_1[0][0] )
 */
      __pyx_v_normalizator = (0.5 * (1. + __pyx_v_product));

      /* "MOKE_polar.pyx":935
 *             normalizator=0.5*(1.+product)
 * 
 *             t_ML_in_1[0][0]=(normalizator/absevmax1)*( t_ML_in_1[0][0] )             # <<<<<<<<<<<<<<
 *             t_ML_in_1[0][1]=(normalizator/absevmax1)*( t_ML_in_1[0][1] )
 *             t_ML_in_1[1][0]=(normalizator/absevmax1)*( t_ML_in_1[1][0] )
 */
      if (unlikely(__pyx_v_absevmax1 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 935, __pyx_L1_error)
      }
      ((__pyx_v_t_ML_in_1[0])[0]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_normalizator / __pyx_v_absevmax1), 0), ((__pyx_v_t_ML_in_1[0])[0]));

      /* "MOKE_polar.pyx":936
 * 
 *             t_ML_in_1[0][0]=(normalizator/absevmax1)*( t_ML_in_1[0][0] )
 *             t_ML_in_1[0][1]=(normalizator/absevmax1)*( t_ML_in_1[0][1] )             # <<<<<<<<<<<<<<
 *             t_ML_in_1[1][0]=(normalizator/absevmax1)*( t_ML_in_1[1][0] )
 *             t_ML_in_1[1][1]=(normalizator/absevmax1)*( t_ML_in_1[1][1] )
 */
      if (unlikely(__pyx_v_absevmax1 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 936, __pyx_L1_error)
      }
      ((__pyx_v_t_ML_in_1[0])[1]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_normalizator / __pyx_v_absevmax1), 0), ((__pyx_v_t_ML_in_1[0])[1]));

      /* "MOKE_polar.pyx":937
 *             t_ML_in_1[0][0]=(normalizator/absevmax1)*( t_ML_in_1[0][0] )
 *             t_ML_in_1[0][1]=(normalizator/absevmax1)*( t_ML_in_1[0][1] )
 *             t_ML_in_1[1][0]=(normalizator/absevmax1)*( t_ML_in_1[1][0] )             # <<<<<<<<<<<<<<
 *             t_ML_in_1[1][1]=(normalizator/absevmax1)*( t_ML_in_1[1][1] )
 *             t_ML_back_1[0][0]=(absevmax1/normalizator)*( t_ML_back_1[0][0] )
 */
      if (unlikely(__pyx_v_absevmax1 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 937, __pyx_L1_error)
      }
      ((__pyx_v_t_ML_in_1[1])[0]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_normalizator / __pyx_v_absevmax1), 0), ((__pyx_v_t_ML_in_1[1])[0]));

      /* "MOKE_polar.pyx":938
 *             t_ML_in_1[0][1]=(normalizator/absevmax1)*( t_ML_in_1[0][1] )
 *             t_ML_in_1[1][0]=(normalizator/absevmax1)*( t_ML_in_1[1][0] )
 *             t_ML_in_1[1][1]=(normalizator/absevmax1)*( t_ML_in_1[1][1] )             # <<<<<<<<<<<<<<
 *             t_ML_back_1[0][0]=(absevmax1/normalizator)*( t_ML_back_1[0][0] )
 *             t_ML_back_1[0][1]=(absevmax1/normalizator)*( t_ML_back_1[0][1] )
 */
      if (unlikely(__pyx_v_absevmax1 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 938, __pyx_L1_error)
      }
      ((__pyx_v_t_ML_in_1[1])[1]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_normalizator / __pyx_v_absevmax1), 0), ((__pyx_v_t_ML_in_1[1])[1]));

      /* "MOKE_polar.pyx":939
 *             t_ML_in_1[1][0]=(normalizator/absevmax1)*( t_ML_in_1[1][0] )
 *             t_ML_in_1[1][1]=(normalizator/absevmax1)*( t_ML_in_1[1][1] )
 *             t_ML_back_1[0][0]=(absevmax1/normalizator)*( t_ML_back_1[0][0] )             # <<<<<<<<<<<<<<
 *             t_ML_back_1[0][1]=(absevmax1/normalizator)*( t_ML_back_1[0][1] )
 *             t_ML_back_1[1][0]=(absevmax1/normalizator)*( t_ML_back_1[1][0] )
 */
      if (unlikely(__pyx_v_normalizator == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 939, __pyx_L1_error)
      }
      ((__pyx_v_t_ML_back_1[0])[0]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_absevmax1 / __pyx_v_normalizator), 0), ((__pyx_v_t_ML_back_1[0])[0]));

      /* "MOKE_polar.pyx":940
 *             t_ML_in_1[1][1]=(normalizator/absevmax1)*( t_ML_in_1[1][1] )
 *             t_ML_back_1[0][0]=(absevmax1/normalizator)*( t_ML_back_1[0][0] )
 *             t_ML_back_1[0][1]=(absevmax1/normalizator)*( t_ML_back_1[0][1] )             # <<<<<<<<<<<<<<
 *             t_ML_back_1[1][0]=(absevmax1/normalizator)*( t_ML_back_1[1][0] )
 *             t_ML_back_1[1][1]=(absevmax1/normalizator)*( t_ML_back_1[1][1] )
 */
      if (unlikely(__pyx_v_normalizator == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 940, __pyx_L1_error)
      }
      ((__pyx_v_t_ML_back_1[0])[1]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_absevmax1 / __pyx_v_normalizator), 0), ((__pyx_v_t_ML_back_1[0])[1]));

      /* "MOKE_polar.pyx":941
 *             t_ML_back_1[0][0]=(absevmax1/normalizator)*( t_ML_back_1[0][0] )
 *             t_ML_back_1[0][1]=(absevmax1/normalizator)*( t_ML_back_1[0][1] )
 *             t_ML_back_1[1][0]=(absevmax1/normalizator)*( t_ML_back_1[1][0] )             # <<<<<<<<<<<<<<
 *             t_ML_back_1[1][1]=(absevmax1/normalizator)*( t_ML_back_1[1][1] )
 * 
 */
      if (unlikely(__pyx_v_normalizator == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 941, __pyx_L1_error)
      }
      ((__pyx_v_t_ML_back_1[1])[0]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_absevmax1 / __pyx_v_normalizator), 0), ((__pyx_v_t_ML_back_1[1])[0]));

      /* "MOKE_polar.pyx":942
 *             t_ML_back_1[0][1]=(absevmax1/normalizator)*( t_ML_back_1[0][1] )
 *             t_ML_back_1[1][0]=(absevmax1/normalizator)*( t_ML_back_1[1][0] )
 *             t_ML_back_1[1][1]=(absevmax1/normalizator)*( t_ML_back_1[1][1] )             # <<<<<<<<<<<<<<
 * 
 * 
 */
      if (unlikely(__pyx_v_normalizator == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 942, __pyx_L1_error)
      }
      ((__pyx_v_t_ML_back_1[1])[1]) = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts((__pyx_v_absevmax1 / __pyx_v_normalizator), 0), ((__pyx_v_t_ML_back_1[1])[1]));

      /* "MOKE_polar.pyx":945
 * 
 * 
 *             Calculate_Multilayer_with_Matrices(&t_ML_back_1, &t_ML_back_2,&t_ML_in_1, &t_ML_in_2, &r_ML_in_1, &r_ML_in_2, &r_ML_back_1, &r_ML_back_2, MLREP[i]-1)             # <<<<<<<<<<<<<<
 * 
 *             Calculate_Multilayer_with_Matrices(&t_ML_back_1, &t_ML_back_2,&t_ML_in_1, &t_ML_in_2, &r_ML_in_1, &r_ML_in_2, &r_ML_back_1, &r_ML_back_2, MLREP[i]-1)
 */
      __pyx_f_33Multilayer_Functions_Reflectivity_Calculate_Multilayer_with_Matrices((&__pyx_v_t_ML_back_1), (&__pyx_v_t_ML_back_2), (&__pyx_v_t_ML_in_1), (&__pyx_v_t_ML_in_2), (&__pyx_v_r_ML_in_1), (&__pyx_v_r_ML_in_2), (&__pyx_v_r_ML_back_1), (&__pyx_v_r_ML_back_2), ((__pyx_v_MLREP[__pyx_v_i]) - 1));

      /* "MOKE_polar.pyx":947
 *             Calculate_Multilayer_with_Matrices(&t_ML_back_1, &t_ML_back_2,&t_ML_in_1, &t_ML_in_2, &r_ML_in_1, &r_ML_in_2, &r_ML_back_1, &r_ML_back_2, MLREP[i]-1)
 * 
 *             Calculate_Multilayer_with_Matrices(&t_ML_back_1, &t_ML_back_2,&t_ML_in_1, &t_ML_in_2, &r_ML_in_1, &r_ML_in_2, &r_ML_back_1, &r_ML_back_2, MLREP[i]-1)             # <<<<<<<<<<<<<<
 *           #  print t_ML_back_2[1][1], t_ML_in_2[1][1], r_ML_in_2[1][1], r_ML_back_2[1][1]
 * 
 */
      __pyx_f_33Multilayer_Functions_Reflectivity_Calculate_Multilayer_with_Matrices((&__pyx_v_t_ML_back_1), (&__pyx_v_t_ML_back_2), (&__pyx_v_t_ML_in_1), (&__pyx_v_t_ML_in_2), (&__pyx_v_r_ML_in_1), (&__pyx_v_r_ML_in_2), (&__pyx_v_r_ML_back_1), (&__pyx_v_r_ML_back_2), ((__pyx_v_MLREP[__pyx_v_i]) - 1));

      /* "MOKE_polar.pyx":955
 * #                        print("rml\n",r_ML_in_2[1][1] )
 * 
 *             ML_is_diagonal=1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_ML_is_diagonal = 1;

      /* "MOKE_polar.pyx":958
 * 
 * 
 *             C0[0][0]=(rtot[0])[0][0]             # <<<<<<<<<<<<<<
 *             C0[0][1]=(rtot[0])[0][1]
 *             C0[1][0]=(rtot[0])[1][0]
 */
      ((__pyx_v_C0[0])[0]) = (((__pyx_v_rtot[0])[0])[0]);

      /* "MOKE_polar.pyx":959
 * 
 *             C0[0][0]=(rtot[0])[0][0]
 *             C0[0][1]=(rtot[0])[0][1]             # <<<<<<<<<<<<<<
 *             C0[1][0]=(rtot[0])[1][0]
 *             C0[1][1]=(rtot[0])[1][1]
 */
      ((__pyx_v_C0[0])[1]) = (((__pyx_v_rtot[0])[0])[1]);

      /* "MOKE_polar.pyx":960
 *             C0[0][0]=(rtot[0])[0][0]
 *             C0[0][1]=(rtot[0])[0][1]
 *             C0[1][0]=(rtot[0])[1][0]             # <<<<<<<<<<<<<<
 *             C0[1][1]=(rtot[0])[1][1]
 *             Mult2x2_rightside(&r_ML_back_2, &C0)
 */
      ((__pyx_v_C0[1])[0]) = (((__pyx_v_rtot[0])[1])[0]);

      /* "MOKE_polar.pyx":961
 *             C0[0][1]=(rtot[0])[0][1]
 *             C0[1][0]=(rtot[0])[1][0]
 *             C0[1][1]=(rtot[0])[1][1]             # <<<<<<<<<<<<<<
 *             Mult2x2_rightside(&r_ML_back_2, &C0)
 *             C0[0][0]=1-C0[0][0]
 */
      ((__pyx_v_C0[1])[1]) = (((__pyx_v_rtot[0])[1])[1]);

      /* "MOKE_polar.pyx":962
 *             C0[1][0]=(rtot[0])[1][0]
 *             C0[1][1]=(rtot[0])[1][1]
 *             Mult2x2_rightside(&r_ML_back_2, &C0)             # <<<<<<<<<<<<<<
 *             C0[0][0]=1-C0[0][0]
 *             C0[0][1]=-C0[0][1]
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_r_ML_back_2), (&__pyx_v_C0));

      /* "MOKE_polar.pyx":963
 *             C0[1][1]=(rtot[0])[1][1]
 *             Mult2x2_rightside(&r_ML_back_2, &C0)
 *             C0[0][0]=1-C0[0][0]             # <<<<<<<<<<<<<<
 *             C0[0][1]=-C0[0][1]
 *             C0[1][0]=-C0[1][0]
 */
      ((__pyx_v_C0[0])[0]) = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), ((__pyx_v_C0[0])[0]));

      /* "MOKE_polar.pyx":964
 *             Mult2x2_rightside(&r_ML_back_2, &C0)
 *             C0[0][0]=1-C0[0][0]
 *             C0[0][1]=-C0[0][1]             # <<<<<<<<<<<<<<
 *             C0[1][0]=-C0[1][0]
 *             C0[1][1]=1-C0[1][1]
 */
      ((__pyx_v_C0[0])[1]) = __Pyx_c_neg_double(((__pyx_v_C0[0])[1]));

      /* "MOKE_polar.pyx":965
 *             C0[0][0]=1-C0[0][0]
 *             C0[0][1]=-C0[0][1]
 *             C0[1][0]=-C0[1][0]             # <<<<<<<<<<<<<<
 *             C0[1][1]=1-C0[1][1]
 *             Invert2x2(&C0)
 */
      ((__pyx_v_C0[1])[0]) = __Pyx_c_neg_double(((__pyx_v_C0[1])[0]));

      /* "MOKE_polar.pyx":966
 *             C0[0][1]=-C0[0][1]
 *             C0[1][0]=-C0[1][0]
 *             C0[1][1]=1-C0[1][1]             # <<<<<<<<<<<<<<
 *             Invert2x2(&C0)
 * 
 */
      ((__pyx_v_C0[1])[1]) = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), ((__pyx_v_C0[1])[1]));

      /* "MOKE_polar.pyx":967
 *             C0[1][0]=-C0[1][0]
 *             C0[1][1]=1-C0[1][1]
 *             Invert2x2(&C0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Invert2x2((&__pyx_v_C0));

      /* "MOKE_polar.pyx":970
 * 
 * 
 *             Mult2x2_rightside(&t_ML_back_2, rtot)             # <<<<<<<<<<<<<<
 *             Mult2x2_leftside(rtot, &C0)
 *             Mult2x2_leftside(rtot, &t_ML_in_2) # (t'(CA) p_C t'(BC) p_B t'(AB)*p(A))^N rtot (p(A) * t(AB) p_B t(BC) p_C t(CA))^N
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_t_ML_back_2), __pyx_v_rtot);

      /* "MOKE_polar.pyx":971
 * 
 *             Mult2x2_rightside(&t_ML_back_2, rtot)
 *             Mult2x2_leftside(rtot, &C0)             # <<<<<<<<<<<<<<
 *             Mult2x2_leftside(rtot, &t_ML_in_2) # (t'(CA) p_C t'(BC) p_B t'(AB)*p(A))^N rtot (p(A) * t(AB) p_B t(BC) p_C t(CA))^N
 *             (rtot[0])[0][0]+=r_ML_in_2[0][0]
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_C0));

      /* "MOKE_polar.pyx":972
 *             Mult2x2_rightside(&t_ML_back_2, rtot)
 *             Mult2x2_leftside(rtot, &C0)
 *             Mult2x2_leftside(rtot, &t_ML_in_2) # (t'(CA) p_C t'(BC) p_B t'(AB)*p(A))^N rtot (p(A) * t(AB) p_B t(BC) p_C t(CA))^N             # <<<<<<<<<<<<<<
 *             (rtot[0])[0][0]+=r_ML_in_2[0][0]
 *             (rtot[0])[1][0]+=r_ML_in_2[1][0]
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_t_ML_in_2));

      /* "MOKE_polar.pyx":973
 *             Mult2x2_leftside(rtot, &C0)
 *             Mult2x2_leftside(rtot, &t_ML_in_2) # (t'(CA) p_C t'(BC) p_B t'(AB)*p(A))^N rtot (p(A) * t(AB) p_B t(BC) p_C t(CA))^N
 *             (rtot[0])[0][0]+=r_ML_in_2[0][0]             # <<<<<<<<<<<<<<
 *             (rtot[0])[1][0]+=r_ML_in_2[1][0]
 *             (rtot[0])[0][1]+=r_ML_in_2[0][1]
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r_ML_in_2[0])[0]));

      /* "MOKE_polar.pyx":974
 *             Mult2x2_leftside(rtot, &t_ML_in_2) # (t'(CA) p_C t'(BC) p_B t'(AB)*p(A))^N rtot (p(A) * t(AB) p_B t(BC) p_C t(CA))^N
 *             (rtot[0])[0][0]+=r_ML_in_2[0][0]
 *             (rtot[0])[1][0]+=r_ML_in_2[1][0]             # <<<<<<<<<<<<<<
 *             (rtot[0])[0][1]+=r_ML_in_2[0][1]
 *             (rtot[0])[1][1]+=r_ML_in_2[1][1]
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 1;
      __pyx_t_9 = 0;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r_ML_in_2[1])[0]));

      /* "MOKE_polar.pyx":975
 *             (rtot[0])[0][0]+=r_ML_in_2[0][0]
 *             (rtot[0])[1][0]+=r_ML_in_2[1][0]
 *             (rtot[0])[0][1]+=r_ML_in_2[0][1]             # <<<<<<<<<<<<<<
 *             (rtot[0])[1][1]+=r_ML_in_2[1][1]
 * 
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 1;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r_ML_in_2[0])[1]));

      /* "MOKE_polar.pyx":976
 *             (rtot[0])[1][0]+=r_ML_in_2[1][0]
 *             (rtot[0])[0][1]+=r_ML_in_2[0][1]
 *             (rtot[0])[1][1]+=r_ML_in_2[1][1]             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 1;
      __pyx_t_9 = 1;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r_ML_in_2[1])[1]));

      /* "MOKE_polar.pyx":988
 * 
 * 
 *             LowerLayer=LR[MLCOMP[i][0]]             # <<<<<<<<<<<<<<
 *             if(LowerLayer.magdir):
 *                 Fill_rMemory_z(&Memory1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)
 */
      __pyx_v_LowerLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[0])]);

      /* "MOKE_polar.pyx":989
 * 
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 *                 Fill_rMemory_z(&Memory1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)
 *             else:
 */
      __pyx_t_5 = (__pyx_v_LowerLayer.magdir != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":990
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             if(LowerLayer.magdir):
 *                 Fill_rMemory_z(&Memory1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)             # <<<<<<<<<<<<<<
 *             else:
 *                 Memory1.epsy=1.0+LowerLayer.cy
 */
        __pyx_f_10MOKE_polar_Fill_rMemory_z((&__pyx_v_Memory1), __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg);

        /* "MOKE_polar.pyx":989
 * 
 *             LowerLayer=LR[MLCOMP[i][0]]
 *             if(LowerLayer.magdir):             # <<<<<<<<<<<<<<
 *                 Fill_rMemory_z(&Memory1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)
 *             else:
 */
        goto __pyx_L24;
      }

      /* "MOKE_polar.pyx":992
 *                 Fill_rMemory_z(&Memory1, vy,vyvy,omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg)
 *             else:
 *                 Memory1.epsy=1.0+LowerLayer.cy             # <<<<<<<<<<<<<<
 *                 Memory1.epsz=1.0+LowerLayer.cz
 *                 Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)
 */
      /*else*/ {
        __pyx_v_Memory1.epsy = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1.0, 0), __pyx_v_LowerLayer.cy);

        /* "MOKE_polar.pyx":993
 *             else:
 *                 Memory1.epsy=1.0+LowerLayer.cy
 *                 Memory1.epsz=1.0+LowerLayer.cz             # <<<<<<<<<<<<<<
 *                 Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)
 *                 Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)
 */
        __pyx_v_Memory1.epsz = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1.0, 0), __pyx_v_LowerLayer.cz);

        /* "MOKE_polar.pyx":994
 *                 Memory1.epsy=1.0+LowerLayer.cy
 *                 Memory1.epsz=1.0+LowerLayer.cz
 *                 Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)             # <<<<<<<<<<<<<<
 *                 Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)
 *             Mempointer1=&Memory1
 */
        __pyx_v_Memory1.vz1 = sqrt(__Pyx_c_diff_double(__Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_LowerLayer.cx), __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0)));

        /* "MOKE_polar.pyx":995
 *                 Memory1.epsz=1.0+LowerLayer.cz
 *                 Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)
 *                 Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)             # <<<<<<<<<<<<<<
 *             Mempointer1=&Memory1
 *             Mempointer2=&Memory2
 */
        __pyx_t_6 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
        if (unlikely(__Pyx_c_is_zero_double(__pyx_v_Memory1.epsz))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 995, __pyx_L1_error)
        }
        __pyx_v_Memory1.vz2 = sqrt(__Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1., 0), __Pyx_c_quot_double(__pyx_t_6, __pyx_v_Memory1.epsz)), __pyx_v_Memory1.epsy));
      }
      __pyx_L24:;

      /* "MOKE_polar.pyx":996
 *                 Memory1.vz1=sqrt(1.+LowerLayer.cx-vyvy)
 *                 Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)
 *             Mempointer1=&Memory1             # <<<<<<<<<<<<<<
 *             Mempointer2=&Memory2
 *             Memory1.IsFilled=1
 */
      __pyx_v_Mempointer1 = (&__pyx_v_Memory1);

      /* "MOKE_polar.pyx":997
 *                 Memory1.vz2=sqrt((1.-vyvy/Memory1.epsz)*Memory1.epsy)
 *             Mempointer1=&Memory1
 *             Mempointer2=&Memory2             # <<<<<<<<<<<<<<
 *             Memory1.IsFilled=1
 *             j=1
 */
      __pyx_v_Mempointer2 = (&__pyx_v_Memory2);

      /* "MOKE_polar.pyx":998
 *             Mempointer1=&Memory1
 *             Mempointer2=&Memory2
 *             Memory1.IsFilled=1             # <<<<<<<<<<<<<<
 *             j=1
 * 
 */
      __pyx_v_Memory1.IsFilled = 1;

      /* "MOKE_polar.pyx":999
 *             Mempointer2=&Memory2
 *             Memory1.IsFilled=1
 *             j=1             # <<<<<<<<<<<<<<
 * 
 *             while j<MLLENGTH[i]:
 */
      __pyx_v_j = 1;

      /* "MOKE_polar.pyx":1001
 *             j=1
 * 
 *             while j<MLLENGTH[i]:             # <<<<<<<<<<<<<<
 *                 LowerLayer=LR[MLCOMP[i][j-1]]
 *                 UpperLayer=LR[MLCOMP[i][j]]
 */
      while (1) {
        __pyx_t_5 = ((__pyx_v_j < (__pyx_v_MLLENGTH[__pyx_v_i])) != 0);
        if (!__pyx_t_5) break;

        /* "MOKE_polar.pyx":1002
 * 
 *             while j<MLLENGTH[i]:
 *                 LowerLayer=LR[MLCOMP[i][j-1]]             # <<<<<<<<<<<<<<
 *                 UpperLayer=LR[MLCOMP[i][j]]
 *                 if(Memory1.IsFilled):
 */
        __pyx_v_LowerLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[(__pyx_v_j - 1)])]);

        /* "MOKE_polar.pyx":1003
 *             while j<MLLENGTH[i]:
 *                 LowerLayer=LR[MLCOMP[i][j-1]]
 *                 UpperLayer=LR[MLCOMP[i][j]]             # <<<<<<<<<<<<<<
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 */
        __pyx_v_UpperLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[__pyx_v_j])]);

        /* "MOKE_polar.pyx":1004
 *                 LowerLayer=LR[MLCOMP[i][j-1]]
 *                 UpperLayer=LR[MLCOMP[i][j]]
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
        __pyx_t_5 = (__pyx_v_Memory1.IsFilled != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":1005
 *                 UpperLayer=LR[MLCOMP[i][j]]
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer2=&Memory2
 *                 else:
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":1006
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2             # <<<<<<<<<<<<<<
 *                 else:
 *                     Mempointer2=&Memory1
 */
          __pyx_v_Mempointer2 = (&__pyx_v_Memory2);

          /* "MOKE_polar.pyx":1004
 *                 LowerLayer=LR[MLCOMP[i][j-1]]
 *                 UpperLayer=LR[MLCOMP[i][j]]
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
          goto __pyx_L27;
        }

        /* "MOKE_polar.pyx":1008
 *                     Mempointer2=&Memory2
 *                 else:
 *                     Mempointer2=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory2
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 */
        /*else*/ {
          __pyx_v_Mempointer2 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":1009
 *                 else:
 *                     Mempointer2=&Memory1
 *                     Mempointer1=&Memory2             # <<<<<<<<<<<<<<
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory2);
        }
        __pyx_L27:;

        /* "MOKE_polar.pyx":1010
 *                     Mempointer2=&Memory1
 *                     Mempointer1=&Memory2
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0
 */
        __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_v_UpperLayer.cx, __pyx_v_UpperLayer.cy, __pyx_v_UpperLayer.cz, __pyx_v_UpperLayer.cg, __pyx_v_LowerLayer.magdir, __pyx_v_UpperLayer.magdir, (&__pyx_v_r), (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

        /* "MOKE_polar.pyx":1012
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0             # <<<<<<<<<<<<<<
 *                 FillC0(&C0, &rprime, rtot, &p)
 *                 Mult2x2_rightside(&p, rtot)
 */
        (__pyx_v_Mempointer1[0]).IsFilled = 0;

        /* "MOKE_polar.pyx":1013
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0
 *                 FillC0(&C0, &rprime, rtot, &p)             # <<<<<<<<<<<<<<
 *                 Mult2x2_rightside(&p, rtot)
 *                 Mult2x2_leftside(rtot, &p)
 */
        __pyx_f_33Multilayer_Functions_Reflectivity_FillC0((&__pyx_v_C0), (&__pyx_v_rprime), __pyx_v_rtot, (&__pyx_v_p));

        /* "MOKE_polar.pyx":1014
 *                 (Mempointer1[0]).IsFilled=0
 *                 FillC0(&C0, &rprime, rtot, &p)
 *                 Mult2x2_rightside(&p, rtot)             # <<<<<<<<<<<<<<
 *                 Mult2x2_leftside(rtot, &p)
 *                 Mult2x2_rightside(&tprime, rtot)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), __pyx_v_rtot);

        /* "MOKE_polar.pyx":1015
 *                 FillC0(&C0, &rprime, rtot, &p)
 *                 Mult2x2_rightside(&p, rtot)
 *                 Mult2x2_leftside(rtot, &p)             # <<<<<<<<<<<<<<
 *                 Mult2x2_rightside(&tprime, rtot)
 *                 Mult2x2_leftside(rtot, &C0)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_p));

        /* "MOKE_polar.pyx":1016
 *                 Mult2x2_rightside(&p, rtot)
 *                 Mult2x2_leftside(rtot, &p)
 *                 Mult2x2_rightside(&tprime, rtot)             # <<<<<<<<<<<<<<
 *                 Mult2x2_leftside(rtot, &C0)
 *                 Mult2x2_leftside(rtot, &t)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_tprime), __pyx_v_rtot);

        /* "MOKE_polar.pyx":1017
 *                 Mult2x2_leftside(rtot, &p)
 *                 Mult2x2_rightside(&tprime, rtot)
 *                 Mult2x2_leftside(rtot, &C0)             # <<<<<<<<<<<<<<
 *                 Mult2x2_leftside(rtot, &t)
 *                 (rtot[0])[0][0]+=r[0][0]
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_C0));

        /* "MOKE_polar.pyx":1018
 *                 Mult2x2_rightside(&tprime, rtot)
 *                 Mult2x2_leftside(rtot, &C0)
 *                 Mult2x2_leftside(rtot, &t)             # <<<<<<<<<<<<<<
 *                 (rtot[0])[0][0]+=r[0][0]
 *                 (rtot[0])[1][0]+=r[1][0]
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_t));

        /* "MOKE_polar.pyx":1019
 *                 Mult2x2_leftside(rtot, &C0)
 *                 Mult2x2_leftside(rtot, &t)
 *                 (rtot[0])[0][0]+=r[0][0]             # <<<<<<<<<<<<<<
 *                 (rtot[0])[1][0]+=r[1][0]
 *                 (rtot[0])[0][1]+=r[0][1]
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        __pyx_t_9 = 0;
        (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[0])[0]));

        /* "MOKE_polar.pyx":1020
 *                 Mult2x2_leftside(rtot, &t)
 *                 (rtot[0])[0][0]+=r[0][0]
 *                 (rtot[0])[1][0]+=r[1][0]             # <<<<<<<<<<<<<<
 *                 (rtot[0])[0][1]+=r[0][1]
 *                 (rtot[0])[1][1]+=r[1][1]
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 1;
        __pyx_t_9 = 0;
        (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[1])[0]));

        /* "MOKE_polar.pyx":1021
 *                 (rtot[0])[0][0]+=r[0][0]
 *                 (rtot[0])[1][0]+=r[1][0]
 *                 (rtot[0])[0][1]+=r[0][1]             # <<<<<<<<<<<<<<
 *                 (rtot[0])[1][1]+=r[1][1]
 * 
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        __pyx_t_9 = 1;
        (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[0])[1]));

        /* "MOKE_polar.pyx":1022
 *                 (rtot[0])[1][0]+=r[1][0]
 *                 (rtot[0])[0][1]+=r[0][1]
 *                 (rtot[0])[1][1]+=r[1][1]             # <<<<<<<<<<<<<<
 * 
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 */
        __pyx_t_7 = 0;
        __pyx_t_8 = 1;
        __pyx_t_9 = 1;
        (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[1])[1]));

        /* "MOKE_polar.pyx":1024
 *                 (rtot[0])[1][1]+=r[1][1]
 * 
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)             # <<<<<<<<<<<<<<
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 *                 j=j+1
 */
        ((__pyx_v_p[0])[0]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz1));

        /* "MOKE_polar.pyx":1025
 * 
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)             # <<<<<<<<<<<<<<
 *                 j=j+1
 *               #  print "12"
 */
        ((__pyx_v_p[1])[1]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz2));

        /* "MOKE_polar.pyx":1026
 *                 p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *                 p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 *                 j=j+1             # <<<<<<<<<<<<<<
 *               #  print "12"
 *             LowerLayer=LR[MLCOMP[i][j-1]]
 */
        __pyx_v_j = (__pyx_v_j + 1);
      }

      /* "MOKE_polar.pyx":1028
 *                 j=j+1
 *               #  print "12"
 *             LowerLayer=LR[MLCOMP[i][j-1]]             # <<<<<<<<<<<<<<
 *             if(i==Cap):
 *                 if(Memory1.IsFilled):
 */
      __pyx_v_LowerLayer = (__pyx_v_LR[((__pyx_v_MLCOMP[__pyx_v_i])[(__pyx_v_j - 1)])]);

      /* "MOKE_polar.pyx":1029
 *               #  print "12"
 *             LowerLayer=LR[MLCOMP[i][j-1]]
 *             if(i==Cap):             # <<<<<<<<<<<<<<
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 */
      __pyx_t_5 = ((__pyx_v_i == __pyx_v_Cap) != 0);
      if (__pyx_t_5) {

        /* "MOKE_polar.pyx":1030
 *             LowerLayer=LR[MLCOMP[i][j-1]]
 *             if(i==Cap):
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
        __pyx_t_5 = (__pyx_v_Memory1.IsFilled != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":1031
 *             if(i==Cap):
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer2=&Memory2
 *                 else:
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":1032
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2             # <<<<<<<<<<<<<<
 *                 else:
 *                     Mempointer2=&Memory1
 */
          __pyx_v_Mempointer2 = (&__pyx_v_Memory2);

          /* "MOKE_polar.pyx":1030
 *             LowerLayer=LR[MLCOMP[i][j-1]]
 *             if(i==Cap):
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
          goto __pyx_L29;
        }

        /* "MOKE_polar.pyx":1034
 *                     Mempointer2=&Memory2
 *                 else:
 *                     Mempointer2=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory2
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0,0,0,0, \
 */
        /*else*/ {
          __pyx_v_Mempointer2 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":1035
 *                 else:
 *                     Mempointer2=&Memory1
 *                     Mempointer1=&Memory2             # <<<<<<<<<<<<<<
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0,0,0,0, \
 *                     LowerLayer.magdir, 0, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory2);
        }
        __pyx_L29:;

        /* "MOKE_polar.pyx":1036
 *                     Mempointer2=&Memory1
 *                     Mempointer1=&Memory2
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, 0,0,0,0, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, 0, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 * 
 */
        __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_t_double_complex_from_parts(0, 0), __pyx_v_LowerLayer.magdir, 0, (&__pyx_v_r), (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

        /* "MOKE_polar.pyx":1029
 *               #  print "12"
 *             LowerLayer=LR[MLCOMP[i][j-1]]
 *             if(i==Cap):             # <<<<<<<<<<<<<<
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 */
        goto __pyx_L28;
      }

      /* "MOKE_polar.pyx":1040
 * 
 *             else:
 *                 UpperLayer=Layer=LR[MLCOMP[i+1][0]]             # <<<<<<<<<<<<<<
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 */
      /*else*/ {
        __pyx_t_10 = (__pyx_v_LR[((__pyx_v_MLCOMP[(__pyx_v_i + 1)])[0])]);
        __pyx_v_UpperLayer = __pyx_t_10;
        __pyx_v_Layer = __pyx_t_10;

        /* "MOKE_polar.pyx":1041
 *             else:
 *                 UpperLayer=Layer=LR[MLCOMP[i+1][0]]
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
        __pyx_t_5 = (__pyx_v_Memory1.IsFilled != 0);
        if (__pyx_t_5) {

          /* "MOKE_polar.pyx":1042
 *                 UpperLayer=Layer=LR[MLCOMP[i+1][0]]
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer2=&Memory2
 *                 else:
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":1043
 *                 if(Memory1.IsFilled):
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2             # <<<<<<<<<<<<<<
 *                 else:
 *                     Mempointer2=&Memory1
 */
          __pyx_v_Mempointer2 = (&__pyx_v_Memory2);

          /* "MOKE_polar.pyx":1041
 *             else:
 *                 UpperLayer=Layer=LR[MLCOMP[i+1][0]]
 *                 if(Memory1.IsFilled):             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory1
 *                     Mempointer2=&Memory2
 */
          goto __pyx_L30;
        }

        /* "MOKE_polar.pyx":1045
 *                     Mempointer2=&Memory2
 *                 else:
 *                     Mempointer2=&Memory1             # <<<<<<<<<<<<<<
 *                     Mempointer1=&Memory2
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 */
        /*else*/ {
          __pyx_v_Mempointer2 = (&__pyx_v_Memory1);

          /* "MOKE_polar.pyx":1046
 *                 else:
 *                     Mempointer2=&Memory1
 *                     Mempointer1=&Memory2             # <<<<<<<<<<<<<<
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 */
          __pyx_v_Mempointer1 = (&__pyx_v_Memory2);
        }
        __pyx_L30:;

        /* "MOKE_polar.pyx":1047
 *                     Mempointer2=&Memory1
 *                     Mempointer1=&Memory2
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \             # <<<<<<<<<<<<<<
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0
 */
        __pyx_f_10MOKE_polar_Calculate_rt_z(__pyx_v_Mempointer1, __pyx_v_Mempointer2, __pyx_v_vy, __pyx_v_vyvy, __pyx_v_omvyvy, __pyx_v_LowerLayer.cx, __pyx_v_LowerLayer.cy, __pyx_v_LowerLayer.cz, __pyx_v_LowerLayer.cg, __pyx_v_UpperLayer.cx, __pyx_v_UpperLayer.cy, __pyx_v_UpperLayer.cz, __pyx_v_UpperLayer.cg, __pyx_v_LowerLayer.magdir, __pyx_v_UpperLayer.magdir, (&__pyx_v_r), (&__pyx_v_rprime), (&__pyx_v_t), (&__pyx_v_tprime), __pyx_v_LowerLayer.Roughness, __pyx_v_k0);

        /* "MOKE_polar.pyx":1049
 *                 Calculate_rt_z(Mempointer1, Mempointer2, vy, vyvy, omvyvy, LowerLayer.cx, LowerLayer.cy, LowerLayer.cz, LowerLayer.cg, UpperLayer.cx, UpperLayer.cy, UpperLayer.cz, UpperLayer.cg, \
 *                     LowerLayer.magdir, UpperLayer.magdir, &r, &rprime, &t, &tprime, LowerLayer.Roughness, k0)
 *                 (Mempointer1[0]).IsFilled=0             # <<<<<<<<<<<<<<
 *              #   print "5", LR[MLCOMP[i][MLLENGTH[i]-1]].Roughness
 *           #  print "5", vz1, vz2, vz3, vz4
 */
        (__pyx_v_Mempointer1[0]).IsFilled = 0;
      }
      __pyx_L28:;

      /* "MOKE_polar.pyx":1053
 *           #  print "5", vz1, vz2, vz3, vz4
 *          #   print "17"
 *             FillC0(&C0, &rprime, rtot, &p)             # <<<<<<<<<<<<<<
 *             Mult2x2_rightside(&p, rtot)
 *             Mult2x2_leftside(rtot, &p)
 */
      __pyx_f_33Multilayer_Functions_Reflectivity_FillC0((&__pyx_v_C0), (&__pyx_v_rprime), __pyx_v_rtot, (&__pyx_v_p));

      /* "MOKE_polar.pyx":1054
 *          #   print "17"
 *             FillC0(&C0, &rprime, rtot, &p)
 *             Mult2x2_rightside(&p, rtot)             # <<<<<<<<<<<<<<
 *             Mult2x2_leftside(rtot, &p)
 *             Mult2x2_rightside(&tprime, rtot)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_p), __pyx_v_rtot);

      /* "MOKE_polar.pyx":1055
 *             FillC0(&C0, &rprime, rtot, &p)
 *             Mult2x2_rightside(&p, rtot)
 *             Mult2x2_leftside(rtot, &p)             # <<<<<<<<<<<<<<
 *             Mult2x2_rightside(&tprime, rtot)
 *             Mult2x2_leftside(rtot, &C0)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_p));

      /* "MOKE_polar.pyx":1056
 *             Mult2x2_rightside(&p, rtot)
 *             Mult2x2_leftside(rtot, &p)
 *             Mult2x2_rightside(&tprime, rtot)             # <<<<<<<<<<<<<<
 *             Mult2x2_leftside(rtot, &C0)
 *             Mult2x2_leftside(rtot, &t)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside((&__pyx_v_tprime), __pyx_v_rtot);

      /* "MOKE_polar.pyx":1057
 *             Mult2x2_leftside(rtot, &p)
 *             Mult2x2_rightside(&tprime, rtot)
 *             Mult2x2_leftside(rtot, &C0)             # <<<<<<<<<<<<<<
 *             Mult2x2_leftside(rtot, &t)
 *             (rtot[0])[0][0]+=r[0][0]
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_C0));

      /* "MOKE_polar.pyx":1058
 *             Mult2x2_rightside(&tprime, rtot)
 *             Mult2x2_leftside(rtot, &C0)
 *             Mult2x2_leftside(rtot, &t)             # <<<<<<<<<<<<<<
 *             (rtot[0])[0][0]+=r[0][0]
 *             (rtot[0])[1][0]+=r[1][0]
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside(__pyx_v_rtot, (&__pyx_v_t));

      /* "MOKE_polar.pyx":1059
 *             Mult2x2_leftside(rtot, &C0)
 *             Mult2x2_leftside(rtot, &t)
 *             (rtot[0])[0][0]+=r[0][0]             # <<<<<<<<<<<<<<
 *             (rtot[0])[1][0]+=r[1][0]
 *             (rtot[0])[0][1]+=r[0][1]
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[0])[0]));

      /* "MOKE_polar.pyx":1060
 *             Mult2x2_leftside(rtot, &t)
 *             (rtot[0])[0][0]+=r[0][0]
 *             (rtot[0])[1][0]+=r[1][0]             # <<<<<<<<<<<<<<
 *             (rtot[0])[0][1]+=r[0][1]
 *             (rtot[0])[1][1]+=r[1][1]
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 1;
      __pyx_t_9 = 0;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[1])[0]));

      /* "MOKE_polar.pyx":1061
 *             (rtot[0])[0][0]+=r[0][0]
 *             (rtot[0])[1][0]+=r[1][0]
 *             (rtot[0])[0][1]+=r[0][1]             # <<<<<<<<<<<<<<
 *             (rtot[0])[1][1]+=r[1][1]
 * 
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 0;
      __pyx_t_9 = 1;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[0])[1]));

      /* "MOKE_polar.pyx":1062
 *             (rtot[0])[1][0]+=r[1][0]
 *             (rtot[0])[0][1]+=r[0][1]
 *             (rtot[0])[1][1]+=r[1][1]             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_7 = 0;
      __pyx_t_8 = 1;
      __pyx_t_9 = 1;
      (((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]) = __Pyx_c_sum_double((((__pyx_v_rtot[__pyx_t_7])[__pyx_t_8])[__pyx_t_9]), ((__pyx_v_r[1])[1]));

      /* "MOKE_polar.pyx":1065
 * 
 * 
 *             p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)             # <<<<<<<<<<<<<<
 *             p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 * 
 */
      ((__pyx_v_p[0])[0]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz1));

      /* "MOKE_polar.pyx":1066
 * 
 *             p[0][0]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz1)
 *             p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)             # <<<<<<<<<<<<<<
 * 
 *         i=i+1
 */
      ((__pyx_v_p[1])[1]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0)), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_Mempointer2[0]).vz2));
    }
    __pyx_L7:;

    /* "MOKE_polar.pyx":1068
 *             p[1][1]=exp(1j*k0*UpperLayer.Thickness*(Mempointer2[0]).vz2)
 * 
 *         i=i+1             # <<<<<<<<<<<<<<
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "MOKE_polar.pyx":632
 * 
 * 
 * cdef void Paratt_magnetic_z_MS(Heterostructure* HS, double th, double wavelength, double complex (*rtot)[2][2]):             # <<<<<<<<<<<<<<
 * 
 *     cdef double k0=6.283185307179586/wavelength
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("MOKE_polar.Paratt_magnetic_z_MS", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "Mathematical_Functions_Reflectivity.pxd":24
 * cdef double Cmaxnorm(double complex x)
 * 
 * cdef inline double complex cquadr(double complex x):             # <<<<<<<<<<<<<<
 *     return x*x
 * 
 */

static CYTHON_INLINE __pyx_t_double_complex __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_t_double_complex __pyx_v_x) {
  __pyx_t_double_complex __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cquadr", 0);

  /* "Mathematical_Functions_Reflectivity.pxd":25
 * 
 * cdef inline double complex cquadr(double complex x):
 *     return x*x             # <<<<<<<<<<<<<<
 * 
 * cdef inline double complex ccube(double complex x):
 */
  __pyx_r = __Pyx_c_prod_double(__pyx_v_x, __pyx_v_x);
  goto __pyx_L0;

  /* "Mathematical_Functions_Reflectivity.pxd":24
 * cdef double Cmaxnorm(double complex x)
 * 
 * cdef inline double complex cquadr(double complex x):             # <<<<<<<<<<<<<<
 *     return x*x
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Mathematical_Functions_Reflectivity.pxd":27
 *     return x*x
 * 
 * cdef inline double complex ccube(double complex x):             # <<<<<<<<<<<<<<
 *     return x*x*x
 * 
 */

static CYTHON_INLINE __pyx_t_double_complex __pyx_f_35Mathematical_Functions_Reflectivity_ccube(__pyx_t_double_complex __pyx_v_x) {
  __pyx_t_double_complex __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ccube", 0);

  /* "Mathematical_Functions_Reflectivity.pxd":28
 * 
 * cdef inline double complex ccube(double complex x):
 *     return x*x*x             # <<<<<<<<<<<<<<
 * 
 * cdef inline double quadr(double x):
 */
  __pyx_r = __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_v_x, __pyx_v_x), __pyx_v_x);
  goto __pyx_L0;

  /* "Mathematical_Functions_Reflectivity.pxd":27
 *     return x*x
 * 
 * cdef inline double complex ccube(double complex x):             # <<<<<<<<<<<<<<
 *     return x*x*x
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Mathematical_Functions_Reflectivity.pxd":30
 *     return x*x*x
 * 
 * cdef inline double quadr(double x):             # <<<<<<<<<<<<<<
 *     return x*x
 * cdef inline double cabsquadr(double complex x):
 */

static CYTHON_INLINE double __pyx_f_35Mathematical_Functions_Reflectivity_quadr(double __pyx_v_x) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quadr", 0);

  /* "Mathematical_Functions_Reflectivity.pxd":31
 * 
 * cdef inline double quadr(double x):
 *     return x*x             # <<<<<<<<<<<<<<
 * cdef inline double cabsquadr(double complex x):
 *     return quadr(x.real)+quadr(x.imag)
 */
  __pyx_r = (__pyx_v_x * __pyx_v_x);
  goto __pyx_L0;

  /* "Mathematical_Functions_Reflectivity.pxd":30
 *     return x*x*x
 * 
 * cdef inline double quadr(double x):             # <<<<<<<<<<<<<<
 *     return x*x
 * cdef inline double cabsquadr(double complex x):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Mathematical_Functions_Reflectivity.pxd":32
 * cdef inline double quadr(double x):
 *     return x*x
 * cdef inline double cabsquadr(double complex x):             # <<<<<<<<<<<<<<
 *     return quadr(x.real)+quadr(x.imag)
 * 
 */

static CYTHON_INLINE double __pyx_f_35Mathematical_Functions_Reflectivity_cabsquadr(__pyx_t_double_complex __pyx_v_x) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cabsquadr", 0);

  /* "Mathematical_Functions_Reflectivity.pxd":33
 *     return x*x
 * cdef inline double cabsquadr(double complex x):
 *     return quadr(x.real)+quadr(x.imag)             # <<<<<<<<<<<<<<
 * 
 * cdef inline double cabsvalue(double complex x):
 */
  __pyx_r = (__pyx_f_35Mathematical_Functions_Reflectivity_quadr(__Pyx_CREAL(__pyx_v_x)) + __pyx_f_35Mathematical_Functions_Reflectivity_quadr(__Pyx_CIMAG(__pyx_v_x)));
  goto __pyx_L0;

  /* "Mathematical_Functions_Reflectivity.pxd":32
 * cdef inline double quadr(double x):
 *     return x*x
 * cdef inline double cabsquadr(double complex x):             # <<<<<<<<<<<<<<
 *     return quadr(x.real)+quadr(x.imag)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Mathematical_Functions_Reflectivity.pxd":35
 *     return quadr(x.real)+quadr(x.imag)
 * 
 * cdef inline double cabsvalue(double complex x):             # <<<<<<<<<<<<<<
 *     return dsqrt( quadr(x.real)+quadr(x.imag) )
 * 
 */

static CYTHON_INLINE double __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__pyx_t_double_complex __pyx_v_x) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cabsvalue", 0);

  /* "Mathematical_Functions_Reflectivity.pxd":36
 * 
 * cdef inline double cabsvalue(double complex x):
 *     return dsqrt( quadr(x.real)+quadr(x.imag) )             # <<<<<<<<<<<<<<
 * 
 * cdef double dabsvalue(double x) nogil
 */
  __pyx_r = sqrt((__pyx_f_35Mathematical_Functions_Reflectivity_quadr(__Pyx_CREAL(__pyx_v_x)) + __pyx_f_35Mathematical_Functions_Reflectivity_quadr(__Pyx_CIMAG(__pyx_v_x))));
  goto __pyx_L0;

  /* "Mathematical_Functions_Reflectivity.pxd":35
 *     return quadr(x.real)+quadr(x.imag)
 * 
 * cdef inline double cabsvalue(double complex x):             # <<<<<<<<<<<<<<
 *     return dsqrt( quadr(x.real)+quadr(x.imag) )
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Mathematical_Functions_Reflectivity.pxd":40
 * cdef double dabsvalue(double x) nogil
 * 
 * cdef inline double complex cconj(double complex x):             # <<<<<<<<<<<<<<
 *     return x.real -1.j*x.imag
 * 
 */

static CYTHON_INLINE __pyx_t_double_complex __pyx_f_35Mathematical_Functions_Reflectivity_cconj(__pyx_t_double_complex __pyx_v_x) {
  __pyx_t_double_complex __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cconj", 0);

  /* "Mathematical_Functions_Reflectivity.pxd":41
 * 
 * cdef inline double complex cconj(double complex x):
 *     return x.real -1.j*x.imag             # <<<<<<<<<<<<<<
 * 
 * cdef inline double two_pi_div_360():
 */
  __pyx_r = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(__Pyx_CREAL(__pyx_v_x), 0), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__Pyx_CIMAG(__pyx_v_x), 0)));
  goto __pyx_L0;

  /* "Mathematical_Functions_Reflectivity.pxd":40
 * cdef double dabsvalue(double x) nogil
 * 
 * cdef inline double complex cconj(double complex x):             # <<<<<<<<<<<<<<
 *     return x.real -1.j*x.imag
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Mathematical_Functions_Reflectivity.pxd":43
 *     return x.real -1.j*x.imag
 * 
 * cdef inline double two_pi_div_360():             # <<<<<<<<<<<<<<
 *     return 0.017453292519943295
 * 
 */

static CYTHON_INLINE double __pyx_f_35Mathematical_Functions_Reflectivity_two_pi_div_360(void) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("two_pi_div_360", 0);

  /* "Mathematical_Functions_Reflectivity.pxd":44
 * 
 * cdef inline double two_pi_div_360():
 *     return 0.017453292519943295             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0.017453292519943295;
  goto __pyx_L0;

  /* "Mathematical_Functions_Reflectivity.pxd":43
 *     return x.real -1.j*x.imag
 * 
 * cdef inline double two_pi_div_360():             # <<<<<<<<<<<<<<
 *     return 0.017453292519943295
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Reflectivity_Sigma.pxd":29
 * 
 * 
 * cdef inline double complex CalculateVZsigma(double vyvy, double complex cx):             # <<<<<<<<<<<<<<
 *     return sqrt(1.+cx-vyvy)
 * 
 */

static CYTHON_INLINE __pyx_t_double_complex __pyx_f_18Reflectivity_Sigma_CalculateVZsigma(double __pyx_v_vyvy, __pyx_t_double_complex __pyx_v_cx) {
  __pyx_t_double_complex __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CalculateVZsigma", 0);

  /* "Reflectivity_Sigma.pxd":30
 * 
 * cdef inline double complex CalculateVZsigma(double vyvy, double complex cx):
 *     return sqrt(1.+cx-vyvy)             # <<<<<<<<<<<<<<
 * 
 * cdef inline double complex Calculate_rsigma_precisely(double complex vz1, double complex vz2, double complex cx1, double complex cx2):
 */
  __pyx_r = sqrt(__Pyx_c_diff_double(__Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_cx), __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0)));
  goto __pyx_L0;

  /* "Reflectivity_Sigma.pxd":29
 * 
 * 
 * cdef inline double complex CalculateVZsigma(double vyvy, double complex cx):             # <<<<<<<<<<<<<<
 *     return sqrt(1.+cx-vyvy)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Reflectivity_Sigma.pxd":32
 *     return sqrt(1.+cx-vyvy)
 * 
 * cdef inline double complex Calculate_rsigma_precisely(double complex vz1, double complex vz2, double complex cx1, double complex cx2):             # <<<<<<<<<<<<<<
 *     return (cx1-cx2)/cquadr(vz1+vz2)
 * 
 */

static CYTHON_INLINE __pyx_t_double_complex __pyx_f_18Reflectivity_Sigma_Calculate_rsigma_precisely(__pyx_t_double_complex __pyx_v_vz1, __pyx_t_double_complex __pyx_v_vz2, __pyx_t_double_complex __pyx_v_cx1, __pyx_t_double_complex __pyx_v_cx2) {
  __pyx_t_double_complex __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_double_complex __pyx_t_1;
  __pyx_t_double_complex __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Calculate_rsigma_precisely", 0);

  /* "Reflectivity_Sigma.pxd":33
 * 
 * cdef inline double complex Calculate_rsigma_precisely(double complex vz1, double complex vz2, double complex cx1, double complex cx2):
 *     return (cx1-cx2)/cquadr(vz1+vz2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_c_diff_double(__pyx_v_cx1, __pyx_v_cx2);
  __pyx_t_2 = __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_sum_double(__pyx_v_vz1, __pyx_v_vz2));
  if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 33, __pyx_L1_error)
  }
  __pyx_r = __Pyx_c_quot_double(__pyx_t_1, __pyx_t_2);
  goto __pyx_L0;

  /* "Reflectivity_Sigma.pxd":32
 *     return sqrt(1.+cx-vyvy)
 * 
 * cdef inline double complex Calculate_rsigma_precisely(double complex vz1, double complex vz2, double complex cx1, double complex cx2):             # <<<<<<<<<<<<<<
 *     return (cx1-cx2)/cquadr(vz1+vz2)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("Reflectivity_Sigma.Calculate_rsigma_precisely", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = __pyx_t_double_complex_from_parts(0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Reflectivity_Pi.pxd":29
 * 
 * 
 * cdef inline double complex CalculateVZpi(double vyvy, double complex cy, double complex cz):             # <<<<<<<<<<<<<<
 *     return sqrt((1.-vyvy/(1.+cz))*(1+cy))
 * 
 */

static CYTHON_INLINE __pyx_t_double_complex __pyx_f_15Reflectivity_Pi_CalculateVZpi(double __pyx_v_vyvy, __pyx_t_double_complex __pyx_v_cy, __pyx_t_double_complex __pyx_v_cz) {
  __pyx_t_double_complex __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_double_complex __pyx_t_1;
  __pyx_t_double_complex __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CalculateVZpi", 0);

  /* "Reflectivity_Pi.pxd":30
 * 
 * cdef inline double complex CalculateVZpi(double vyvy, double complex cy, double complex cz):
 *     return sqrt((1.-vyvy/(1.+cz))*(1+cy))             # <<<<<<<<<<<<<<
 * 
 * cdef double complex Calculate_rpi_precisely(double vyvy, double complex vz1, double complex vz2, double complex cy1,double complex cy2, double complex cz1, double complex cz2)
 */
  __pyx_t_1 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
  __pyx_t_2 = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_cz);
  if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 30, __pyx_L1_error)
  }
  __pyx_r = sqrt(__Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1., 0), __Pyx_c_quot_double(__pyx_t_1, __pyx_t_2)), __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1, 0), __pyx_v_cy)));
  goto __pyx_L0;

  /* "Reflectivity_Pi.pxd":29
 * 
 * 
 * cdef inline double complex CalculateVZpi(double vyvy, double complex cy, double complex cz):             # <<<<<<<<<<<<<<
 *     return sqrt((1.-vyvy/(1.+cz))*(1+cy))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("Reflectivity_Pi.CalculateVZpi", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = __pyx_t_double_complex_from_parts(0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_MOKE_polar(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_MOKE_polar},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "MOKE_polar",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("Calculate_rt_z", (void (*)(void))__pyx_f_10MOKE_polar_Calculate_rt_z, "void (struct __pyx_t_10Structural_rMemory *, struct __pyx_t_10Structural_rMemory *, double, double, double, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex, int, int, __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], double, double)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("Fill_rMemory_z", (void (*)(void))__pyx_f_10MOKE_polar_Fill_rMemory_z, "void (struct __pyx_t_10Structural_rMemory *, double, double, double, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("Paratt_magnetic_z", (void (*)(void))__pyx_f_10MOKE_polar_Paratt_magnetic_z, "void (struct __pyx_t_10Structural_Heterostructure *, double, double, __pyx_t_double_complex (*)[2][2])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("Paratt_magnetic_z_MS", (void (*)(void))__pyx_f_10MOKE_polar_Paratt_magnetic_z_MS, "void (struct __pyx_t_10Structural_Heterostructure *, double, double, __pyx_t_double_complex (*)[2][2])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("Mathematical_Functions_Reflectivity"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "Cmaxnorm", (void (**)(void))&__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm, "double (__pyx_t_double_complex)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "ipow", (void (**)(void))&__pyx_f_35Mathematical_Functions_Reflectivity_ipow, "__pyx_t_double_complex (__pyx_t_double_complex, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "Mult2x2_rightside", (void (**)(void))&__pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_rightside, "void (__pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "Mult2x2_leftside", (void (**)(void))&__pyx_f_35Mathematical_Functions_Reflectivity_Mult2x2_leftside, "void (__pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "Invert2x2", (void (**)(void))&__pyx_f_35Mathematical_Functions_Reflectivity_Invert2x2, "void (__pyx_t_double_complex (*)[2][2])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("Multilayer_Functions_Reflectivity"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "FillC0", (void (**)(void))&__pyx_f_33Multilayer_Functions_Reflectivity_FillC0, "void (__pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "Calculate_Multilayer_equation", (void (**)(void))&__pyx_f_33Multilayer_Functions_Reflectivity_Calculate_Multilayer_equation, "void (__pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "Calculate_Multilayer", (void (**)(void))&__pyx_f_33Multilayer_Functions_Reflectivity_Calculate_Multilayer, "void (__pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "Calculate_Multilayer_with_Matrices", (void (**)(void))&__pyx_f_33Multilayer_Functions_Reflectivity_Calculate_Multilayer_with_Matrices, "void (__pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], __pyx_t_double_complex (*)[2][2], int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initMOKE_polar(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initMOKE_polar(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_MOKE_polar(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_MOKE_polar(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_MOKE_polar(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'MOKE_polar' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_MOKE_polar(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("MOKE_polar", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_MOKE_polar) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "MOKE_polar")) {
      if (unlikely(PyDict_SetItemString(modules, "MOKE_polar", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "MOKE_polar.pyx":1
 * #<Pythonreflectivity: A Python Package for simulation of x-ray reflectivities of Heterostructures>             # <<<<<<<<<<<<<<
 * #    Copyright (C) <2017>  <Martin Zwiebler>
 * #
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "Reflectivity_Pi.pxd":29
 * 
 * 
 * cdef inline double complex CalculateVZpi(double vyvy, double complex cy, double complex cz):             # <<<<<<<<<<<<<<
 *     return sqrt((1.-vyvy/(1.+cz))*(1+cy))
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init MOKE_polar", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init MOKE_polar");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* None */
static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* FromPy */
static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject* o) {
    Py_complex cval;
#if !CYTHON_COMPILING_IN_PYPY
    if (PyComplex_CheckExact(o))
        cval = ((PyComplexObject *)o)->cval;
    else
#endif
        cval = PyComplex_AsCComplex(o);
    return __pyx_t_double_complex_from_parts(
               (double)cval.real,
               (double)cval.imag);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */

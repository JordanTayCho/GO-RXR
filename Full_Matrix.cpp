/* Generated by Cython 0.29.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "extra_compile_args": [
            "-O3"
        ],
        "include_dirs": [
            "C:\\Users\\lsk601\\PycharmProjects\\MaterialReflection\\venv\\lib\\site-packages\\numpy\\core\\include"
        ],
        "language": "c++",
        "name": "Full_Matrix",
        "sources": [
            "Full_Matrix.pyx"
        ]
    },
    "module_name": "Full_Matrix"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_24"
#define CYTHON_HEX_VERSION 0x001D18F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__Full_Matrix
#define __PYX_HAVE_API__Full_Matrix
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include "math.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "Full_Matrix.pyx",
  "Reflectivity_Sigma.pxd",
  "Reflectivity_Pi.pxd",
  "MOKE_transversal.pxd",
};
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_t_10Structural_CLayer;
struct __pyx_t_10Structural_Heterostructure;
struct __pyx_t_10Structural_rMemory;
struct __pyx_t_10Structural_MatrixSafer;

/* "Structural.pxd":19
 * from libc.stdlib cimport malloc, free
 * 
 * cdef struct CLayer:             # <<<<<<<<<<<<<<
 *     double Thickness, Roughness
 *     double complex cx, cy, cz, cg
 */
struct __pyx_t_10Structural_CLayer {
  double Thickness;
  double Roughness;
  __pyx_t_double_complex cx;
  __pyx_t_double_complex cy;
  __pyx_t_double_complex cz;
  __pyx_t_double_complex cg;
  __pyx_t_double_complex cxy;
  __pyx_t_double_complex cyx;
  __pyx_t_double_complex cxz;
  __pyx_t_double_complex czx;
  __pyx_t_double_complex cyz;
  __pyx_t_double_complex czy;
  int type;
  int magdir;
};

/* "Structural.pxd":27
 * 
 * 
 * cdef struct Heterostructure:             # <<<<<<<<<<<<<<
 *     int NLayers
 *     int NLayers_types
 */
struct __pyx_t_10Structural_Heterostructure {
  int NLayers;
  int NLayers_types;
  int *MLLENGTH;
  int *MLREP;
  int **MLCOMP;
  struct __pyx_t_10Structural_CLayer *LR;
};

/* "Structural.pxd":42
 * 
 * 
 * cdef struct rMemory:             # <<<<<<<<<<<<<<
 *     double complex cgcg
 *     double complex epsy
 */
struct __pyx_t_10Structural_rMemory {
  __pyx_t_double_complex cgcg;
  __pyx_t_double_complex epsy;
  __pyx_t_double_complex epsz;
  __pyx_t_double_complex Delta31;
  __pyx_t_double_complex C1;
  __pyx_t_double_complex C2;
  __pyx_t_double_complex C3;
  __pyx_t_double_complex B1;
  __pyx_t_double_complex B2;
  __pyx_t_double_complex B;
  __pyx_t_double_complex root;
  __pyx_t_double_complex vz1;
  __pyx_t_double_complex vz2;
  __pyx_t_double_complex PHI1;
  __pyx_t_double_complex PHI2;
  __pyx_t_double_complex PHI3;
  int IsFilled;
};

/* "Structural.pxd":61
 *     int IsFilled
 * 
 * cdef struct MatrixSafer:             # <<<<<<<<<<<<<<
 *     int IsFilled
 *     double complex exx
 */
struct __pyx_t_10Structural_MatrixSafer {
  int IsFilled;
  __pyx_t_double_complex exx;
  __pyx_t_double_complex eyy;
  __pyx_t_double_complex ezz;
  __pyx_t_double_complex Mx;
  __pyx_t_double_complex exyyx;
  __pyx_t_double_complex exzzx;
  __pyx_t_double_complex eyzzy;
  __pyx_t_double_complex crossmag;
  __pyx_t_double_complex summag;
  __pyx_t_double_complex mixmag;
  __pyx_t_double_complex inverseezz;
  __pyx_t_double_complex D21ic;
  __pyx_t_double_complex D23;
  __pyx_t_double_complex D24ic;
  __pyx_t_double_complex D31ic;
  __pyx_t_double_complex D33ic;
  __pyx_t_double_complex D41;
  __pyx_t_double_complex D43;
  __pyx_t_double_complex D44ic;
};

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* ToPy.proto */
#define __pyx_PyComplex_FromComplex(z)\
        PyComplex_FromDoubles((double)__Pyx_CREAL(z),\
                              (double)__Pyx_CIMAG(z))

/* FromPy.proto */
static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject*);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'Structural' */

/* Module declarations from 'Mathematical_Functions_Reflectivity' */
static double (*__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm)(__pyx_t_double_complex); /*proto*/
static CYTHON_INLINE __pyx_t_double_complex __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_t_double_complex); /*proto*/
static CYTHON_INLINE __pyx_t_double_complex __pyx_f_35Mathematical_Functions_Reflectivity_ccube(__pyx_t_double_complex); /*proto*/
static CYTHON_INLINE double __pyx_f_35Mathematical_Functions_Reflectivity_quadr(double); /*proto*/
static CYTHON_INLINE double __pyx_f_35Mathematical_Functions_Reflectivity_cabsquadr(__pyx_t_double_complex); /*proto*/
static CYTHON_INLINE double __pyx_f_35Mathematical_Functions_Reflectivity_two_pi_div_360(void); /*proto*/
static void (*__pyx_f_35Mathematical_Functions_Reflectivity_Matrix4Invert)(__pyx_t_double_complex (*)[4][4], __pyx_t_double_complex (*)[4][4]); /*proto*/
static void (*__pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside)(__pyx_t_double_complex (*)[4][4], __pyx_t_double_complex (*)[4][4]); /*proto*/
static void (*__pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside_diag)(__pyx_t_double_complex (*)[4][4], __pyx_t_double_complex (*)[4]); /*proto*/

/* Module declarations from 'Multilayer_Functions_Reflectivity' */
static void (*__pyx_f_33Multilayer_Functions_Reflectivity_Calculate_Multilayer)(__pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, int); /*proto*/
static void (*__pyx_f_33Multilayer_Functions_Reflectivity_Matrixexp)(__pyx_t_double_complex (*)[4][4], int); /*proto*/

/* Module declarations from 'Reflectivity_Sigma' */
static CYTHON_INLINE __pyx_t_double_complex __pyx_f_18Reflectivity_Sigma_CalculateVZsigma(double, __pyx_t_double_complex); /*proto*/

/* Module declarations from 'Reflectivity_Pi' */
static CYTHON_INLINE __pyx_t_double_complex __pyx_f_15Reflectivity_Pi_CalculateVZpi(double, __pyx_t_double_complex, __pyx_t_double_complex); /*proto*/

/* Module declarations from 'MOKE_transversal' */
static CYTHON_INLINE __pyx_t_double_complex __pyx_f_16MOKE_transversal_CalculateVZpi_m(double, __pyx_t_double_complex, __pyx_t_double_complex, __pyx_t_double_complex); /*proto*/

/* Module declarations from 'Full_Matrix' */
static void __pyx_f_11Full_Matrix_NormalizePHI(__pyx_t_double_complex (*)[4][4]); /*proto*/
static void __pyx_f_11Full_Matrix_Calculate_Phi_and_Psi(struct __pyx_t_10Structural_CLayer, struct __pyx_t_10Structural_MatrixSafer *, double, double, double, __pyx_t_double_complex (*)[4], __pyx_t_double_complex (*)[4][4], __pyx_t_double_complex (*)[4][4]); /*proto*/
#define __Pyx_MODULE_NAME "Full_Matrix"
extern int __pyx_module_is_main_Full_Matrix;
int __pyx_module_is_main_Full_Matrix = 0;

/* Implementation of 'Full_Matrix' */
static PyObject *__pyx_builtin_range;
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_float_3_;
static PyObject *__pyx_float_4_;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_int_12;
/* Late includes */

/* "Full_Matrix.pyx":20
 * 
 * 
 * cdef void Reduce_complexity_of_chi(CLayer *Layer, double Cutoff, int *allx, int *ally, int *allz):             # <<<<<<<<<<<<<<
 *     cdef int nox, noy, noz
 *     cdef int gyro
 */

static void __pyx_f_11Full_Matrix_Reduce_complexity_of_chi(struct __pyx_t_10Structural_CLayer *__pyx_v_Layer, double __pyx_v_Cutoff, int *__pyx_v_allx, int *__pyx_v_ally, int *__pyx_v_allz) {
  int __pyx_v_nox;
  int __pyx_v_noy;
  int __pyx_v_noz;
  int __pyx_v_gyro;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __pyx_t_double_complex __pyx_t_3;
  __Pyx_RefNannySetupContext("Reduce_complexity_of_chi", 0);

  /* "Full_Matrix.pyx":25
 * 
 * 
 *     gyro=1             # <<<<<<<<<<<<<<
 *     if( Cmaxnorm((Layer[0]).cxy)< Cutoff ):
 *         (Layer[0]).cxy=0
 */
  __pyx_v_gyro = 1;

  /* "Full_Matrix.pyx":26
 * 
 *     gyro=1
 *     if( Cmaxnorm((Layer[0]).cxy)< Cutoff ):             # <<<<<<<<<<<<<<
 *         (Layer[0]).cxy=0
 *     if( Cmaxnorm((Layer[0]).cyx)< Cutoff ):
 */
  __pyx_t_1 = ((__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm((__pyx_v_Layer[0]).cxy) < __pyx_v_Cutoff) != 0);
  if (__pyx_t_1) {

    /* "Full_Matrix.pyx":27
 *     gyro=1
 *     if( Cmaxnorm((Layer[0]).cxy)< Cutoff ):
 *         (Layer[0]).cxy=0             # <<<<<<<<<<<<<<
 *     if( Cmaxnorm((Layer[0]).cyx)< Cutoff ):
 *         (Layer[0]).cyx=0
 */
    (__pyx_v_Layer[0]).cxy = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":26
 * 
 *     gyro=1
 *     if( Cmaxnorm((Layer[0]).cxy)< Cutoff ):             # <<<<<<<<<<<<<<
 *         (Layer[0]).cxy=0
 *     if( Cmaxnorm((Layer[0]).cyx)< Cutoff ):
 */
  }

  /* "Full_Matrix.pyx":28
 *     if( Cmaxnorm((Layer[0]).cxy)< Cutoff ):
 *         (Layer[0]).cxy=0
 *     if( Cmaxnorm((Layer[0]).cyx)< Cutoff ):             # <<<<<<<<<<<<<<
 *         (Layer[0]).cyx=0
 *     if( Cmaxnorm((Layer[0]).cxz)< Cutoff ):
 */
  __pyx_t_1 = ((__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm((__pyx_v_Layer[0]).cyx) < __pyx_v_Cutoff) != 0);
  if (__pyx_t_1) {

    /* "Full_Matrix.pyx":29
 *         (Layer[0]).cxy=0
 *     if( Cmaxnorm((Layer[0]).cyx)< Cutoff ):
 *         (Layer[0]).cyx=0             # <<<<<<<<<<<<<<
 *     if( Cmaxnorm((Layer[0]).cxz)< Cutoff ):
 *         (Layer[0]).cxz=0
 */
    (__pyx_v_Layer[0]).cyx = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":28
 *     if( Cmaxnorm((Layer[0]).cxy)< Cutoff ):
 *         (Layer[0]).cxy=0
 *     if( Cmaxnorm((Layer[0]).cyx)< Cutoff ):             # <<<<<<<<<<<<<<
 *         (Layer[0]).cyx=0
 *     if( Cmaxnorm((Layer[0]).cxz)< Cutoff ):
 */
  }

  /* "Full_Matrix.pyx":30
 *     if( Cmaxnorm((Layer[0]).cyx)< Cutoff ):
 *         (Layer[0]).cyx=0
 *     if( Cmaxnorm((Layer[0]).cxz)< Cutoff ):             # <<<<<<<<<<<<<<
 *         (Layer[0]).cxz=0
 *     if( Cmaxnorm((Layer[0]).czx)< Cutoff ):
 */
  __pyx_t_1 = ((__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm((__pyx_v_Layer[0]).cxz) < __pyx_v_Cutoff) != 0);
  if (__pyx_t_1) {

    /* "Full_Matrix.pyx":31
 *         (Layer[0]).cyx=0
 *     if( Cmaxnorm((Layer[0]).cxz)< Cutoff ):
 *         (Layer[0]).cxz=0             # <<<<<<<<<<<<<<
 *     if( Cmaxnorm((Layer[0]).czx)< Cutoff ):
 *         (Layer[0]).czx=0
 */
    (__pyx_v_Layer[0]).cxz = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":30
 *     if( Cmaxnorm((Layer[0]).cyx)< Cutoff ):
 *         (Layer[0]).cyx=0
 *     if( Cmaxnorm((Layer[0]).cxz)< Cutoff ):             # <<<<<<<<<<<<<<
 *         (Layer[0]).cxz=0
 *     if( Cmaxnorm((Layer[0]).czx)< Cutoff ):
 */
  }

  /* "Full_Matrix.pyx":32
 *     if( Cmaxnorm((Layer[0]).cxz)< Cutoff ):
 *         (Layer[0]).cxz=0
 *     if( Cmaxnorm((Layer[0]).czx)< Cutoff ):             # <<<<<<<<<<<<<<
 *         (Layer[0]).czx=0
 *     if( Cmaxnorm((Layer[0]).cyz)< Cutoff ):
 */
  __pyx_t_1 = ((__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm((__pyx_v_Layer[0]).czx) < __pyx_v_Cutoff) != 0);
  if (__pyx_t_1) {

    /* "Full_Matrix.pyx":33
 *         (Layer[0]).cxz=0
 *     if( Cmaxnorm((Layer[0]).czx)< Cutoff ):
 *         (Layer[0]).czx=0             # <<<<<<<<<<<<<<
 *     if( Cmaxnorm((Layer[0]).cyz)< Cutoff ):
 *         (Layer[0]).cyz=0
 */
    (__pyx_v_Layer[0]).czx = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":32
 *     if( Cmaxnorm((Layer[0]).cxz)< Cutoff ):
 *         (Layer[0]).cxz=0
 *     if( Cmaxnorm((Layer[0]).czx)< Cutoff ):             # <<<<<<<<<<<<<<
 *         (Layer[0]).czx=0
 *     if( Cmaxnorm((Layer[0]).cyz)< Cutoff ):
 */
  }

  /* "Full_Matrix.pyx":34
 *     if( Cmaxnorm((Layer[0]).czx)< Cutoff ):
 *         (Layer[0]).czx=0
 *     if( Cmaxnorm((Layer[0]).cyz)< Cutoff ):             # <<<<<<<<<<<<<<
 *         (Layer[0]).cyz=0
 *     if( Cmaxnorm((Layer[0]).czy)< Cutoff ):
 */
  __pyx_t_1 = ((__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm((__pyx_v_Layer[0]).cyz) < __pyx_v_Cutoff) != 0);
  if (__pyx_t_1) {

    /* "Full_Matrix.pyx":35
 *         (Layer[0]).czx=0
 *     if( Cmaxnorm((Layer[0]).cyz)< Cutoff ):
 *         (Layer[0]).cyz=0             # <<<<<<<<<<<<<<
 *     if( Cmaxnorm((Layer[0]).czy)< Cutoff ):
 *         (Layer[0]).czy=0
 */
    (__pyx_v_Layer[0]).cyz = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":34
 *     if( Cmaxnorm((Layer[0]).czx)< Cutoff ):
 *         (Layer[0]).czx=0
 *     if( Cmaxnorm((Layer[0]).cyz)< Cutoff ):             # <<<<<<<<<<<<<<
 *         (Layer[0]).cyz=0
 *     if( Cmaxnorm((Layer[0]).czy)< Cutoff ):
 */
  }

  /* "Full_Matrix.pyx":36
 *     if( Cmaxnorm((Layer[0]).cyz)< Cutoff ):
 *         (Layer[0]).cyz=0
 *     if( Cmaxnorm((Layer[0]).czy)< Cutoff ):             # <<<<<<<<<<<<<<
 *         (Layer[0]).czy=0
 * 
 */
  __pyx_t_1 = ((__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm((__pyx_v_Layer[0]).czy) < __pyx_v_Cutoff) != 0);
  if (__pyx_t_1) {

    /* "Full_Matrix.pyx":37
 *         (Layer[0]).cyz=0
 *     if( Cmaxnorm((Layer[0]).czy)< Cutoff ):
 *         (Layer[0]).czy=0             # <<<<<<<<<<<<<<
 * 
 *     if( ((Layer[0]).cxy == 0 ) and ((Layer[0]).cyx==0) ):
 */
    (__pyx_v_Layer[0]).czy = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":36
 *     if( Cmaxnorm((Layer[0]).cyz)< Cutoff ):
 *         (Layer[0]).cyz=0
 *     if( Cmaxnorm((Layer[0]).czy)< Cutoff ):             # <<<<<<<<<<<<<<
 *         (Layer[0]).czy=0
 * 
 */
  }

  /* "Full_Matrix.pyx":39
 *         (Layer[0]).czy=0
 * 
 *     if( ((Layer[0]).cxy == 0 ) and ((Layer[0]).cyx==0) ):             # <<<<<<<<<<<<<<
 *         noz=1
 *     else:
 */
  __pyx_t_2 = ((__Pyx_c_eq_double((__pyx_v_Layer[0]).cxy, __pyx_t_double_complex_from_parts(0, 0))) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_t_2 = ((__Pyx_c_eq_double((__pyx_v_Layer[0]).cyx, __pyx_t_double_complex_from_parts(0, 0))) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L10_bool_binop_done:;
  if (__pyx_t_1) {

    /* "Full_Matrix.pyx":40
 * 
 *     if( ((Layer[0]).cxy == 0 ) and ((Layer[0]).cyx==0) ):
 *         noz=1             # <<<<<<<<<<<<<<
 *     else:
 *        # print("hallo, ", (Layer[0]).cxy, (Layer[0]).cyx )
 */
    __pyx_v_noz = 1;

    /* "Full_Matrix.pyx":39
 *         (Layer[0]).czy=0
 * 
 *     if( ((Layer[0]).cxy == 0 ) and ((Layer[0]).cyx==0) ):             # <<<<<<<<<<<<<<
 *         noz=1
 *     else:
 */
    goto __pyx_L9;
  }

  /* "Full_Matrix.pyx":43
 *     else:
 *        # print("hallo, ", (Layer[0]).cxy, (Layer[0]).cyx )
 *         noz=0             # <<<<<<<<<<<<<<
 *         if( ((Layer[0]).cxy == -(Layer[0]).cyx ) ):
 *             gyro=1
 */
  /*else*/ {
    __pyx_v_noz = 0;

    /* "Full_Matrix.pyx":44
 *        # print("hallo, ", (Layer[0]).cxy, (Layer[0]).cyx )
 *         noz=0
 *         if( ((Layer[0]).cxy == -(Layer[0]).cyx ) ):             # <<<<<<<<<<<<<<
 *             gyro=1
 *         else:
 */
    __pyx_t_1 = ((__Pyx_c_eq_double((__pyx_v_Layer[0]).cxy, __Pyx_c_neg_double((__pyx_v_Layer[0]).cyx))) != 0);
    if (__pyx_t_1) {

      /* "Full_Matrix.pyx":45
 *         noz=0
 *         if( ((Layer[0]).cxy == -(Layer[0]).cyx ) ):
 *             gyro=1             # <<<<<<<<<<<<<<
 *         else:
 *             gyro=0
 */
      __pyx_v_gyro = 1;

      /* "Full_Matrix.pyx":44
 *        # print("hallo, ", (Layer[0]).cxy, (Layer[0]).cyx )
 *         noz=0
 *         if( ((Layer[0]).cxy == -(Layer[0]).cyx ) ):             # <<<<<<<<<<<<<<
 *             gyro=1
 *         else:
 */
      goto __pyx_L12;
    }

    /* "Full_Matrix.pyx":47
 *             gyro=1
 *         else:
 *             gyro=0             # <<<<<<<<<<<<<<
 *     if( ((Layer[0]).cxz == 0 ) and ((Layer[0]).czx==0) ):
 *         noy=1
 */
    /*else*/ {
      __pyx_v_gyro = 0;
    }
    __pyx_L12:;
  }
  __pyx_L9:;

  /* "Full_Matrix.pyx":48
 *         else:
 *             gyro=0
 *     if( ((Layer[0]).cxz == 0 ) and ((Layer[0]).czx==0) ):             # <<<<<<<<<<<<<<
 *         noy=1
 *     else:
 */
  __pyx_t_2 = ((__Pyx_c_eq_double((__pyx_v_Layer[0]).cxz, __pyx_t_double_complex_from_parts(0, 0))) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_2 = ((__Pyx_c_eq_double((__pyx_v_Layer[0]).czx, __pyx_t_double_complex_from_parts(0, 0))) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L14_bool_binop_done:;
  if (__pyx_t_1) {

    /* "Full_Matrix.pyx":49
 *             gyro=0
 *     if( ((Layer[0]).cxz == 0 ) and ((Layer[0]).czx==0) ):
 *         noy=1             # <<<<<<<<<<<<<<
 *     else:
 *         noy=0
 */
    __pyx_v_noy = 1;

    /* "Full_Matrix.pyx":48
 *         else:
 *             gyro=0
 *     if( ((Layer[0]).cxz == 0 ) and ((Layer[0]).czx==0) ):             # <<<<<<<<<<<<<<
 *         noy=1
 *     else:
 */
    goto __pyx_L13;
  }

  /* "Full_Matrix.pyx":51
 *         noy=1
 *     else:
 *         noy=0             # <<<<<<<<<<<<<<
 *         if( ((Layer[0]).cxz == -(Layer[0]).czx ) ):
 *             gyro=1
 */
  /*else*/ {
    __pyx_v_noy = 0;

    /* "Full_Matrix.pyx":52
 *     else:
 *         noy=0
 *         if( ((Layer[0]).cxz == -(Layer[0]).czx ) ):             # <<<<<<<<<<<<<<
 *             gyro=1
 *         else:
 */
    __pyx_t_1 = ((__Pyx_c_eq_double((__pyx_v_Layer[0]).cxz, __Pyx_c_neg_double((__pyx_v_Layer[0]).czx))) != 0);
    if (__pyx_t_1) {

      /* "Full_Matrix.pyx":53
 *         noy=0
 *         if( ((Layer[0]).cxz == -(Layer[0]).czx ) ):
 *             gyro=1             # <<<<<<<<<<<<<<
 *         else:
 *             gyro=0
 */
      __pyx_v_gyro = 1;

      /* "Full_Matrix.pyx":52
 *     else:
 *         noy=0
 *         if( ((Layer[0]).cxz == -(Layer[0]).czx ) ):             # <<<<<<<<<<<<<<
 *             gyro=1
 *         else:
 */
      goto __pyx_L16;
    }

    /* "Full_Matrix.pyx":55
 *             gyro=1
 *         else:
 *             gyro=0             # <<<<<<<<<<<<<<
 *     if( ((Layer[0]).cyz == 0 ) and ((Layer[0]).czy==0) ):
 *         nox=1
 */
    /*else*/ {
      __pyx_v_gyro = 0;
    }
    __pyx_L16:;
  }
  __pyx_L13:;

  /* "Full_Matrix.pyx":56
 *         else:
 *             gyro=0
 *     if( ((Layer[0]).cyz == 0 ) and ((Layer[0]).czy==0) ):             # <<<<<<<<<<<<<<
 *         nox=1
 *     else:
 */
  __pyx_t_2 = ((__Pyx_c_eq_double((__pyx_v_Layer[0]).cyz, __pyx_t_double_complex_from_parts(0, 0))) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L18_bool_binop_done;
  }
  __pyx_t_2 = ((__Pyx_c_eq_double((__pyx_v_Layer[0]).czy, __pyx_t_double_complex_from_parts(0, 0))) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L18_bool_binop_done:;
  if (__pyx_t_1) {

    /* "Full_Matrix.pyx":57
 *             gyro=0
 *     if( ((Layer[0]).cyz == 0 ) and ((Layer[0]).czy==0) ):
 *         nox=1             # <<<<<<<<<<<<<<
 *     else:
 *         nox=0
 */
    __pyx_v_nox = 1;

    /* "Full_Matrix.pyx":56
 *         else:
 *             gyro=0
 *     if( ((Layer[0]).cyz == 0 ) and ((Layer[0]).czy==0) ):             # <<<<<<<<<<<<<<
 *         nox=1
 *     else:
 */
    goto __pyx_L17;
  }

  /* "Full_Matrix.pyx":59
 *         nox=1
 *     else:
 *         nox=0             # <<<<<<<<<<<<<<
 *         if( ((Layer[0]).cyz == -(Layer[0]).czy ) ):
 *             gyro=1
 */
  /*else*/ {
    __pyx_v_nox = 0;

    /* "Full_Matrix.pyx":60
 *     else:
 *         nox=0
 *         if( ((Layer[0]).cyz == -(Layer[0]).czy ) ):             # <<<<<<<<<<<<<<
 *             gyro=1
 *         else:
 */
    __pyx_t_1 = ((__Pyx_c_eq_double((__pyx_v_Layer[0]).cyz, __Pyx_c_neg_double((__pyx_v_Layer[0]).czy))) != 0);
    if (__pyx_t_1) {

      /* "Full_Matrix.pyx":61
 *         nox=0
 *         if( ((Layer[0]).cyz == -(Layer[0]).czy ) ):
 *             gyro=1             # <<<<<<<<<<<<<<
 *         else:
 *             gyro=0
 */
      __pyx_v_gyro = 1;

      /* "Full_Matrix.pyx":60
 *     else:
 *         nox=0
 *         if( ((Layer[0]).cyz == -(Layer[0]).czy ) ):             # <<<<<<<<<<<<<<
 *             gyro=1
 *         else:
 */
      goto __pyx_L20;
    }

    /* "Full_Matrix.pyx":63
 *             gyro=1
 *         else:
 *             gyro=0             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_v_gyro = 0;
    }
    __pyx_L20:;
  }
  __pyx_L17:;

  /* "Full_Matrix.pyx":68
 *   #  print( "checker:", nox, noy, noz, gyro)
 *   #  print( "checker2:", (Layer[0]).cxy, (Layer[0]).cyx, (Layer[0]).cxz, (Layer[0]).czx, (Layer[0]).cyz, (Layer[0]).czy)
 *     if( (nox+noy+noz)<2 or gyro==0 ):             # <<<<<<<<<<<<<<
 *      #   print("Full chi", nox, noy, noz, gyro)
 *         return
 */
  __pyx_t_2 = ((((__pyx_v_nox + __pyx_v_noy) + __pyx_v_noz) < 2) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L22_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_gyro == 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L22_bool_binop_done:;
  if (__pyx_t_1) {

    /* "Full_Matrix.pyx":70
 *     if( (nox+noy+noz)<2 or gyro==0 ):
 *      #   print("Full chi", nox, noy, noz, gyro)
 *         return             # <<<<<<<<<<<<<<
 *     else:
 *         if( nox and noy and noz ):
 */
    goto __pyx_L0;

    /* "Full_Matrix.pyx":68
 *   #  print( "checker:", nox, noy, noz, gyro)
 *   #  print( "checker2:", (Layer[0]).cxy, (Layer[0]).cyx, (Layer[0]).cxz, (Layer[0]).czx, (Layer[0]).cyz, (Layer[0]).czy)
 *     if( (nox+noy+noz)<2 or gyro==0 ):             # <<<<<<<<<<<<<<
 *      #   print("Full chi", nox, noy, noz, gyro)
 *         return
 */
  }

  /* "Full_Matrix.pyx":72
 *         return
 *     else:
 *         if( nox and noy and noz ):             # <<<<<<<<<<<<<<
 *             (Layer[0]).type=2
 *             (Layer[0]).magdir=0
 */
  /*else*/ {
    __pyx_t_2 = (__pyx_v_nox != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L25_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_noy != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L25_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_noz != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L25_bool_binop_done:;
    if (__pyx_t_1) {

      /* "Full_Matrix.pyx":73
 *     else:
 *         if( nox and noy and noz ):
 *             (Layer[0]).type=2             # <<<<<<<<<<<<<<
 *             (Layer[0]).magdir=0
 *         #    print( "diagonal chi")
 */
      (__pyx_v_Layer[0]).type = 2;

      /* "Full_Matrix.pyx":74
 *         if( nox and noy and noz ):
 *             (Layer[0]).type=2
 *             (Layer[0]).magdir=0             # <<<<<<<<<<<<<<
 *         #    print( "diagonal chi")
 *             return
 */
      (__pyx_v_Layer[0]).magdir = 0;

      /* "Full_Matrix.pyx":76
 *             (Layer[0]).magdir=0
 *         #    print( "diagonal chi")
 *             return             # <<<<<<<<<<<<<<
 *         if( nox and noy ):
 *             (Layer[0]).cg=(Layer[0]).cxy
 */
      goto __pyx_L0;

      /* "Full_Matrix.pyx":72
 *         return
 *     else:
 *         if( nox and noy and noz ):             # <<<<<<<<<<<<<<
 *             (Layer[0]).type=2
 *             (Layer[0]).magdir=0
 */
    }

    /* "Full_Matrix.pyx":77
 *         #    print( "diagonal chi")
 *             return
 *         if( nox and noy ):             # <<<<<<<<<<<<<<
 *             (Layer[0]).cg=(Layer[0]).cxy
 *             (Layer[0]).type=3
 */
    __pyx_t_2 = (__pyx_v_nox != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L29_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_noy != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L29_bool_binop_done:;
    if (__pyx_t_1) {

      /* "Full_Matrix.pyx":78
 *             return
 *         if( nox and noy ):
 *             (Layer[0]).cg=(Layer[0]).cxy             # <<<<<<<<<<<<<<
 *             (Layer[0]).type=3
 *             (Layer[0]).magdir=3
 */
      __pyx_t_3 = (__pyx_v_Layer[0]).cxy;
      (__pyx_v_Layer[0]).cg = __pyx_t_3;

      /* "Full_Matrix.pyx":79
 *         if( nox and noy ):
 *             (Layer[0]).cg=(Layer[0]).cxy
 *             (Layer[0]).type=3             # <<<<<<<<<<<<<<
 *             (Layer[0]).magdir=3
 *             allz[0]=1
 */
      (__pyx_v_Layer[0]).type = 3;

      /* "Full_Matrix.pyx":80
 *             (Layer[0]).cg=(Layer[0]).cxy
 *             (Layer[0]).type=3
 *             (Layer[0]).magdir=3             # <<<<<<<<<<<<<<
 *             allz[0]=1
 *             #print( "Polar Kerr")
 */
      (__pyx_v_Layer[0]).magdir = 3;

      /* "Full_Matrix.pyx":81
 *             (Layer[0]).type=3
 *             (Layer[0]).magdir=3
 *             allz[0]=1             # <<<<<<<<<<<<<<
 *             #print( "Polar Kerr")
 *             return
 */
      (__pyx_v_allz[0]) = 1;

      /* "Full_Matrix.pyx":83
 *             allz[0]=1
 *             #print( "Polar Kerr")
 *             return             # <<<<<<<<<<<<<<
 *         if( nox and noz ):
 *             (Layer[0]).cg=(Layer[0]).cxz
 */
      goto __pyx_L0;

      /* "Full_Matrix.pyx":77
 *         #    print( "diagonal chi")
 *             return
 *         if( nox and noy ):             # <<<<<<<<<<<<<<
 *             (Layer[0]).cg=(Layer[0]).cxy
 *             (Layer[0]).type=3
 */
    }

    /* "Full_Matrix.pyx":84
 *             #print( "Polar Kerr")
 *             return
 *         if( nox and noz ):             # <<<<<<<<<<<<<<
 *             (Layer[0]).cg=(Layer[0]).cxz
 *             (Layer[0]).type=3
 */
    __pyx_t_2 = (__pyx_v_nox != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L32_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_noz != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L32_bool_binop_done:;
    if (__pyx_t_1) {

      /* "Full_Matrix.pyx":85
 *             return
 *         if( nox and noz ):
 *             (Layer[0]).cg=(Layer[0]).cxz             # <<<<<<<<<<<<<<
 *             (Layer[0]).type=3
 *             (Layer[0]).magdir=2
 */
      __pyx_t_3 = (__pyx_v_Layer[0]).cxz;
      (__pyx_v_Layer[0]).cg = __pyx_t_3;

      /* "Full_Matrix.pyx":86
 *         if( nox and noz ):
 *             (Layer[0]).cg=(Layer[0]).cxz
 *             (Layer[0]).type=3             # <<<<<<<<<<<<<<
 *             (Layer[0]).magdir=2
 *             ally[0]=1
 */
      (__pyx_v_Layer[0]).type = 3;

      /* "Full_Matrix.pyx":87
 *             (Layer[0]).cg=(Layer[0]).cxz
 *             (Layer[0]).type=3
 *             (Layer[0]).magdir=2             # <<<<<<<<<<<<<<
 *             ally[0]=1
 *            # print( "Longitudinal Ker")
 */
      (__pyx_v_Layer[0]).magdir = 2;

      /* "Full_Matrix.pyx":88
 *             (Layer[0]).type=3
 *             (Layer[0]).magdir=2
 *             ally[0]=1             # <<<<<<<<<<<<<<
 *            # print( "Longitudinal Ker")
 *             return
 */
      (__pyx_v_ally[0]) = 1;

      /* "Full_Matrix.pyx":90
 *             ally[0]=1
 *            # print( "Longitudinal Ker")
 *             return             # <<<<<<<<<<<<<<
 *         if( noy and noz ):
 *             (Layer[0]).cg=(Layer[0]).czy
 */
      goto __pyx_L0;

      /* "Full_Matrix.pyx":84
 *             #print( "Polar Kerr")
 *             return
 *         if( nox and noz ):             # <<<<<<<<<<<<<<
 *             (Layer[0]).cg=(Layer[0]).cxz
 *             (Layer[0]).type=3
 */
    }

    /* "Full_Matrix.pyx":91
 *            # print( "Longitudinal Ker")
 *             return
 *         if( noy and noz ):             # <<<<<<<<<<<<<<
 *             (Layer[0]).cg=(Layer[0]).czy
 *             (Layer[0]).type=3
 */
    __pyx_t_2 = (__pyx_v_noy != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L35_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_noz != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L35_bool_binop_done:;
    if (__pyx_t_1) {

      /* "Full_Matrix.pyx":92
 *             return
 *         if( noy and noz ):
 *             (Layer[0]).cg=(Layer[0]).czy             # <<<<<<<<<<<<<<
 *             (Layer[0]).type=3
 *             (Layer[0]).magdir=1
 */
      __pyx_t_3 = (__pyx_v_Layer[0]).czy;
      (__pyx_v_Layer[0]).cg = __pyx_t_3;

      /* "Full_Matrix.pyx":93
 *         if( noy and noz ):
 *             (Layer[0]).cg=(Layer[0]).czy
 *             (Layer[0]).type=3             # <<<<<<<<<<<<<<
 *             (Layer[0]).magdir=1
 *             allx[0]=1
 */
      (__pyx_v_Layer[0]).type = 3;

      /* "Full_Matrix.pyx":94
 *             (Layer[0]).cg=(Layer[0]).czy
 *             (Layer[0]).type=3
 *             (Layer[0]).magdir=1             # <<<<<<<<<<<<<<
 *             allx[0]=1
 *            # print( "Transversal Kerr")
 */
      (__pyx_v_Layer[0]).magdir = 1;

      /* "Full_Matrix.pyx":95
 *             (Layer[0]).type=3
 *             (Layer[0]).magdir=1
 *             allx[0]=1             # <<<<<<<<<<<<<<
 *            # print( "Transversal Kerr")
 *             return
 */
      (__pyx_v_allx[0]) = 1;

      /* "Full_Matrix.pyx":97
 *             allx[0]=1
 *            # print( "Transversal Kerr")
 *             return             # <<<<<<<<<<<<<<
 * 
 * 
 */
      goto __pyx_L0;

      /* "Full_Matrix.pyx":91
 *            # print( "Longitudinal Ker")
 *             return
 *         if( noy and noz ):             # <<<<<<<<<<<<<<
 *             (Layer[0]).cg=(Layer[0]).czy
 *             (Layer[0]).type=3
 */
    }
  }

  /* "Full_Matrix.pyx":20
 * 
 * 
 * cdef void Reduce_complexity_of_chi(CLayer *Layer, double Cutoff, int *allx, int *ally, int *allz):             # <<<<<<<<<<<<<<
 *     cdef int nox, noy, noz
 *     cdef int gyro
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "Full_Matrix.pyx":100
 * 
 * 
 * cdef void Fill_Matrixsafer( MatrixSafer *MS, CLayer L ):             # <<<<<<<<<<<<<<
 * 
 *     cdef double complex cx, cy, cz, cxy, cyx, cxz, czx, cyz, czy, cg
 */

static void __pyx_f_11Full_Matrix_Fill_Matrixsafer(struct __pyx_t_10Structural_MatrixSafer *__pyx_v_MS, struct __pyx_t_10Structural_CLayer __pyx_v_L) {
  __pyx_t_double_complex __pyx_v_cx;
  __pyx_t_double_complex __pyx_v_cy;
  __pyx_t_double_complex __pyx_v_cz;
  __pyx_t_double_complex __pyx_v_cxy;
  __pyx_t_double_complex __pyx_v_cyx;
  __pyx_t_double_complex __pyx_v_cxz;
  __pyx_t_double_complex __pyx_v_czx;
  __pyx_t_double_complex __pyx_v_cyz;
  __pyx_t_double_complex __pyx_v_czy;
  __Pyx_RefNannyDeclarations
  __pyx_t_double_complex __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Fill_Matrixsafer", 0);

  /* "Full_Matrix.pyx":103
 * 
 *     cdef double complex cx, cy, cz, cxy, cyx, cxz, czx, cyz, czy, cg
 *     cx=L.cx             # <<<<<<<<<<<<<<
 *     cy=L.cy
 *     cz=L.cz
 */
  __pyx_t_1 = __pyx_v_L.cx;
  __pyx_v_cx = __pyx_t_1;

  /* "Full_Matrix.pyx":104
 *     cdef double complex cx, cy, cz, cxy, cyx, cxz, czx, cyz, czy, cg
 *     cx=L.cx
 *     cy=L.cy             # <<<<<<<<<<<<<<
 *     cz=L.cz
 *     cxy=L.cxy
 */
  __pyx_t_1 = __pyx_v_L.cy;
  __pyx_v_cy = __pyx_t_1;

  /* "Full_Matrix.pyx":105
 *     cx=L.cx
 *     cy=L.cy
 *     cz=L.cz             # <<<<<<<<<<<<<<
 *     cxy=L.cxy
 *     cyx=L.cyx
 */
  __pyx_t_1 = __pyx_v_L.cz;
  __pyx_v_cz = __pyx_t_1;

  /* "Full_Matrix.pyx":106
 *     cy=L.cy
 *     cz=L.cz
 *     cxy=L.cxy             # <<<<<<<<<<<<<<
 *     cyx=L.cyx
 *     cxz=L.cxz
 */
  __pyx_t_1 = __pyx_v_L.cxy;
  __pyx_v_cxy = __pyx_t_1;

  /* "Full_Matrix.pyx":107
 *     cz=L.cz
 *     cxy=L.cxy
 *     cyx=L.cyx             # <<<<<<<<<<<<<<
 *     cxz=L.cxz
 *     czx=L.czx
 */
  __pyx_t_1 = __pyx_v_L.cyx;
  __pyx_v_cyx = __pyx_t_1;

  /* "Full_Matrix.pyx":108
 *     cxy=L.cxy
 *     cyx=L.cyx
 *     cxz=L.cxz             # <<<<<<<<<<<<<<
 *     czx=L.czx
 *     cyz=L.cyz
 */
  __pyx_t_1 = __pyx_v_L.cxz;
  __pyx_v_cxz = __pyx_t_1;

  /* "Full_Matrix.pyx":109
 *     cyx=L.cyx
 *     cxz=L.cxz
 *     czx=L.czx             # <<<<<<<<<<<<<<
 *     cyz=L.cyz
 *     czy=L.czy
 */
  __pyx_t_1 = __pyx_v_L.czx;
  __pyx_v_czx = __pyx_t_1;

  /* "Full_Matrix.pyx":110
 *     cxz=L.cxz
 *     czx=L.czx
 *     cyz=L.cyz             # <<<<<<<<<<<<<<
 *     czy=L.czy
 * 
 */
  __pyx_t_1 = __pyx_v_L.cyz;
  __pyx_v_cyz = __pyx_t_1;

  /* "Full_Matrix.pyx":111
 *     czx=L.czx
 *     cyz=L.cyz
 *     czy=L.czy             # <<<<<<<<<<<<<<
 * 
 *    # print("hi")
 */
  __pyx_t_1 = __pyx_v_L.czy;
  __pyx_v_czy = __pyx_t_1;

  /* "Full_Matrix.pyx":114
 * 
 *    # print("hi")
 *     (MS[0]).IsFilled=1             # <<<<<<<<<<<<<<
 *     (MS[0]).exx=cx+1.
 *     (MS[0]).eyy=cy+1.
 */
  (__pyx_v_MS[0]).IsFilled = 1;

  /* "Full_Matrix.pyx":115
 *    # print("hi")
 *     (MS[0]).IsFilled=1
 *     (MS[0]).exx=cx+1.             # <<<<<<<<<<<<<<
 *     (MS[0]).eyy=cy+1.
 *     (MS[0]).ezz=cz+1.
 */
  (__pyx_v_MS[0]).exx = __Pyx_c_sum_double(__pyx_v_cx, __pyx_t_double_complex_from_parts(1., 0));

  /* "Full_Matrix.pyx":116
 *     (MS[0]).IsFilled=1
 *     (MS[0]).exx=cx+1.
 *     (MS[0]).eyy=cy+1.             # <<<<<<<<<<<<<<
 *     (MS[0]).ezz=cz+1.
 * 
 */
  (__pyx_v_MS[0]).eyy = __Pyx_c_sum_double(__pyx_v_cy, __pyx_t_double_complex_from_parts(1., 0));

  /* "Full_Matrix.pyx":117
 *     (MS[0]).exx=cx+1.
 *     (MS[0]).eyy=cy+1.
 *     (MS[0]).ezz=cz+1.             # <<<<<<<<<<<<<<
 * 
 *     (MS[0]).Mx=czy+cyz
 */
  (__pyx_v_MS[0]).ezz = __Pyx_c_sum_double(__pyx_v_cz, __pyx_t_double_complex_from_parts(1., 0));

  /* "Full_Matrix.pyx":119
 *     (MS[0]).ezz=cz+1.
 * 
 *     (MS[0]).Mx=czy+cyz             # <<<<<<<<<<<<<<
 *     (MS[0]).exyyx=cxy*cyx
 *     (MS[0]).exzzx=cxz*czx
 */
  (__pyx_v_MS[0]).Mx = __Pyx_c_sum_double(__pyx_v_czy, __pyx_v_cyz);

  /* "Full_Matrix.pyx":120
 * 
 *     (MS[0]).Mx=czy+cyz
 *     (MS[0]).exyyx=cxy*cyx             # <<<<<<<<<<<<<<
 *     (MS[0]).exzzx=cxz*czx
 *     (MS[0]).eyzzy=cyz*czy
 */
  (__pyx_v_MS[0]).exyyx = __Pyx_c_prod_double(__pyx_v_cxy, __pyx_v_cyx);

  /* "Full_Matrix.pyx":121
 *     (MS[0]).Mx=czy+cyz
 *     (MS[0]).exyyx=cxy*cyx
 *     (MS[0]).exzzx=cxz*czx             # <<<<<<<<<<<<<<
 *     (MS[0]).eyzzy=cyz*czy
 *     (MS[0]).crossmag=cxy*cyz*czx + cxz*cyx*czy
 */
  (__pyx_v_MS[0]).exzzx = __Pyx_c_prod_double(__pyx_v_cxz, __pyx_v_czx);

  /* "Full_Matrix.pyx":122
 *     (MS[0]).exyyx=cxy*cyx
 *     (MS[0]).exzzx=cxz*czx
 *     (MS[0]).eyzzy=cyz*czy             # <<<<<<<<<<<<<<
 *     (MS[0]).crossmag=cxy*cyz*czx + cxz*cyx*czy
 * 
 */
  (__pyx_v_MS[0]).eyzzy = __Pyx_c_prod_double(__pyx_v_cyz, __pyx_v_czy);

  /* "Full_Matrix.pyx":123
 *     (MS[0]).exzzx=cxz*czx
 *     (MS[0]).eyzzy=cyz*czy
 *     (MS[0]).crossmag=cxy*cyz*czx + cxz*cyx*czy             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_MS[0]).crossmag = __Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_v_cxy, __pyx_v_cyz), __pyx_v_czx), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_v_cxz, __pyx_v_cyx), __pyx_v_czy));

  /* "Full_Matrix.pyx":127
 * 
 * 
 *     (MS[0]).summag=(MS[0]).exzzx + (MS[0]).eyzzy             # <<<<<<<<<<<<<<
 *     (MS[0]).mixmag=cxy*czx + cxz*cyx
 * 
 */
  (__pyx_v_MS[0]).summag = __Pyx_c_sum_double((__pyx_v_MS[0]).exzzx, (__pyx_v_MS[0]).eyzzy);

  /* "Full_Matrix.pyx":128
 * 
 *     (MS[0]).summag=(MS[0]).exzzx + (MS[0]).eyzzy
 *     (MS[0]).mixmag=cxy*czx + cxz*cyx             # <<<<<<<<<<<<<<
 * 
 *     if( (cxy==cyx) and (cxz==-czx) ):
 */
  (__pyx_v_MS[0]).mixmag = __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_cxy, __pyx_v_czx), __Pyx_c_prod_double(__pyx_v_cxz, __pyx_v_cyx));

  /* "Full_Matrix.pyx":130
 *     (MS[0]).mixmag=cxy*czx + cxz*cyx
 * 
 *     if( (cxy==cyx) and (cxz==-czx) ):             # <<<<<<<<<<<<<<
 *         (MS[0]).mixmag=0
 *     elif( (cxy==-cyx) and (cxz==czx) ):
 */
  __pyx_t_3 = ((__Pyx_c_eq_double(__pyx_v_cxy, __pyx_v_cyx)) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = ((__Pyx_c_eq_double(__pyx_v_cxz, __Pyx_c_neg_double(__pyx_v_czx))) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "Full_Matrix.pyx":131
 * 
 *     if( (cxy==cyx) and (cxz==-czx) ):
 *         (MS[0]).mixmag=0             # <<<<<<<<<<<<<<
 *     elif( (cxy==-cyx) and (cxz==czx) ):
 *         (MS[0]).mixmag=0
 */
    (__pyx_v_MS[0]).mixmag = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":130
 *     (MS[0]).mixmag=cxy*czx + cxz*cyx
 * 
 *     if( (cxy==cyx) and (cxz==-czx) ):             # <<<<<<<<<<<<<<
 *         (MS[0]).mixmag=0
 *     elif( (cxy==-cyx) and (cxz==czx) ):
 */
    goto __pyx_L3;
  }

  /* "Full_Matrix.pyx":132
 *     if( (cxy==cyx) and (cxz==-czx) ):
 *         (MS[0]).mixmag=0
 *     elif( (cxy==-cyx) and (cxz==czx) ):             # <<<<<<<<<<<<<<
 *         (MS[0]).mixmag=0
 * 
 */
  __pyx_t_3 = ((__Pyx_c_eq_double(__pyx_v_cxy, __Pyx_c_neg_double(__pyx_v_cyx))) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_3 = ((__Pyx_c_eq_double(__pyx_v_cxz, __pyx_v_czx)) != 0);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L6_bool_binop_done:;
  if (__pyx_t_2) {

    /* "Full_Matrix.pyx":133
 *         (MS[0]).mixmag=0
 *     elif( (cxy==-cyx) and (cxz==czx) ):
 *         (MS[0]).mixmag=0             # <<<<<<<<<<<<<<
 * 
 *     (MS[0]).inverseezz = 1.0/(MS[0]).ezz
 */
    (__pyx_v_MS[0]).mixmag = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":132
 *     if( (cxy==cyx) and (cxz==-czx) ):
 *         (MS[0]).mixmag=0
 *     elif( (cxy==-cyx) and (cxz==czx) ):             # <<<<<<<<<<<<<<
 *         (MS[0]).mixmag=0
 * 
 */
  }
  __pyx_L3:;

  /* "Full_Matrix.pyx":135
 *         (MS[0]).mixmag=0
 * 
 *     (MS[0]).inverseezz = 1.0/(MS[0]).ezz             # <<<<<<<<<<<<<<
 * 
 *     (MS[0]).D21ic=(MS[0]).exx-(MS[0]).exzzx*(MS[0]).inverseezz
 */
  __pyx_t_1 = __pyx_t_double_complex_from_parts(1.0, 0);
  if (unlikely(__Pyx_c_is_zero_double((__pyx_v_MS[0]).ezz))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 135, __pyx_L1_error)
  }
  (__pyx_v_MS[0]).inverseezz = __Pyx_c_quot_double(__pyx_t_1, (__pyx_v_MS[0]).ezz);

  /* "Full_Matrix.pyx":137
 *     (MS[0]).inverseezz = 1.0/(MS[0]).ezz
 * 
 *     (MS[0]).D21ic=(MS[0]).exx-(MS[0]).exzzx*(MS[0]).inverseezz             # <<<<<<<<<<<<<<
 *     (MS[0]).D23=cxy-cxz*czy*(MS[0]).inverseezz
 *     (MS[0]).D24ic=-cxz*(MS[0]).inverseezz
 */
  (__pyx_v_MS[0]).D21ic = __Pyx_c_diff_double((__pyx_v_MS[0]).exx, __Pyx_c_prod_double((__pyx_v_MS[0]).exzzx, (__pyx_v_MS[0]).inverseezz));

  /* "Full_Matrix.pyx":138
 * 
 *     (MS[0]).D21ic=(MS[0]).exx-(MS[0]).exzzx*(MS[0]).inverseezz
 *     (MS[0]).D23=cxy-cxz*czy*(MS[0]).inverseezz             # <<<<<<<<<<<<<<
 *     (MS[0]).D24ic=-cxz*(MS[0]).inverseezz
 * 
 */
  (__pyx_v_MS[0]).D23 = __Pyx_c_diff_double(__pyx_v_cxy, __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_v_cxz, __pyx_v_czy), (__pyx_v_MS[0]).inverseezz));

  /* "Full_Matrix.pyx":139
 *     (MS[0]).D21ic=(MS[0]).exx-(MS[0]).exzzx*(MS[0]).inverseezz
 *     (MS[0]).D23=cxy-cxz*czy*(MS[0]).inverseezz
 *     (MS[0]).D24ic=-cxz*(MS[0]).inverseezz             # <<<<<<<<<<<<<<
 * 
 *     (MS[0]).D31ic=-czx*(MS[0]).inverseezz
 */
  (__pyx_v_MS[0]).D24ic = __Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_cxz), (__pyx_v_MS[0]).inverseezz);

  /* "Full_Matrix.pyx":141
 *     (MS[0]).D24ic=-cxz*(MS[0]).inverseezz
 * 
 *     (MS[0]).D31ic=-czx*(MS[0]).inverseezz             # <<<<<<<<<<<<<<
 *     (MS[0]).D33ic=-czy*(MS[0]).inverseezz
 * 
 */
  (__pyx_v_MS[0]).D31ic = __Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_czx), (__pyx_v_MS[0]).inverseezz);

  /* "Full_Matrix.pyx":142
 * 
 *     (MS[0]).D31ic=-czx*(MS[0]).inverseezz
 *     (MS[0]).D33ic=-czy*(MS[0]).inverseezz             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_MS[0]).D33ic = __Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_czy), (__pyx_v_MS[0]).inverseezz);

  /* "Full_Matrix.pyx":145
 * 
 * 
 *     (MS[0]).D41=cyx-cyz*czx*(MS[0]).inverseezz             # <<<<<<<<<<<<<<
 *     (MS[0]).D43=(MS[0]).eyy-(MS[0]).eyzzy*(MS[0]).inverseezz
 *     (MS[0]).D44ic=-cyz*(MS[0]).inverseezz
 */
  (__pyx_v_MS[0]).D41 = __Pyx_c_diff_double(__pyx_v_cyx, __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_v_cyz, __pyx_v_czx), (__pyx_v_MS[0]).inverseezz));

  /* "Full_Matrix.pyx":146
 * 
 *     (MS[0]).D41=cyx-cyz*czx*(MS[0]).inverseezz
 *     (MS[0]).D43=(MS[0]).eyy-(MS[0]).eyzzy*(MS[0]).inverseezz             # <<<<<<<<<<<<<<
 *     (MS[0]).D44ic=-cyz*(MS[0]).inverseezz
 * 
 */
  (__pyx_v_MS[0]).D43 = __Pyx_c_diff_double((__pyx_v_MS[0]).eyy, __Pyx_c_prod_double((__pyx_v_MS[0]).eyzzy, (__pyx_v_MS[0]).inverseezz));

  /* "Full_Matrix.pyx":147
 *     (MS[0]).D41=cyx-cyz*czx*(MS[0]).inverseezz
 *     (MS[0]).D43=(MS[0]).eyy-(MS[0]).eyzzy*(MS[0]).inverseezz
 *     (MS[0]).D44ic=-cyz*(MS[0]).inverseezz             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (__pyx_v_MS[0]).D44ic = __Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_cyz), (__pyx_v_MS[0]).inverseezz);

  /* "Full_Matrix.pyx":100
 * 
 * 
 * cdef void Fill_Matrixsafer( MatrixSafer *MS, CLayer L ):             # <<<<<<<<<<<<<<
 * 
 *     cdef double complex cx, cy, cz, cxy, cyx, cxz, czx, cyz, czy, cg
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("Full_Matrix.Fill_Matrixsafer", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "Full_Matrix.pyx":150
 * 
 * 
 * cdef void NormalizePHI(double complex (*PHI)[4][4] ):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, j
 */

static void __pyx_f_11Full_Matrix_NormalizePHI(__pyx_t_double_complex (*__pyx_v_PHI)[4][4]) {
  int __pyx_v_i;
  int __pyx_v_j;
  double __pyx_v_sum1;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  long __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __pyx_t_double_complex __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NormalizePHI", 0);

  /* "Full_Matrix.pyx":155
 *     cdef double sum1
 * 
 *     for i in range(4):             # <<<<<<<<<<<<<<
 *         sum1=0
 *         for j in range(4):
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "Full_Matrix.pyx":156
 * 
 *     for i in range(4):
 *         sum1=0             # <<<<<<<<<<<<<<
 *         for j in range(4):
 *             sum1+=cabsquadr( (PHI[0])[j][i] )
 */
    __pyx_v_sum1 = 0.0;

    /* "Full_Matrix.pyx":157
 *     for i in range(4):
 *         sum1=0
 *         for j in range(4):             # <<<<<<<<<<<<<<
 *             sum1+=cabsquadr( (PHI[0])[j][i] )
 *         sum1=dsqrt(sum1)
 */
    for (__pyx_t_2 = 0; __pyx_t_2 < 4; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;

      /* "Full_Matrix.pyx":158
 *         sum1=0
 *         for j in range(4):
 *             sum1+=cabsquadr( (PHI[0])[j][i] )             # <<<<<<<<<<<<<<
 *         sum1=dsqrt(sum1)
 *         for j in range(4):
 */
      __pyx_v_sum1 = (__pyx_v_sum1 + __pyx_f_35Mathematical_Functions_Reflectivity_cabsquadr((((__pyx_v_PHI[0])[__pyx_v_j])[__pyx_v_i])));
    }

    /* "Full_Matrix.pyx":159
 *         for j in range(4):
 *             sum1+=cabsquadr( (PHI[0])[j][i] )
 *         sum1=dsqrt(sum1)             # <<<<<<<<<<<<<<
 *         for j in range(4):
 *             (PHI[0])[j][i]/=sum1
 */
    __pyx_v_sum1 = sqrt(__pyx_v_sum1);

    /* "Full_Matrix.pyx":160
 *             sum1+=cabsquadr( (PHI[0])[j][i] )
 *         sum1=dsqrt(sum1)
 *         for j in range(4):             # <<<<<<<<<<<<<<
 *             (PHI[0])[j][i]/=sum1
 * 
 */
    for (__pyx_t_2 = 0; __pyx_t_2 < 4; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;

      /* "Full_Matrix.pyx":161
 *         sum1=dsqrt(sum1)
 *         for j in range(4):
 *             (PHI[0])[j][i]/=sum1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = 0;
      __pyx_t_4 = __pyx_v_j;
      __pyx_t_5 = __pyx_v_i;
      __pyx_t_6 = __pyx_t_double_complex_from_parts(__pyx_v_sum1, 0);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_6))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 161, __pyx_L1_error)
      }
      (((__pyx_v_PHI[__pyx_t_3])[__pyx_t_4])[__pyx_t_5]) = __Pyx_c_quot_double((((__pyx_v_PHI[__pyx_t_3])[__pyx_t_4])[__pyx_t_5]), __pyx_t_6);
    }
  }

  /* "Full_Matrix.pyx":150
 * 
 * 
 * cdef void NormalizePHI(double complex (*PHI)[4][4] ):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, j
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("Full_Matrix.NormalizePHI", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "Full_Matrix.pyx":164
 * 
 * 
 * cdef void NormalizePSI(double complex (*PSI)[4][4] ):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, j
 */

static void __pyx_f_11Full_Matrix_NormalizePSI(__pyx_t_double_complex (*__pyx_v_PSI)[4][4]) {
  int __pyx_v_i;
  int __pyx_v_j;
  double __pyx_v_sum1;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  long __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __pyx_t_double_complex __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NormalizePSI", 0);

  /* "Full_Matrix.pyx":169
 *     cdef double sum1
 * 
 *     for i in range(4):             # <<<<<<<<<<<<<<
 *         sum1=0
 *         for j in range(4):
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "Full_Matrix.pyx":170
 * 
 *     for i in range(4):
 *         sum1=0             # <<<<<<<<<<<<<<
 *         for j in range(4):
 *             sum1+=cabsquadr( (PSI[0])[i][j] )
 */
    __pyx_v_sum1 = 0.0;

    /* "Full_Matrix.pyx":171
 *     for i in range(4):
 *         sum1=0
 *         for j in range(4):             # <<<<<<<<<<<<<<
 *             sum1+=cabsquadr( (PSI[0])[i][j] )
 *         sum1=dsqrt(sum1)
 */
    for (__pyx_t_2 = 0; __pyx_t_2 < 4; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;

      /* "Full_Matrix.pyx":172
 *         sum1=0
 *         for j in range(4):
 *             sum1+=cabsquadr( (PSI[0])[i][j] )             # <<<<<<<<<<<<<<
 *         sum1=dsqrt(sum1)
 *         for j in range(4):
 */
      __pyx_v_sum1 = (__pyx_v_sum1 + __pyx_f_35Mathematical_Functions_Reflectivity_cabsquadr((((__pyx_v_PSI[0])[__pyx_v_i])[__pyx_v_j])));
    }

    /* "Full_Matrix.pyx":173
 *         for j in range(4):
 *             sum1+=cabsquadr( (PSI[0])[i][j] )
 *         sum1=dsqrt(sum1)             # <<<<<<<<<<<<<<
 *         for j in range(4):
 *             (PSI[0])[i][j]/=sum1
 */
    __pyx_v_sum1 = sqrt(__pyx_v_sum1);

    /* "Full_Matrix.pyx":174
 *             sum1+=cabsquadr( (PSI[0])[i][j] )
 *         sum1=dsqrt(sum1)
 *         for j in range(4):             # <<<<<<<<<<<<<<
 *             (PSI[0])[i][j]/=sum1
 * 
 */
    for (__pyx_t_2 = 0; __pyx_t_2 < 4; __pyx_t_2+=1) {
      __pyx_v_j = __pyx_t_2;

      /* "Full_Matrix.pyx":175
 *         sum1=dsqrt(sum1)
 *         for j in range(4):
 *             (PSI[0])[i][j]/=sum1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = 0;
      __pyx_t_4 = __pyx_v_i;
      __pyx_t_5 = __pyx_v_j;
      __pyx_t_6 = __pyx_t_double_complex_from_parts(__pyx_v_sum1, 0);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_6))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 175, __pyx_L1_error)
      }
      (((__pyx_v_PSI[__pyx_t_3])[__pyx_t_4])[__pyx_t_5]) = __Pyx_c_quot_double((((__pyx_v_PSI[__pyx_t_3])[__pyx_t_4])[__pyx_t_5]), __pyx_t_6);
    }
  }

  /* "Full_Matrix.pyx":164
 * 
 * 
 * cdef void NormalizePSI(double complex (*PSI)[4][4] ):             # <<<<<<<<<<<<<<
 * 
 *     cdef int i, j
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("Full_Matrix.NormalizePSI", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "Full_Matrix.pyx":178
 * 
 * 
 * cdef void Calculate_Phi_and_Psi(CLayer L, MatrixSafer *MS, double vy, double vzvz, double vyvy, double complex (*vz)[4], double complex (*PHI)[4][4], double complex (*PSI)[4][4]):             # <<<<<<<<<<<<<<
 * 
 *     cdef double complex cx, cy, cz, cxy, cyx, cxz, czx, cyz, czy, cg
 */

static void __pyx_f_11Full_Matrix_Calculate_Phi_and_Psi(struct __pyx_t_10Structural_CLayer __pyx_v_L, struct __pyx_t_10Structural_MatrixSafer *__pyx_v_MS, double __pyx_v_vy, double __pyx_v_vzvz, double __pyx_v_vyvy, __pyx_t_double_complex (*__pyx_v_vz)[4], __pyx_t_double_complex (*__pyx_v_PHI)[4][4], __pyx_t_double_complex (*__pyx_v_PSI)[4][4]) {
  __pyx_t_double_complex __pyx_v_cx;
  __pyx_t_double_complex __pyx_v_cy;
  __pyx_t_double_complex __pyx_v_cz;
  CYTHON_UNUSED __pyx_t_double_complex __pyx_v_cxy;
  CYTHON_UNUSED __pyx_t_double_complex __pyx_v_cyx;
  CYTHON_UNUSED __pyx_t_double_complex __pyx_v_cxz;
  CYTHON_UNUSED __pyx_t_double_complex __pyx_v_czx;
  CYTHON_UNUSED __pyx_t_double_complex __pyx_v_cyz;
  CYTHON_UNUSED __pyx_t_double_complex __pyx_v_czy;
  __pyx_t_double_complex __pyx_v_cg;
  __pyx_t_double_complex __pyx_v_a;
  __pyx_t_double_complex __pyx_v_b;
  __pyx_t_double_complex __pyx_v_c;
  __pyx_t_double_complex __pyx_v_d;
  __pyx_t_double_complex __pyx_v_bu;
  __pyx_t_double_complex __pyx_v_bm;
  __pyx_t_double_complex __pyx_v_du;
  __pyx_t_double_complex __pyx_v_dm;
  __pyx_t_double_complex __pyx_v_vsigmasquared;
  __pyx_t_double_complex __pyx_v_vpisquared;
  __pyx_t_double_complex __pyx_v_vsigma;
  __pyx_t_double_complex __pyx_v_vpi;
  __pyx_t_double_complex __pyx_v_one_minus_vyvy_div_ezz;
  __pyx_t_double_complex __pyx_v_eyzzy_div_ezz;
  __pyx_t_double_complex __pyx_v_xld;
  __pyx_t_double_complex __pyx_v_aquadr;
  __pyx_t_double_complex __pyx_v_bquadr;
  __pyx_t_double_complex __pyx_v_dquadr;
  __pyx_t_double_complex __pyx_v_bd_splitter;
  __pyx_t_double_complex __pyx_v_min_a_div_4;
  __pyx_t_double_complex __pyx_v_ri_bd;
  __pyx_t_double_complex __pyx_v_ri_ac;
  __pyx_t_double_complex __pyx_v_ri;
  __pyx_t_double_complex __pyx_v_root;
  __pyx_t_double_complex __pyx_v_Delta0;
  __pyx_t_double_complex __pyx_v_Delta0_ac;
  __pyx_t_double_complex __pyx_v_Delta0_bd;
  __pyx_t_double_complex __pyx_v_Delta1;
  __pyx_t_double_complex __pyx_v_Delta1_ac;
  __pyx_t_double_complex __pyx_v_Delta1_bd;
  __pyx_t_double_complex __pyx_v_Qinternal;
  __pyx_t_double_complex __pyx_v_Q;
  __pyx_t_double_complex __pyx_v_p;
  __pyx_t_double_complex __pyx_v_qu;
  __pyx_t_double_complex __pyx_v_qm;
  __pyx_t_double_complex __pyx_v_q;
  __pyx_t_double_complex __pyx_v_Qsquared;
  __pyx_t_double_complex __pyx_v_q_div_S;
  __pyx_t_double_complex __pyx_v_pm;
  __pyx_t_double_complex __pyx_v_S;
  __pyx_t_double_complex __pyx_v_F1;
  __pyx_t_double_complex __pyx_v_F2;
  __pyx_t_double_complex __pyx_v_M;
  __pyx_t_double_complex __pyx_v_vrem[4];
  __pyx_t_double_complex __pyx_v_D21_min_SS;
  __pyx_t_double_complex __pyx_v_D21_min_vzsq[4];
  __pyx_t_double_complex __pyx_v_D34D43_min_vD33vD44[4];
  __pyx_t_double_complex __pyx_v_phipre[4];
  __pyx_t_double_complex __pyx_v_rel34u[4];
  __pyx_t_double_complex __pyx_v_rel34m[4];
  __pyx_t_double_complex __pyx_v_rel34[4];
  __pyx_t_double_complex __pyx_v_bs1;
  __pyx_t_double_complex __pyx_v_bs2;
  __pyx_t_double_complex __pyx_v_bs3;
  __pyx_t_double_complex __pyx_v_bs4;
  __pyx_t_double_complex __pyx_v_bs5;
  __pyx_t_double_complex __pyx_v_bs6;
  __pyx_t_double_complex __pyx_v_bs7;
  __pyx_t_double_complex __pyx_v_bs8;
  __pyx_t_double_complex __pyx_v_denom;
  double __pyx_v_comp1;
  double __pyx_v_comp2;
  double __pyx_v_comp3;
  double __pyx_v_comp6;
  double __pyx_v_maxdiag;
  CYTHON_UNUSED __pyx_t_double_complex __pyx_v_D21;
  __pyx_t_double_complex __pyx_v_D31;
  __pyx_t_double_complex __pyx_v_D33;
  __pyx_t_double_complex __pyx_v_D44;
  __pyx_t_double_complex __pyx_v_D24;
  __pyx_t_double_complex __pyx_v_testzero;
  __pyx_t_double_complex __pyx_v_testzerosq;
  __pyx_t_double_complex __pyx_v_small_c_correction;
  __pyx_t_double_complex __pyx_v_small_c_error;
  __pyx_t_double_complex __pyx_v_small_a_correction;
  __pyx_t_double_complex __pyx_v_small_a_error;
  int __pyx_v_use_perturbative_aczero_case;
  __pyx_t_double_complex __pyx_v_xld_min;
  __pyx_t_double_complex __pyx_v_mag_vs_xld;
  long __pyx_v_i;
  PyObject *__pyx_v_Delta0quadr = NULL;
  PyObject *__pyx_v_Deltaremainder = NULL;
  PyObject *__pyx_v_root_MqS1 = NULL;
  PyObject *__pyx_v_root_MqS2 = NULL;
  long __pyx_v_j;
  __Pyx_RefNannyDeclarations
  __pyx_t_double_complex __pyx_t_1;
  __pyx_t_double_complex __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  long __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __pyx_t_double_complex __pyx_t_9;
  __pyx_t_double_complex __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  long __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Calculate_Phi_and_Psi", 0);

  /* "Full_Matrix.pyx":181
 * 
 *     cdef double complex cx, cy, cz, cxy, cyx, cxz, czx, cyz, czy, cg
 *     cx=L.cx             # <<<<<<<<<<<<<<
 *     cy=L.cy
 *     cz=L.cz
 */
  __pyx_t_1 = __pyx_v_L.cx;
  __pyx_v_cx = __pyx_t_1;

  /* "Full_Matrix.pyx":182
 *     cdef double complex cx, cy, cz, cxy, cyx, cxz, czx, cyz, czy, cg
 *     cx=L.cx
 *     cy=L.cy             # <<<<<<<<<<<<<<
 *     cz=L.cz
 *     cxy=L.cxy
 */
  __pyx_t_1 = __pyx_v_L.cy;
  __pyx_v_cy = __pyx_t_1;

  /* "Full_Matrix.pyx":183
 *     cx=L.cx
 *     cy=L.cy
 *     cz=L.cz             # <<<<<<<<<<<<<<
 *     cxy=L.cxy
 *     cyx=L.cyx
 */
  __pyx_t_1 = __pyx_v_L.cz;
  __pyx_v_cz = __pyx_t_1;

  /* "Full_Matrix.pyx":184
 *     cy=L.cy
 *     cz=L.cz
 *     cxy=L.cxy             # <<<<<<<<<<<<<<
 *     cyx=L.cyx
 *     cxz=L.cxz
 */
  __pyx_t_1 = __pyx_v_L.cxy;
  __pyx_v_cxy = __pyx_t_1;

  /* "Full_Matrix.pyx":185
 *     cz=L.cz
 *     cxy=L.cxy
 *     cyx=L.cyx             # <<<<<<<<<<<<<<
 *     cxz=L.cxz
 *     czx=L.czx
 */
  __pyx_t_1 = __pyx_v_L.cyx;
  __pyx_v_cyx = __pyx_t_1;

  /* "Full_Matrix.pyx":186
 *     cxy=L.cxy
 *     cyx=L.cyx
 *     cxz=L.cxz             # <<<<<<<<<<<<<<
 *     czx=L.czx
 *     cyz=L.cyz
 */
  __pyx_t_1 = __pyx_v_L.cxz;
  __pyx_v_cxz = __pyx_t_1;

  /* "Full_Matrix.pyx":187
 *     cyx=L.cyx
 *     cxz=L.cxz
 *     czx=L.czx             # <<<<<<<<<<<<<<
 *     cyz=L.cyz
 *     czy=L.czy
 */
  __pyx_t_1 = __pyx_v_L.czx;
  __pyx_v_czx = __pyx_t_1;

  /* "Full_Matrix.pyx":188
 *     cxz=L.cxz
 *     czx=L.czx
 *     cyz=L.cyz             # <<<<<<<<<<<<<<
 *     czy=L.czy
 *     cg=L.cg
 */
  __pyx_t_1 = __pyx_v_L.cyz;
  __pyx_v_cyz = __pyx_t_1;

  /* "Full_Matrix.pyx":189
 *     czx=L.czx
 *     cyz=L.cyz
 *     czy=L.czy             # <<<<<<<<<<<<<<
 *     cg=L.cg
 *     cdef double complex a,b,c,d # For the forth order polynomial
 */
  __pyx_t_1 = __pyx_v_L.czy;
  __pyx_v_czy = __pyx_t_1;

  /* "Full_Matrix.pyx":190
 *     cyz=L.cyz
 *     czy=L.czy
 *     cg=L.cg             # <<<<<<<<<<<<<<
 *     cdef double complex a,b,c,d # For the forth order polynomial
 *     cdef double complex bu, bm, du, dm
 */
  __pyx_t_1 = __pyx_v_L.cg;
  __pyx_v_cg = __pyx_t_1;

  /* "Full_Matrix.pyx":226
 *     cdef int use_perturbative_aczero_case
 *     cdef int switch
 *     cdef double complex xld_min=1.0e-25             # <<<<<<<<<<<<<<
 *     ###DEBUG
 *     cdef double evch[4][4]
 */
  __pyx_v_xld_min = __pyx_t_double_complex_from_parts(1.0e-25, 0);

  /* "Full_Matrix.pyx":231
 *     cdef double complex mag_vs_xld
 * 
 *     if( L.type==4 ):             # <<<<<<<<<<<<<<
 *         eyzzy_div_ezz = (MS[0]).eyzzy*(MS[0]).inverseezz
 * 
 */
  switch (__pyx_v_L.type) {
    case 4:

    /* "Full_Matrix.pyx":232
 * 
 *     if( L.type==4 ):
 *         eyzzy_div_ezz = (MS[0]).eyzzy*(MS[0]).inverseezz             # <<<<<<<<<<<<<<
 * 
 *         xld = ( (cy-cx) + vyvy*(cz-cy)*(MS[0]).inverseezz ) - eyzzy_div_ezz
 */
    __pyx_v_eyzzy_div_ezz = __Pyx_c_prod_double((__pyx_v_MS[0]).eyzzy, (__pyx_v_MS[0]).inverseezz);

    /* "Full_Matrix.pyx":234
 *         eyzzy_div_ezz = (MS[0]).eyzzy*(MS[0]).inverseezz
 * 
 *         xld = ( (cy-cx) + vyvy*(cz-cy)*(MS[0]).inverseezz ) - eyzzy_div_ezz             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_xld = __Pyx_c_diff_double(__Pyx_c_sum_double(__Pyx_c_diff_double(__pyx_v_cy, __pyx_v_cx), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0), __Pyx_c_diff_double(__pyx_v_cz, __pyx_v_cy)), (__pyx_v_MS[0]).inverseezz)), __pyx_v_eyzzy_div_ezz);

    /* "Full_Matrix.pyx":238
 * 
 * 
 *         one_minus_vyvy_div_ezz=(1.-vyvy*(MS[0]).inverseezz)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_one_minus_vyvy_div_ezz = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1., 0), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0), (__pyx_v_MS[0]).inverseezz));

    /* "Full_Matrix.pyx":241
 * 
 * 
 *         a=vy*(MS[0]).Mx*(MS[0]).inverseezz             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_a = __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vy, 0), (__pyx_v_MS[0]).Mx), (__pyx_v_MS[0]).inverseezz);

    /* "Full_Matrix.pyx":244
 * 
 * 
 *         vsigmasquared = vzvz +cx             # <<<<<<<<<<<<<<
 *      #   print("start")
 * 
 */
    __pyx_v_vsigmasquared = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(__pyx_v_vzvz, 0), __pyx_v_cx);

    /* "Full_Matrix.pyx":249
 *       #  vsigmasquared = (MS[0]).exx -vyvy
 * 
 *         vpisquared = (cz + vzvz)*(MS[0]).eyy*(MS[0]).inverseezz-eyzzy_div_ezz             # <<<<<<<<<<<<<<
 *        # print( vpisquared )
 *        # vpisquared = one_minus_vyvy_div_ezz*(MS[0]).eyy-eyzzy_div_ezz
 */
    __pyx_v_vpisquared = __Pyx_c_diff_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_sum_double(__pyx_v_cz, __pyx_t_double_complex_from_parts(__pyx_v_vzvz, 0)), (__pyx_v_MS[0]).eyy), (__pyx_v_MS[0]).inverseezz), __pyx_v_eyzzy_div_ezz);

    /* "Full_Matrix.pyx":253
 *        # vpisquared = one_minus_vyvy_div_ezz*(MS[0]).eyy-eyzzy_div_ezz
 *        # print( vpisquared )
 *         bu = -vsigmasquared-vpisquared             # <<<<<<<<<<<<<<
 *         bm= +(MS[0]).exzzx*(MS[0]).inverseezz
 * 
 */
    __pyx_v_bu = __Pyx_c_diff_double(__Pyx_c_neg_double(__pyx_v_vsigmasquared), __pyx_v_vpisquared);

    /* "Full_Matrix.pyx":254
 *        # print( vpisquared )
 *         bu = -vsigmasquared-vpisquared
 *         bm= +(MS[0]).exzzx*(MS[0]).inverseezz             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_bm = __Pyx_c_prod_double((__pyx_v_MS[0]).exzzx, (__pyx_v_MS[0]).inverseezz);

    /* "Full_Matrix.pyx":257
 * 
 * 
 *         b= bu+bm             # <<<<<<<<<<<<<<
 * 
 *         c= -a*vsigmasquared + vy*(MS[0]).mixmag*(MS[0]).inverseezz
 */
    __pyx_v_b = __Pyx_c_sum_double(__pyx_v_bu, __pyx_v_bm);

    /* "Full_Matrix.pyx":259
 *         b= bu+bm
 * 
 *         c= -a*vsigmasquared + vy*(MS[0]).mixmag*(MS[0]).inverseezz             # <<<<<<<<<<<<<<
 * 
 *         du=vpisquared*vsigmasquared
 */
    __pyx_v_c = __Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_a), __pyx_v_vsigmasquared), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vy, 0), (__pyx_v_MS[0]).mixmag), (__pyx_v_MS[0]).inverseezz));

    /* "Full_Matrix.pyx":261
 *         c= -a*vsigmasquared + vy*(MS[0]).mixmag*(MS[0]).inverseezz
 * 
 *         du=vpisquared*vsigmasquared             # <<<<<<<<<<<<<<
 *         dm=  - (MS[0]).eyy*bm - (MS[0]).exyyx*one_minus_vyvy_div_ezz +(MS[0]).crossmag*(MS[0]).inverseezz
 *         d=du+dm
 */
    __pyx_v_du = __Pyx_c_prod_double(__pyx_v_vpisquared, __pyx_v_vsigmasquared);

    /* "Full_Matrix.pyx":262
 * 
 *         du=vpisquared*vsigmasquared
 *         dm=  - (MS[0]).eyy*bm - (MS[0]).exyyx*one_minus_vyvy_div_ezz +(MS[0]).crossmag*(MS[0]).inverseezz             # <<<<<<<<<<<<<<
 *         d=du+dm
 * 
 */
    __pyx_v_dm = __Pyx_c_sum_double(__Pyx_c_diff_double(__Pyx_c_prod_double(__Pyx_c_neg_double((__pyx_v_MS[0]).eyy), __pyx_v_bm), __Pyx_c_prod_double((__pyx_v_MS[0]).exyyx, __pyx_v_one_minus_vyvy_div_ezz)), __Pyx_c_prod_double((__pyx_v_MS[0]).crossmag, (__pyx_v_MS[0]).inverseezz));

    /* "Full_Matrix.pyx":263
 *         du=vpisquared*vsigmasquared
 *         dm=  - (MS[0]).eyy*bm - (MS[0]).exyyx*one_minus_vyvy_div_ezz +(MS[0]).crossmag*(MS[0]).inverseezz
 *         d=du+dm             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_d = __Pyx_c_sum_double(__pyx_v_du, __pyx_v_dm);

    /* "Full_Matrix.pyx":266
 * 
 * 
 *         bquadr=b*b             # <<<<<<<<<<<<<<
 *         aquadr=a*a
 *         dquadr=d*d
 */
    __pyx_v_bquadr = __Pyx_c_prod_double(__pyx_v_b, __pyx_v_b);

    /* "Full_Matrix.pyx":267
 * 
 *         bquadr=b*b
 *         aquadr=a*a             # <<<<<<<<<<<<<<
 *         dquadr=d*d
 *         min_a_div_4 = -a/4
 */
    __pyx_v_aquadr = __Pyx_c_prod_double(__pyx_v_a, __pyx_v_a);

    /* "Full_Matrix.pyx":268
 *         bquadr=b*b
 *         aquadr=a*a
 *         dquadr=d*d             # <<<<<<<<<<<<<<
 *         min_a_div_4 = -a/4
 *         D21= (MS[0]).D21ic - vyvy
 */
    __pyx_v_dquadr = __Pyx_c_prod_double(__pyx_v_d, __pyx_v_d);

    /* "Full_Matrix.pyx":269
 *         aquadr=a*a
 *         dquadr=d*d
 *         min_a_div_4 = -a/4             # <<<<<<<<<<<<<<
 *         D21= (MS[0]).D21ic - vyvy
 *         D24=vy*(MS[0]).D24ic
 */
    __pyx_t_1 = __Pyx_c_neg_double(__pyx_v_a);
    __pyx_t_2 = __pyx_t_double_complex_from_parts(4, 0);
    if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 269, __pyx_L1_error)
    }
    __pyx_v_min_a_div_4 = __Pyx_c_quot_double(__pyx_t_1, __pyx_t_2);

    /* "Full_Matrix.pyx":270
 *         dquadr=d*d
 *         min_a_div_4 = -a/4
 *         D21= (MS[0]).D21ic - vyvy             # <<<<<<<<<<<<<<
 *         D24=vy*(MS[0]).D24ic
 *         D31=vy*(MS[0]).D31ic
 */
    __pyx_v_D21 = __Pyx_c_diff_double((__pyx_v_MS[0]).D21ic, __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0));

    /* "Full_Matrix.pyx":271
 *         min_a_div_4 = -a/4
 *         D21= (MS[0]).D21ic - vyvy
 *         D24=vy*(MS[0]).D24ic             # <<<<<<<<<<<<<<
 *         D31=vy*(MS[0]).D31ic
 *         D33=vy*(MS[0]).D33ic
 */
    __pyx_v_D24 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vy, 0), (__pyx_v_MS[0]).D24ic);

    /* "Full_Matrix.pyx":272
 *         D21= (MS[0]).D21ic - vyvy
 *         D24=vy*(MS[0]).D24ic
 *         D31=vy*(MS[0]).D31ic             # <<<<<<<<<<<<<<
 *         D33=vy*(MS[0]).D33ic
 *         D44=vy*(MS[0]).D44ic
 */
    __pyx_v_D31 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vy, 0), (__pyx_v_MS[0]).D31ic);

    /* "Full_Matrix.pyx":273
 *         D24=vy*(MS[0]).D24ic
 *         D31=vy*(MS[0]).D31ic
 *         D33=vy*(MS[0]).D33ic             # <<<<<<<<<<<<<<
 *         D44=vy*(MS[0]).D44ic
 * 
 */
    __pyx_v_D33 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vy, 0), (__pyx_v_MS[0]).D33ic);

    /* "Full_Matrix.pyx":274
 *         D31=vy*(MS[0]).D31ic
 *         D33=vy*(MS[0]).D33ic
 *         D44=vy*(MS[0]).D44ic             # <<<<<<<<<<<<<<
 * 
 * #        print("start of pp")
 */
    __pyx_v_D44 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vy, 0), (__pyx_v_MS[0]).D44ic);

    /* "Full_Matrix.pyx":288
 * #        for i in range(4):
 * #            print(i,  (vz[0])[i] )
 *         maxdiag = Cmaxnorm(cx)             # <<<<<<<<<<<<<<
 *         comp6=Cmaxnorm(  vpisquared-(1-vyvy)  )
 *         if( comp6>maxdiag ):
 */
    __pyx_v_maxdiag = __pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm(__pyx_v_cx);

    /* "Full_Matrix.pyx":289
 * #            print(i,  (vz[0])[i] )
 *         maxdiag = Cmaxnorm(cx)
 *         comp6=Cmaxnorm(  vpisquared-(1-vyvy)  )             # <<<<<<<<<<<<<<
 *         if( comp6>maxdiag ):
 *             maxdiag=comp6
 */
    __pyx_v_comp6 = __pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm(__Pyx_c_diff_double(__pyx_v_vpisquared, __pyx_t_double_complex_from_parts((1.0 - __pyx_v_vyvy), 0)));

    /* "Full_Matrix.pyx":290
 *         maxdiag = Cmaxnorm(cx)
 *         comp6=Cmaxnorm(  vpisquared-(1-vyvy)  )
 *         if( comp6>maxdiag ):             # <<<<<<<<<<<<<<
 *             maxdiag=comp6
 * 
 */
    __pyx_t_3 = ((__pyx_v_comp6 > __pyx_v_maxdiag) != 0);
    if (__pyx_t_3) {

      /* "Full_Matrix.pyx":291
 *         comp6=Cmaxnorm(  vpisquared-(1-vyvy)  )
 *         if( comp6>maxdiag ):
 *             maxdiag=comp6             # <<<<<<<<<<<<<<
 * 
 *         if(xld==0):
 */
      __pyx_v_maxdiag = __pyx_v_comp6;

      /* "Full_Matrix.pyx":290
 *         maxdiag = Cmaxnorm(cx)
 *         comp6=Cmaxnorm(  vpisquared-(1-vyvy)  )
 *         if( comp6>maxdiag ):             # <<<<<<<<<<<<<<
 *             maxdiag=comp6
 * 
 */
    }

    /* "Full_Matrix.pyx":293
 *             maxdiag=comp6
 * 
 *         if(xld==0):             # <<<<<<<<<<<<<<
 *             xld=maxdiag*xld_min
 * 
 */
    __pyx_t_3 = ((__Pyx_c_eq_double(__pyx_v_xld, __pyx_t_double_complex_from_parts(0, 0))) != 0);
    if (__pyx_t_3) {

      /* "Full_Matrix.pyx":294
 * 
 *         if(xld==0):
 *             xld=maxdiag*xld_min             # <<<<<<<<<<<<<<
 * 
 *         mag_vs_xld=sqrt( 0.25*xld*xld + 0.25*bm*(2*bu + bm) - dm  )
 */
      __pyx_v_xld = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_maxdiag, 0), __pyx_v_xld_min);

      /* "Full_Matrix.pyx":293
 *             maxdiag=comp6
 * 
 *         if(xld==0):             # <<<<<<<<<<<<<<
 *             xld=maxdiag*xld_min
 * 
 */
    }

    /* "Full_Matrix.pyx":296
 *             xld=maxdiag*xld_min
 * 
 *         mag_vs_xld=sqrt( 0.25*xld*xld + 0.25*bm*(2*bu + bm) - dm  )             # <<<<<<<<<<<<<<
 * 
 *         if( a==0 and c==0):
 */
    __pyx_v_mag_vs_xld = sqrt(__Pyx_c_diff_double(__Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.25, 0), __pyx_v_xld), __pyx_v_xld), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.25, 0), __pyx_v_bm), __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_bu), __pyx_v_bm))), __pyx_v_dm));

    /* "Full_Matrix.pyx":298
 *         mag_vs_xld=sqrt( 0.25*xld*xld + 0.25*bm*(2*bu + bm) - dm  )
 * 
 *         if( a==0 and c==0):             # <<<<<<<<<<<<<<
 *             use_perturbative_aczero_case=1
 *             small_c_correction=0
 */
    __pyx_t_4 = ((__Pyx_c_eq_double(__pyx_v_a, __pyx_t_double_complex_from_parts(0, 0))) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_4 = ((__Pyx_c_eq_double(__pyx_v_c, __pyx_t_double_complex_from_parts(0, 0))) != 0);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_3) {

      /* "Full_Matrix.pyx":299
 * 
 *         if( a==0 and c==0):
 *             use_perturbative_aczero_case=1             # <<<<<<<<<<<<<<
 *             small_c_correction=0
 *             small_a_correction=0
 */
      __pyx_v_use_perturbative_aczero_case = 1;

      /* "Full_Matrix.pyx":300
 *         if( a==0 and c==0):
 *             use_perturbative_aczero_case=1
 *             small_c_correction=0             # <<<<<<<<<<<<<<
 *             small_a_correction=0
 *         else:
 */
      __pyx_v_small_c_correction = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":301
 *             use_perturbative_aczero_case=1
 *             small_c_correction=0
 *             small_a_correction=0             # <<<<<<<<<<<<<<
 *         else:
 *             bs1=mag_vs_xld
 */
      __pyx_v_small_a_correction = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":298
 *         mag_vs_xld=sqrt( 0.25*xld*xld + 0.25*bm*(2*bu + bm) - dm  )
 * 
 *         if( a==0 and c==0):             # <<<<<<<<<<<<<<
 *             use_perturbative_aczero_case=1
 *             small_c_correction=0
 */
      goto __pyx_L5;
    }

    /* "Full_Matrix.pyx":303
 *             small_a_correction=0
 *         else:
 *             bs1=mag_vs_xld             # <<<<<<<<<<<<<<
 *             if(bs1==0):
 *                 use_perturbative_aczero_case=0
 */
    /*else*/ {
      __pyx_v_bs1 = __pyx_v_mag_vs_xld;

      /* "Full_Matrix.pyx":304
 *         else:
 *             bs1=mag_vs_xld
 *             if(bs1==0):             # <<<<<<<<<<<<<<
 *                 use_perturbative_aczero_case=0
 *             else:
 */
      __pyx_t_3 = ((__Pyx_c_eq_double(__pyx_v_bs1, __pyx_t_double_complex_from_parts(0, 0))) != 0);
      if (__pyx_t_3) {

        /* "Full_Matrix.pyx":305
 *             bs1=mag_vs_xld
 *             if(bs1==0):
 *                 use_perturbative_aczero_case=0             # <<<<<<<<<<<<<<
 *             else:
 *                 testzerosq = -0.5*b + bs1
 */
        __pyx_v_use_perturbative_aczero_case = 0;

        /* "Full_Matrix.pyx":304
 *         else:
 *             bs1=mag_vs_xld
 *             if(bs1==0):             # <<<<<<<<<<<<<<
 *                 use_perturbative_aczero_case=0
 *             else:
 */
        goto __pyx_L8;
      }

      /* "Full_Matrix.pyx":307
 *                 use_perturbative_aczero_case=0
 *             else:
 *                 testzerosq = -0.5*b + bs1             # <<<<<<<<<<<<<<
 *                 testzero=sqrt(testzerosq)
 *                 small_c_correction = -1./(4*bs1)
 */
      /*else*/ {
        __pyx_v_testzerosq = __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(-0.5, 0), __pyx_v_b), __pyx_v_bs1);

        /* "Full_Matrix.pyx":308
 *             else:
 *                 testzerosq = -0.5*b + bs1
 *                 testzero=sqrt(testzerosq)             # <<<<<<<<<<<<<<
 *                 small_c_correction = -1./(4*bs1)
 *                 small_a_correction = testzerosq*small_c_correction
 */
        __pyx_v_testzero = sqrt(__pyx_v_testzerosq);

        /* "Full_Matrix.pyx":309
 *                 testzerosq = -0.5*b + bs1
 *                 testzero=sqrt(testzerosq)
 *                 small_c_correction = -1./(4*bs1)             # <<<<<<<<<<<<<<
 *                 small_a_correction = testzerosq*small_c_correction
 *                 small_c_error = c*( small_c_correction*(6*testzerosq*small_c_correction + b*small_c_correction + 1) )
 */
        __pyx_t_2 = __pyx_t_double_complex_from_parts(-1., 0);
        __pyx_t_1 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(4, 0), __pyx_v_bs1);
        if (unlikely(__Pyx_c_is_zero_double(__pyx_t_1))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 309, __pyx_L1_error)
        }
        __pyx_v_small_c_correction = __Pyx_c_quot_double(__pyx_t_2, __pyx_t_1);

        /* "Full_Matrix.pyx":310
 *                 testzero=sqrt(testzerosq)
 *                 small_c_correction = -1./(4*bs1)
 *                 small_a_correction = testzerosq*small_c_correction             # <<<<<<<<<<<<<<
 *                 small_c_error = c*( small_c_correction*(6*testzerosq*small_c_correction + b*small_c_correction + 1) )
 *                 small_a_error = a*( small_a_correction*(6*testzerosq*small_a_correction + b*small_a_correction + 3*testzerosq ) )
 */
        __pyx_v_small_a_correction = __Pyx_c_prod_double(__pyx_v_testzerosq, __pyx_v_small_c_correction);

        /* "Full_Matrix.pyx":311
 *                 small_c_correction = -1./(4*bs1)
 *                 small_a_correction = testzerosq*small_c_correction
 *                 small_c_error = c*( small_c_correction*(6*testzerosq*small_c_correction + b*small_c_correction + 1) )             # <<<<<<<<<<<<<<
 *                 small_a_error = a*( small_a_correction*(6*testzerosq*small_a_correction + b*small_a_correction + 3*testzerosq ) )
 *               #  av**2*deva *( (6*x01*x01+b)*deva + 3*x01*x01 )
 */
        __pyx_v_small_c_error = __Pyx_c_prod_double(__pyx_v_c, __Pyx_c_prod_double(__pyx_v_small_c_correction, __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(6, 0), __pyx_v_testzerosq), __pyx_v_small_c_correction), __Pyx_c_prod_double(__pyx_v_b, __pyx_v_small_c_correction)), __pyx_t_double_complex_from_parts(1, 0))));

        /* "Full_Matrix.pyx":312
 *                 small_a_correction = testzerosq*small_c_correction
 *                 small_c_error = c*( small_c_correction*(6*testzerosq*small_c_correction + b*small_c_correction + 1) )
 *                 small_a_error = a*( small_a_correction*(6*testzerosq*small_a_correction + b*small_a_correction + 3*testzerosq ) )             # <<<<<<<<<<<<<<
 *               #  av**2*deva *( (6*x01*x01+b)*deva + 3*x01*x01 )
 * 
 */
        __pyx_v_small_a_error = __Pyx_c_prod_double(__pyx_v_a, __Pyx_c_prod_double(__pyx_v_small_a_correction, __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(6, 0), __pyx_v_testzerosq), __pyx_v_small_a_correction), __Pyx_c_prod_double(__pyx_v_b, __pyx_v_small_a_correction)), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(3, 0), __pyx_v_testzerosq))));

        /* "Full_Matrix.pyx":315
 *               #  av**2*deva *( (6*x01*x01+b)*deva + 3*x01*x01 )
 * 
 *                 if( Cmaxnorm( (c*small_c_error + a*small_a_error)/testzero)  < 2.0e-16*maxdiag ):             # <<<<<<<<<<<<<<
 *                     use_perturbative_aczero_case=1
 *                 else:
 */
        __pyx_t_1 = __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_c, __pyx_v_small_c_error), __Pyx_c_prod_double(__pyx_v_a, __pyx_v_small_a_error));
        if (unlikely(__Pyx_c_is_zero_double(__pyx_v_testzero))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 315, __pyx_L1_error)
        }
        __pyx_t_3 = ((__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm(__Pyx_c_quot_double(__pyx_t_1, __pyx_v_testzero)) < (2.0e-16 * __pyx_v_maxdiag)) != 0);
        if (__pyx_t_3) {

          /* "Full_Matrix.pyx":316
 * 
 *                 if( Cmaxnorm( (c*small_c_error + a*small_a_error)/testzero)  < 2.0e-16*maxdiag ):
 *                     use_perturbative_aczero_case=1             # <<<<<<<<<<<<<<
 *                 else:
 *                     use_perturbative_aczero_case=0
 */
          __pyx_v_use_perturbative_aczero_case = 1;

          /* "Full_Matrix.pyx":315
 *               #  av**2*deva *( (6*x01*x01+b)*deva + 3*x01*x01 )
 * 
 *                 if( Cmaxnorm( (c*small_c_error + a*small_a_error)/testzero)  < 2.0e-16*maxdiag ):             # <<<<<<<<<<<<<<
 *                     use_perturbative_aczero_case=1
 *                 else:
 */
          goto __pyx_L9;
        }

        /* "Full_Matrix.pyx":318
 *                     use_perturbative_aczero_case=1
 *                 else:
 *                     use_perturbative_aczero_case=0             # <<<<<<<<<<<<<<
 * 
 * #        if(use_perturbative_aczero_case):
 */
        /*else*/ {
          __pyx_v_use_perturbative_aczero_case = 0;
        }
        __pyx_L9:;
      }
      __pyx_L8:;
    }
    __pyx_L5:;

    /* "Full_Matrix.pyx":329
 * 
 * 
 *         if( ( (D31==0) and ( (MS[0]).D41==0) ) and ( ( (MS[0]).D23==0 )  and (D24==0) ) ):             # <<<<<<<<<<<<<<
 *         #    print("1")
 *             (vz[0])[0]=sqrt(vsigmasquared)
 */
    __pyx_t_4 = ((__Pyx_c_eq_double(__pyx_v_D31, __pyx_t_double_complex_from_parts(0, 0))) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_4 = ((__Pyx_c_eq_double((__pyx_v_MS[0]).D41, __pyx_t_double_complex_from_parts(0, 0))) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_4 = ((__Pyx_c_eq_double((__pyx_v_MS[0]).D23, __pyx_t_double_complex_from_parts(0, 0))) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_3 = __pyx_t_4;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_4 = ((__Pyx_c_eq_double(__pyx_v_D24, __pyx_t_double_complex_from_parts(0, 0))) != 0);
    __pyx_t_3 = __pyx_t_4;
    __pyx_L11_bool_binop_done:;
    if (__pyx_t_3) {

      /* "Full_Matrix.pyx":331
 *         if( ( (D31==0) and ( (MS[0]).D41==0) ) and ( ( (MS[0]).D23==0 )  and (D24==0) ) ):
 *         #    print("1")
 *             (vz[0])[0]=sqrt(vsigmasquared)             # <<<<<<<<<<<<<<
 *             (vz[0])[1]=( sqrt( -min_a_div_4*a+vpisquared ) -a/2 )
 *             (vz[0])[2]=-(vz[0])[0]
 */
      ((__pyx_v_vz[0])[0]) = sqrt(__pyx_v_vsigmasquared);

      /* "Full_Matrix.pyx":332
 *         #    print("1")
 *             (vz[0])[0]=sqrt(vsigmasquared)
 *             (vz[0])[1]=( sqrt( -min_a_div_4*a+vpisquared ) -a/2 )             # <<<<<<<<<<<<<<
 *             (vz[0])[2]=-(vz[0])[0]
 *             (vz[0])[3]=-( sqrt( -min_a_div_4*a+vpisquared ) +a/2 )
 */
      __pyx_t_1 = __pyx_t_double_complex_from_parts(2, 0);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_1))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 332, __pyx_L1_error)
      }
      ((__pyx_v_vz[0])[1]) = __Pyx_c_diff_double(sqrt(__Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_min_a_div_4), __pyx_v_a), __pyx_v_vpisquared)), __Pyx_c_quot_double(__pyx_v_a, __pyx_t_1));

      /* "Full_Matrix.pyx":333
 *             (vz[0])[0]=sqrt(vsigmasquared)
 *             (vz[0])[1]=( sqrt( -min_a_div_4*a+vpisquared ) -a/2 )
 *             (vz[0])[2]=-(vz[0])[0]             # <<<<<<<<<<<<<<
 *             (vz[0])[3]=-( sqrt( -min_a_div_4*a+vpisquared ) +a/2 )
 * 
 */
      ((__pyx_v_vz[0])[2]) = __Pyx_c_neg_double(((__pyx_v_vz[0])[0]));

      /* "Full_Matrix.pyx":334
 *             (vz[0])[1]=( sqrt( -min_a_div_4*a+vpisquared ) -a/2 )
 *             (vz[0])[2]=-(vz[0])[0]
 *             (vz[0])[3]=-( sqrt( -min_a_div_4*a+vpisquared ) +a/2 )             # <<<<<<<<<<<<<<
 * 
 *             (PHI[0])[0][0] = 1
 */
      __pyx_t_1 = __pyx_t_double_complex_from_parts(2, 0);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_1))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 334, __pyx_L1_error)
      }
      ((__pyx_v_vz[0])[3]) = __Pyx_c_neg_double(__Pyx_c_sum_double(sqrt(__Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_min_a_div_4), __pyx_v_a), __pyx_v_vpisquared)), __Pyx_c_quot_double(__pyx_v_a, __pyx_t_1)));

      /* "Full_Matrix.pyx":336
 *             (vz[0])[3]=-( sqrt( -min_a_div_4*a+vpisquared ) +a/2 )
 * 
 *             (PHI[0])[0][0] = 1             # <<<<<<<<<<<<<<
 *             (PHI[0])[1][0] = (vz[0])[0]
 *             (PHI[0])[2][0] = 0
 */
      (((__pyx_v_PHI[0])[0])[0]) = __pyx_t_double_complex_from_parts(1, 0);

      /* "Full_Matrix.pyx":337
 * 
 *             (PHI[0])[0][0] = 1
 *             (PHI[0])[1][0] = (vz[0])[0]             # <<<<<<<<<<<<<<
 *             (PHI[0])[2][0] = 0
 *             (PHI[0])[3][0] = 0
 */
      (((__pyx_v_PHI[0])[1])[0]) = ((__pyx_v_vz[0])[0]);

      /* "Full_Matrix.pyx":338
 *             (PHI[0])[0][0] = 1
 *             (PHI[0])[1][0] = (vz[0])[0]
 *             (PHI[0])[2][0] = 0             # <<<<<<<<<<<<<<
 *             (PHI[0])[3][0] = 0
 * 
 */
      (((__pyx_v_PHI[0])[2])[0]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":339
 *             (PHI[0])[1][0] = (vz[0])[0]
 *             (PHI[0])[2][0] = 0
 *             (PHI[0])[3][0] = 0             # <<<<<<<<<<<<<<
 * 
 *             (PHI[0])[2][1] = 1
 */
      (((__pyx_v_PHI[0])[3])[0]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":341
 *             (PHI[0])[3][0] = 0
 * 
 *             (PHI[0])[2][1] = 1             # <<<<<<<<<<<<<<
 *             (PHI[0])[3][1] = ( (vz[0])[1] - D33 )/one_minus_vyvy_div_ezz
 *             (PHI[0])[0][1] = 0
 */
      (((__pyx_v_PHI[0])[2])[1]) = __pyx_t_double_complex_from_parts(1, 0);

      /* "Full_Matrix.pyx":342
 * 
 *             (PHI[0])[2][1] = 1
 *             (PHI[0])[3][1] = ( (vz[0])[1] - D33 )/one_minus_vyvy_div_ezz             # <<<<<<<<<<<<<<
 *             (PHI[0])[0][1] = 0
 *             (PHI[0])[1][1] = 0
 */
      __pyx_t_1 = __Pyx_c_diff_double(((__pyx_v_vz[0])[1]), __pyx_v_D33);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_one_minus_vyvy_div_ezz))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 342, __pyx_L1_error)
      }
      (((__pyx_v_PHI[0])[3])[1]) = __Pyx_c_quot_double(__pyx_t_1, __pyx_v_one_minus_vyvy_div_ezz);

      /* "Full_Matrix.pyx":343
 *             (PHI[0])[2][1] = 1
 *             (PHI[0])[3][1] = ( (vz[0])[1] - D33 )/one_minus_vyvy_div_ezz
 *             (PHI[0])[0][1] = 0             # <<<<<<<<<<<<<<
 *             (PHI[0])[1][1] = 0
 * 
 */
      (((__pyx_v_PHI[0])[0])[1]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":344
 *             (PHI[0])[3][1] = ( (vz[0])[1] - D33 )/one_minus_vyvy_div_ezz
 *             (PHI[0])[0][1] = 0
 *             (PHI[0])[1][1] = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      (((__pyx_v_PHI[0])[1])[1]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":347
 * 
 * 
 *             (PHI[0])[0][2] = 1             # <<<<<<<<<<<<<<
 *             (PHI[0])[1][2] = (vz[0])[2]
 *             (PHI[0])[2][2] = 0
 */
      (((__pyx_v_PHI[0])[0])[2]) = __pyx_t_double_complex_from_parts(1, 0);

      /* "Full_Matrix.pyx":348
 * 
 *             (PHI[0])[0][2] = 1
 *             (PHI[0])[1][2] = (vz[0])[2]             # <<<<<<<<<<<<<<
 *             (PHI[0])[2][2] = 0
 *             (PHI[0])[3][2] = 0
 */
      (((__pyx_v_PHI[0])[1])[2]) = ((__pyx_v_vz[0])[2]);

      /* "Full_Matrix.pyx":349
 *             (PHI[0])[0][2] = 1
 *             (PHI[0])[1][2] = (vz[0])[2]
 *             (PHI[0])[2][2] = 0             # <<<<<<<<<<<<<<
 *             (PHI[0])[3][2] = 0
 * 
 */
      (((__pyx_v_PHI[0])[2])[2]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":350
 *             (PHI[0])[1][2] = (vz[0])[2]
 *             (PHI[0])[2][2] = 0
 *             (PHI[0])[3][2] = 0             # <<<<<<<<<<<<<<
 * 
 *             (PHI[0])[2][3] = 1
 */
      (((__pyx_v_PHI[0])[3])[2]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":352
 *             (PHI[0])[3][2] = 0
 * 
 *             (PHI[0])[2][3] = 1             # <<<<<<<<<<<<<<
 *             (PHI[0])[3][3] = ( (vz[0])[3] -D33 )/one_minus_vyvy_div_ezz
 *             (PHI[0])[0][3] = 0
 */
      (((__pyx_v_PHI[0])[2])[3]) = __pyx_t_double_complex_from_parts(1, 0);

      /* "Full_Matrix.pyx":353
 * 
 *             (PHI[0])[2][3] = 1
 *             (PHI[0])[3][3] = ( (vz[0])[3] -D33 )/one_minus_vyvy_div_ezz             # <<<<<<<<<<<<<<
 *             (PHI[0])[0][3] = 0
 *             (PHI[0])[1][3] = 0
 */
      __pyx_t_1 = __Pyx_c_diff_double(((__pyx_v_vz[0])[3]), __pyx_v_D33);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_one_minus_vyvy_div_ezz))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 353, __pyx_L1_error)
      }
      (((__pyx_v_PHI[0])[3])[3]) = __Pyx_c_quot_double(__pyx_t_1, __pyx_v_one_minus_vyvy_div_ezz);

      /* "Full_Matrix.pyx":354
 *             (PHI[0])[2][3] = 1
 *             (PHI[0])[3][3] = ( (vz[0])[3] -D33 )/one_minus_vyvy_div_ezz
 *             (PHI[0])[0][3] = 0             # <<<<<<<<<<<<<<
 *             (PHI[0])[1][3] = 0
 *             NormalizePHI(PHI)
 */
      (((__pyx_v_PHI[0])[0])[3]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":355
 *             (PHI[0])[3][3] = ( (vz[0])[3] -D33 )/one_minus_vyvy_div_ezz
 *             (PHI[0])[0][3] = 0
 *             (PHI[0])[1][3] = 0             # <<<<<<<<<<<<<<
 *             NormalizePHI(PHI)
 * 
 */
      (((__pyx_v_PHI[0])[1])[3]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":356
 *             (PHI[0])[0][3] = 0
 *             (PHI[0])[1][3] = 0
 *             NormalizePHI(PHI)             # <<<<<<<<<<<<<<
 * 
 *             Matrix4Invert(PHI, PSI)
 */
      __pyx_f_11Full_Matrix_NormalizePHI(__pyx_v_PHI);

      /* "Full_Matrix.pyx":358
 *             NormalizePHI(PHI)
 * 
 *             Matrix4Invert(PHI, PSI)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Matrix4Invert(__pyx_v_PHI, __pyx_v_PSI);

      /* "Full_Matrix.pyx":329
 * 
 * 
 *         if( ( (D31==0) and ( (MS[0]).D41==0) ) and ( ( (MS[0]).D23==0 )  and (D24==0) ) ):             # <<<<<<<<<<<<<<
 *         #    print("1")
 *             (vz[0])[0]=sqrt(vsigmasquared)
 */
      goto __pyx_L10;
    }

    /* "Full_Matrix.pyx":362
 * 
 *         else:
 *             if(use_perturbative_aczero_case):             # <<<<<<<<<<<<<<
 * #                print("a and c", a, c)
 * #                print("hallo")
 */
    /*else*/ {
      __pyx_t_3 = (__pyx_v_use_perturbative_aczero_case != 0);
      if (__pyx_t_3) {

        /* "Full_Matrix.pyx":369
 * 
 *                # bs1=sqrt( 0.25*xld*xld + 0.25*bm*(2*bu + bm) - dm  )
 *                 bs1=mag_vs_xld             # <<<<<<<<<<<<<<
 *                 bs2=( + 0.5*( xld +bm ) - bs1   )
 * 
 */
        __pyx_v_bs1 = __pyx_v_mag_vs_xld;

        /* "Full_Matrix.pyx":370
 *                # bs1=sqrt( 0.25*xld*xld + 0.25*bm*(2*bu + bm) - dm  )
 *                 bs1=mag_vs_xld
 *                 bs2=( + 0.5*( xld +bm ) - bs1   )             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_v_bs2 = __Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __Pyx_c_sum_double(__pyx_v_xld, __pyx_v_bm)), __pyx_v_bs1);

        /* "Full_Matrix.pyx":373
 * 
 * 
 *                 bs4= 0.5*( xld +bm ) + bs1             # <<<<<<<<<<<<<<
 * 
 *                 if(bs2==0):
 */
        __pyx_v_bs4 = __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __Pyx_c_sum_double(__pyx_v_xld, __pyx_v_bm)), __pyx_v_bs1);

        /* "Full_Matrix.pyx":375
 *                 bs4= 0.5*( xld +bm ) + bs1
 * 
 *                 if(bs2==0):             # <<<<<<<<<<<<<<
 *                     bs2= ( 0.5*bm*(xld-bu)-dm )/bs4
 *                 if( Cmaxnorm(dm)<2e-16*maxdiag and Cmaxnorm(bm)<2e-16*maxdiag ):
 */
        __pyx_t_3 = ((__Pyx_c_eq_double(__pyx_v_bs2, __pyx_t_double_complex_from_parts(0, 0))) != 0);
        if (__pyx_t_3) {

          /* "Full_Matrix.pyx":376
 * 
 *                 if(bs2==0):
 *                     bs2= ( 0.5*bm*(xld-bu)-dm )/bs4             # <<<<<<<<<<<<<<
 *                 if( Cmaxnorm(dm)<2e-16*maxdiag and Cmaxnorm(bm)<2e-16*maxdiag ):
 *                   #  print("case a")
 */
          __pyx_t_1 = __Pyx_c_diff_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __pyx_v_bm), __Pyx_c_diff_double(__pyx_v_xld, __pyx_v_bu)), __pyx_v_dm);
          if (unlikely(__Pyx_c_is_zero_double(__pyx_v_bs4))) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 376, __pyx_L1_error)
          }
          __pyx_v_bs2 = __Pyx_c_quot_double(__pyx_t_1, __pyx_v_bs4);

          /* "Full_Matrix.pyx":375
 *                 bs4= 0.5*( xld +bm ) + bs1
 * 
 *                 if(bs2==0):             # <<<<<<<<<<<<<<
 *                     bs2= ( 0.5*bm*(xld-bu)-dm )/bs4
 *                 if( Cmaxnorm(dm)<2e-16*maxdiag and Cmaxnorm(bm)<2e-16*maxdiag ):
 */
        }

        /* "Full_Matrix.pyx":377
 *                 if(bs2==0):
 *                     bs2= ( 0.5*bm*(xld-bu)-dm )/bs4
 *                 if( Cmaxnorm(dm)<2e-16*maxdiag and Cmaxnorm(bm)<2e-16*maxdiag ):             # <<<<<<<<<<<<<<
 *                   #  print("case a")
 * #                    print("bs1 is", bs1)
 */
        __pyx_t_4 = ((__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm(__pyx_v_dm) < (2e-16 * __pyx_v_maxdiag)) != 0);
        if (__pyx_t_4) {
        } else {
          __pyx_t_3 = __pyx_t_4;
          goto __pyx_L18_bool_binop_done;
        }
        __pyx_t_4 = ((__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm(__pyx_v_bm) < (2e-16 * __pyx_v_maxdiag)) != 0);
        __pyx_t_3 = __pyx_t_4;
        __pyx_L18_bool_binop_done:;
        if (__pyx_t_3) {

          /* "Full_Matrix.pyx":381
 * #                    print("bs1 is", bs1)
 * #                    print(xld, bm, dm)
 *                     vsigma=sqrt(vsigmasquared)             # <<<<<<<<<<<<<<
 *                     vpi=sqrt(vpisquared)
 *                     vrem[0]=- (c+a*vsigmasquared)*0.25/bs1
 */
          __pyx_v_vsigma = sqrt(__pyx_v_vsigmasquared);

          /* "Full_Matrix.pyx":382
 * #                    print(xld, bm, dm)
 *                     vsigma=sqrt(vsigmasquared)
 *                     vpi=sqrt(vpisquared)             # <<<<<<<<<<<<<<
 *                     vrem[0]=- (c+a*vsigmasquared)*0.25/bs1
 *                     vrem[1]=+ (c+a*vpisquared)*0.25/bs1
 */
          __pyx_v_vpi = sqrt(__pyx_v_vpisquared);

          /* "Full_Matrix.pyx":383
 *                     vsigma=sqrt(vsigmasquared)
 *                     vpi=sqrt(vpisquared)
 *                     vrem[0]=- (c+a*vsigmasquared)*0.25/bs1             # <<<<<<<<<<<<<<
 *                     vrem[1]=+ (c+a*vpisquared)*0.25/bs1
 * 
 */
          __pyx_t_1 = __Pyx_c_prod_double(__Pyx_c_neg_double(__Pyx_c_sum_double(__pyx_v_c, __Pyx_c_prod_double(__pyx_v_a, __pyx_v_vsigmasquared))), __pyx_t_double_complex_from_parts(0.25, 0));
          if (unlikely(__Pyx_c_is_zero_double(__pyx_v_bs1))) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 383, __pyx_L1_error)
          }
          (__pyx_v_vrem[0]) = __Pyx_c_quot_double(__pyx_t_1, __pyx_v_bs1);

          /* "Full_Matrix.pyx":384
 *                     vpi=sqrt(vpisquared)
 *                     vrem[0]=- (c+a*vsigmasquared)*0.25/bs1
 *                     vrem[1]=+ (c+a*vpisquared)*0.25/bs1             # <<<<<<<<<<<<<<
 * 
 *                     (vz[0])[0]= vsigma + vrem[0]
 */
          __pyx_t_1 = __Pyx_c_prod_double(__Pyx_c_sum_double(__pyx_v_c, __Pyx_c_prod_double(__pyx_v_a, __pyx_v_vpisquared)), __pyx_t_double_complex_from_parts(0.25, 0));
          if (unlikely(__Pyx_c_is_zero_double(__pyx_v_bs1))) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 384, __pyx_L1_error)
          }
          (__pyx_v_vrem[1]) = __Pyx_c_quot_double(__pyx_t_1, __pyx_v_bs1);

          /* "Full_Matrix.pyx":386
 *                     vrem[1]=+ (c+a*vpisquared)*0.25/bs1
 * 
 *                     (vz[0])[0]= vsigma + vrem[0]             # <<<<<<<<<<<<<<
 *                     (vz[0])[1]= vpi  +vrem[1]
 *                     (vz[0])[2]=-vsigma+vrem[0]
 */
          ((__pyx_v_vz[0])[0]) = __Pyx_c_sum_double(__pyx_v_vsigma, (__pyx_v_vrem[0]));

          /* "Full_Matrix.pyx":387
 * 
 *                     (vz[0])[0]= vsigma + vrem[0]
 *                     (vz[0])[1]= vpi  +vrem[1]             # <<<<<<<<<<<<<<
 *                     (vz[0])[2]=-vsigma+vrem[0]
 *                     (vz[0])[3]=-vpi   +vrem[1]
 */
          ((__pyx_v_vz[0])[1]) = __Pyx_c_sum_double(__pyx_v_vpi, (__pyx_v_vrem[1]));

          /* "Full_Matrix.pyx":388
 *                     (vz[0])[0]= vsigma + vrem[0]
 *                     (vz[0])[1]= vpi  +vrem[1]
 *                     (vz[0])[2]=-vsigma+vrem[0]             # <<<<<<<<<<<<<<
 *                     (vz[0])[3]=-vpi   +vrem[1]
 * 
 */
          ((__pyx_v_vz[0])[2]) = __Pyx_c_sum_double(__Pyx_c_neg_double(__pyx_v_vsigma), (__pyx_v_vrem[0]));

          /* "Full_Matrix.pyx":389
 *                     (vz[0])[1]= vpi  +vrem[1]
 *                     (vz[0])[2]=-vsigma+vrem[0]
 *                     (vz[0])[3]=-vpi   +vrem[1]             # <<<<<<<<<<<<<<
 * 
 * #                    print("vzs are")
 */
          ((__pyx_v_vz[0])[3]) = __Pyx_c_sum_double(__Pyx_c_neg_double(__pyx_v_vpi), (__pyx_v_vrem[1]));

          /* "Full_Matrix.pyx":397
 *                   #  i=0
 *                    # print( D21 - (vz[0])[i]*(vz[0])[i]  )
 *                     D21_min_vzsq[0]=-bm -vrem[0]*(  +2*vsigma + vrem[0] )             # <<<<<<<<<<<<<<
 *                   #  print(D21_min_vzsq[i])
 * 
 */
          (__pyx_v_D21_min_vzsq[0]) = __Pyx_c_diff_double(__Pyx_c_neg_double(__pyx_v_bm), __Pyx_c_prod_double((__pyx_v_vrem[0]), __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_vsigma), (__pyx_v_vrem[0]))));

          /* "Full_Matrix.pyx":402
 *                     #i=1
 *                    # print( D21 - (vz[0])[i]*(vz[0])[i] )
 *                     D21_min_vzsq[1] = -bm -xld -vrem[1]*(+2*vpi + vrem[1] )             # <<<<<<<<<<<<<<
 *                    # print(D21_min_vzsq[i])
 * 
 */
          (__pyx_v_D21_min_vzsq[1]) = __Pyx_c_diff_double(__Pyx_c_diff_double(__Pyx_c_neg_double(__pyx_v_bm), __pyx_v_xld), __Pyx_c_prod_double((__pyx_v_vrem[1]), __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_vpi), (__pyx_v_vrem[1]))));

          /* "Full_Matrix.pyx":407
 *                    # i=2
 *                  #   print( D21 - (vz[0])[i]*(vz[0])[i]  )
 *                     D21_min_vzsq[2]=-bm +vrem[0]*(  +2*vsigma - vrem[0] )             # <<<<<<<<<<<<<<
 *                   #  print(D21_min_vzsq[i])
 * 
 */
          (__pyx_v_D21_min_vzsq[2]) = __Pyx_c_sum_double(__Pyx_c_neg_double(__pyx_v_bm), __Pyx_c_prod_double((__pyx_v_vrem[0]), __Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_vsigma), (__pyx_v_vrem[0]))));

          /* "Full_Matrix.pyx":412
 *                    # i=3
 *                   #  print( D21 - (vz[0])[i]*(vz[0])[i] )
 *                     D21_min_vzsq[3] = -bm -xld +vrem[1]*(+2*vpi - vrem[1] )             # <<<<<<<<<<<<<<
 *                   #  print(D21_min_vzsq[i])
 *                     for i in range(4):
 */
          (__pyx_v_D21_min_vzsq[3]) = __Pyx_c_sum_double(__Pyx_c_diff_double(__Pyx_c_neg_double(__pyx_v_bm), __pyx_v_xld), __Pyx_c_prod_double((__pyx_v_vrem[1]), __Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_vpi), (__pyx_v_vrem[1]))));

          /* "Full_Matrix.pyx":414
 *                     D21_min_vzsq[3] = -bm -xld +vrem[1]*(+2*vpi - vrem[1] )
 *                   #  print(D21_min_vzsq[i])
 *                     for i in range(4):             # <<<<<<<<<<<<<<
 *                         D34D43_min_vD33vD44[i]= D21_min_vzsq[i] -(vz[0])[i]*a +xld +bm
 * 
 */
          for (__pyx_t_5 = 0; __pyx_t_5 < 4; __pyx_t_5+=1) {
            __pyx_v_i = __pyx_t_5;

            /* "Full_Matrix.pyx":415
 *                   #  print(D21_min_vzsq[i])
 *                     for i in range(4):
 *                         D34D43_min_vD33vD44[i]= D21_min_vzsq[i] -(vz[0])[i]*a +xld +bm             # <<<<<<<<<<<<<<
 * 
 * 
 */
            (__pyx_v_D34D43_min_vD33vD44[__pyx_v_i]) = __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_diff_double((__pyx_v_D21_min_vzsq[__pyx_v_i]), __Pyx_c_prod_double(((__pyx_v_vz[0])[__pyx_v_i]), __pyx_v_a)), __pyx_v_xld), __pyx_v_bm);
          }

          /* "Full_Matrix.pyx":377
 *                 if(bs2==0):
 *                     bs2= ( 0.5*bm*(xld-bu)-dm )/bs4
 *                 if( Cmaxnorm(dm)<2e-16*maxdiag and Cmaxnorm(bm)<2e-16*maxdiag ):             # <<<<<<<<<<<<<<
 *                   #  print("case a")
 * #                    print("bs1 is", bs1)
 */
          goto __pyx_L17;
        }

        /* "Full_Matrix.pyx":422
 *                 #    print(cx, cy, cz)
 *                  #   print(cxy, cyx, cxz, czx, cyz, czy)
 *                     bs5=-0.5*b + bs1             # <<<<<<<<<<<<<<
 *                     bs6=-0.5*b - bs1
 *                     vrem[0]=(c+a*bs5)*0.25/bs1
 */
        /*else*/ {
          __pyx_v_bs5 = __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(-0.5, 0), __pyx_v_b), __pyx_v_bs1);

          /* "Full_Matrix.pyx":423
 *                  #   print(cxy, cyx, cxz, czx, cyz, czy)
 *                     bs5=-0.5*b + bs1
 *                     bs6=-0.5*b - bs1             # <<<<<<<<<<<<<<
 *                     vrem[0]=(c+a*bs5)*0.25/bs1
 *                     vrem[1]=(c+a*bs6)*0.25/bs1
 */
          __pyx_v_bs6 = __Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(-0.5, 0), __pyx_v_b), __pyx_v_bs1);

          /* "Full_Matrix.pyx":424
 *                     bs5=-0.5*b + bs1
 *                     bs6=-0.5*b - bs1
 *                     vrem[0]=(c+a*bs5)*0.25/bs1             # <<<<<<<<<<<<<<
 *                     vrem[1]=(c+a*bs6)*0.25/bs1
 *                     bs7=sqrt( bs5 )
 */
          __pyx_t_1 = __Pyx_c_prod_double(__Pyx_c_sum_double(__pyx_v_c, __Pyx_c_prod_double(__pyx_v_a, __pyx_v_bs5)), __pyx_t_double_complex_from_parts(0.25, 0));
          if (unlikely(__Pyx_c_is_zero_double(__pyx_v_bs1))) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 424, __pyx_L1_error)
          }
          (__pyx_v_vrem[0]) = __Pyx_c_quot_double(__pyx_t_1, __pyx_v_bs1);

          /* "Full_Matrix.pyx":425
 *                     bs6=-0.5*b - bs1
 *                     vrem[0]=(c+a*bs5)*0.25/bs1
 *                     vrem[1]=(c+a*bs6)*0.25/bs1             # <<<<<<<<<<<<<<
 *                     bs7=sqrt( bs5 )
 *                     bs8=sqrt( bs6 )
 */
          __pyx_t_1 = __Pyx_c_prod_double(__Pyx_c_sum_double(__pyx_v_c, __Pyx_c_prod_double(__pyx_v_a, __pyx_v_bs6)), __pyx_t_double_complex_from_parts(0.25, 0));
          if (unlikely(__Pyx_c_is_zero_double(__pyx_v_bs1))) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 425, __pyx_L1_error)
          }
          (__pyx_v_vrem[1]) = __Pyx_c_quot_double(__pyx_t_1, __pyx_v_bs1);

          /* "Full_Matrix.pyx":426
 *                     vrem[0]=(c+a*bs5)*0.25/bs1
 *                     vrem[1]=(c+a*bs6)*0.25/bs1
 *                     bs7=sqrt( bs5 )             # <<<<<<<<<<<<<<
 *                     bs8=sqrt( bs6 )
 *                     (vz[0])[0]= bs7 - vrem[0]
 */
          __pyx_v_bs7 = sqrt(__pyx_v_bs5);

          /* "Full_Matrix.pyx":427
 *                     vrem[1]=(c+a*bs6)*0.25/bs1
 *                     bs7=sqrt( bs5 )
 *                     bs8=sqrt( bs6 )             # <<<<<<<<<<<<<<
 *                     (vz[0])[0]= bs7 - vrem[0]
 *                     (vz[0])[1]= bs8 + vrem[1]
 */
          __pyx_v_bs8 = sqrt(__pyx_v_bs6);

          /* "Full_Matrix.pyx":428
 *                     bs7=sqrt( bs5 )
 *                     bs8=sqrt( bs6 )
 *                     (vz[0])[0]= bs7 - vrem[0]             # <<<<<<<<<<<<<<
 *                     (vz[0])[1]= bs8 + vrem[1]
 *                     (vz[0])[2]=-bs7 - vrem[0]
 */
          ((__pyx_v_vz[0])[0]) = __Pyx_c_diff_double(__pyx_v_bs7, (__pyx_v_vrem[0]));

          /* "Full_Matrix.pyx":429
 *                     bs8=sqrt( bs6 )
 *                     (vz[0])[0]= bs7 - vrem[0]
 *                     (vz[0])[1]= bs8 + vrem[1]             # <<<<<<<<<<<<<<
 *                     (vz[0])[2]=-bs7 - vrem[0]
 *                     (vz[0])[3]=-bs8 + vrem[1]
 */
          ((__pyx_v_vz[0])[1]) = __Pyx_c_sum_double(__pyx_v_bs8, (__pyx_v_vrem[1]));

          /* "Full_Matrix.pyx":430
 *                     (vz[0])[0]= bs7 - vrem[0]
 *                     (vz[0])[1]= bs8 + vrem[1]
 *                     (vz[0])[2]=-bs7 - vrem[0]             # <<<<<<<<<<<<<<
 *                     (vz[0])[3]=-bs8 + vrem[1]
 * 
 */
          ((__pyx_v_vz[0])[2]) = __Pyx_c_diff_double(__Pyx_c_neg_double(__pyx_v_bs7), (__pyx_v_vrem[0]));

          /* "Full_Matrix.pyx":431
 *                     (vz[0])[1]= bs8 + vrem[1]
 *                     (vz[0])[2]=-bs7 - vrem[0]
 *                     (vz[0])[3]=-bs8 + vrem[1]             # <<<<<<<<<<<<<<
 * 
 *                     D21_min_vzsq[0] =  -( bs4 +vrem[0]*( -2*bs7 + vrem[0] ) )
 */
          ((__pyx_v_vz[0])[3]) = __Pyx_c_sum_double(__Pyx_c_neg_double(__pyx_v_bs8), (__pyx_v_vrem[1]));

          /* "Full_Matrix.pyx":433
 *                     (vz[0])[3]=-bs8 + vrem[1]
 * 
 *                     D21_min_vzsq[0] =  -( bs4 +vrem[0]*( -2*bs7 + vrem[0] ) )             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[1] =  - ( bs2 + vrem[1]*(2*bs8+vrem[1])  )
 *                     D21_min_vzsq[2] =  -( bs4 -vrem[0]*( -2*bs7 - vrem[0] ) )
 */
          (__pyx_v_D21_min_vzsq[0]) = __Pyx_c_neg_double(__Pyx_c_sum_double(__pyx_v_bs4, __Pyx_c_prod_double((__pyx_v_vrem[0]), __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(-2L, 0), __pyx_v_bs7), (__pyx_v_vrem[0])))));

          /* "Full_Matrix.pyx":434
 * 
 *                     D21_min_vzsq[0] =  -( bs4 +vrem[0]*( -2*bs7 + vrem[0] ) )
 *                     D21_min_vzsq[1] =  - ( bs2 + vrem[1]*(2*bs8+vrem[1])  )             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[2] =  -( bs4 -vrem[0]*( -2*bs7 - vrem[0] ) )
 *                     D21_min_vzsq[3] =  - ( bs2 - vrem[1]*(2*bs8-vrem[1])  )
 */
          (__pyx_v_D21_min_vzsq[1]) = __Pyx_c_neg_double(__Pyx_c_sum_double(__pyx_v_bs2, __Pyx_c_prod_double((__pyx_v_vrem[1]), __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_bs8), (__pyx_v_vrem[1])))));

          /* "Full_Matrix.pyx":435
 *                     D21_min_vzsq[0] =  -( bs4 +vrem[0]*( -2*bs7 + vrem[0] ) )
 *                     D21_min_vzsq[1] =  - ( bs2 + vrem[1]*(2*bs8+vrem[1])  )
 *                     D21_min_vzsq[2] =  -( bs4 -vrem[0]*( -2*bs7 - vrem[0] ) )             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[3] =  - ( bs2 - vrem[1]*(2*bs8-vrem[1])  )
 *                     for i in range(4):
 */
          (__pyx_v_D21_min_vzsq[2]) = __Pyx_c_neg_double(__Pyx_c_diff_double(__pyx_v_bs4, __Pyx_c_prod_double((__pyx_v_vrem[0]), __Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(-2L, 0), __pyx_v_bs7), (__pyx_v_vrem[0])))));

          /* "Full_Matrix.pyx":436
 *                     D21_min_vzsq[1] =  - ( bs2 + vrem[1]*(2*bs8+vrem[1])  )
 *                     D21_min_vzsq[2] =  -( bs4 -vrem[0]*( -2*bs7 - vrem[0] ) )
 *                     D21_min_vzsq[3] =  - ( bs2 - vrem[1]*(2*bs8-vrem[1])  )             # <<<<<<<<<<<<<<
 *                     for i in range(4):
 *                         D34D43_min_vD33vD44[i]= D21_min_vzsq[i] -(vz[0])[i]*a +xld +bm
 */
          (__pyx_v_D21_min_vzsq[3]) = __Pyx_c_neg_double(__Pyx_c_diff_double(__pyx_v_bs2, __Pyx_c_prod_double((__pyx_v_vrem[1]), __Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_bs8), (__pyx_v_vrem[1])))));

          /* "Full_Matrix.pyx":437
 *                     D21_min_vzsq[2] =  -( bs4 -vrem[0]*( -2*bs7 - vrem[0] ) )
 *                     D21_min_vzsq[3] =  - ( bs2 - vrem[1]*(2*bs8-vrem[1])  )
 *                     for i in range(4):             # <<<<<<<<<<<<<<
 *                         D34D43_min_vD33vD44[i]= D21_min_vzsq[i] -(vz[0])[i]*a +xld +bm
 * #                        print( D34D43_min_vD33vD44[i] )
 */
          for (__pyx_t_5 = 0; __pyx_t_5 < 4; __pyx_t_5+=1) {
            __pyx_v_i = __pyx_t_5;

            /* "Full_Matrix.pyx":438
 *                     D21_min_vzsq[3] =  - ( bs2 - vrem[1]*(2*bs8-vrem[1])  )
 *                     for i in range(4):
 *                         D34D43_min_vD33vD44[i]= D21_min_vzsq[i] -(vz[0])[i]*a +xld +bm             # <<<<<<<<<<<<<<
 * #                        print( D34D43_min_vD33vD44[i] )
 * #                        print( one_minus_vyvy_div_ezz*(MS[0]).D43 - ( (vz[0])[i]-D33 )*((vz[0])[i]-D44) )
 */
            (__pyx_v_D34D43_min_vD33vD44[__pyx_v_i]) = __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_diff_double((__pyx_v_D21_min_vzsq[__pyx_v_i]), __Pyx_c_prod_double(((__pyx_v_vz[0])[__pyx_v_i]), __pyx_v_a)), __pyx_v_xld), __pyx_v_bm);
          }
        }
        __pyx_L17:;

        /* "Full_Matrix.pyx":362
 * 
 *         else:
 *             if(use_perturbative_aczero_case):             # <<<<<<<<<<<<<<
 * #                print("a and c", a, c)
 * #                print("hallo")
 */
        goto __pyx_L15;
      }

      /* "Full_Matrix.pyx":443
 * 
 *             else:
 *                 Delta0_bd=bquadr+12.*d             # <<<<<<<<<<<<<<
 *                 Delta0_ac=-3.*a*c
 *                 Delta0=Delta0_ac+Delta0_bd
 */
      /*else*/ {
        __pyx_v_Delta0_bd = __Pyx_c_sum_double(__pyx_v_bquadr, __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(12., 0), __pyx_v_d));

        /* "Full_Matrix.pyx":444
 *             else:
 *                 Delta0_bd=bquadr+12.*d
 *                 Delta0_ac=-3.*a*c             # <<<<<<<<<<<<<<
 *                 Delta0=Delta0_ac+Delta0_bd
 *                 Delta0quadr=Delta0*Delta0
 */
        __pyx_v_Delta0_ac = __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(-3., 0), __pyx_v_a), __pyx_v_c);

        /* "Full_Matrix.pyx":445
 *                 Delta0_bd=bquadr+12.*d
 *                 Delta0_ac=-3.*a*c
 *                 Delta0=Delta0_ac+Delta0_bd             # <<<<<<<<<<<<<<
 *                 Delta0quadr=Delta0*Delta0
 * 
 */
        __pyx_v_Delta0 = __Pyx_c_sum_double(__pyx_v_Delta0_ac, __pyx_v_Delta0_bd);

        /* "Full_Matrix.pyx":446
 *                 Delta0_ac=-3.*a*c
 *                 Delta0=Delta0_ac+Delta0_bd
 *                 Delta0quadr=Delta0*Delta0             # <<<<<<<<<<<<<<
 * 
 *                 Delta1_bd=2.*b*(bquadr-36.*d)
 */
        __pyx_t_1 = __Pyx_c_prod_double(__pyx_v_Delta0, __pyx_v_Delta0);
        __pyx_t_6 = __pyx_PyComplex_FromComplex(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 446, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_v_Delta0quadr = __pyx_t_6;
        __pyx_t_6 = 0;

        /* "Full_Matrix.pyx":448
 *                 Delta0quadr=Delta0*Delta0
 * 
 *                 Delta1_bd=2.*b*(bquadr-36.*d)             # <<<<<<<<<<<<<<
 *                 Delta1_ac=-9.*a*b*c+27.*(aquadr*d+c*c)
 *                 Delta1=Delta1_bd+Delta1_ac
 */
        __pyx_v_Delta1_bd = __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2., 0), __pyx_v_b), __Pyx_c_diff_double(__pyx_v_bquadr, __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(36., 0), __pyx_v_d)));

        /* "Full_Matrix.pyx":449
 * 
 *                 Delta1_bd=2.*b*(bquadr-36.*d)
 *                 Delta1_ac=-9.*a*b*c+27.*(aquadr*d+c*c)             # <<<<<<<<<<<<<<
 *                 Delta1=Delta1_bd+Delta1_ac
 *                 Deltaremainder = Delta0_ac*(3*Delta0_bd*Delta0 +Delta0_ac*Delta0_ac )
 */
        __pyx_v_Delta1_ac = __Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(-9., 0), __pyx_v_a), __pyx_v_b), __pyx_v_c), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(27., 0), __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_aquadr, __pyx_v_d), __Pyx_c_prod_double(__pyx_v_c, __pyx_v_c))));

        /* "Full_Matrix.pyx":450
 *                 Delta1_bd=2.*b*(bquadr-36.*d)
 *                 Delta1_ac=-9.*a*b*c+27.*(aquadr*d+c*c)
 *                 Delta1=Delta1_bd+Delta1_ac             # <<<<<<<<<<<<<<
 *                 Deltaremainder = Delta0_ac*(3*Delta0_bd*Delta0 +Delta0_ac*Delta0_ac )
 *                 bd_splitter=-4.*(bm*vsigmasquared+dm) + cquadr(bm-xld)
 */
        __pyx_v_Delta1 = __Pyx_c_sum_double(__pyx_v_Delta1_bd, __pyx_v_Delta1_ac);

        /* "Full_Matrix.pyx":451
 *                 Delta1_ac=-9.*a*b*c+27.*(aquadr*d+c*c)
 *                 Delta1=Delta1_bd+Delta1_ac
 *                 Deltaremainder = Delta0_ac*(3*Delta0_bd*Delta0 +Delta0_ac*Delta0_ac )             # <<<<<<<<<<<<<<
 *                 bd_splitter=-4.*(bm*vsigmasquared+dm) + cquadr(bm-xld)
 *                 ri_bd=-432.*d*cquadr(bd_splitter)
 */
        __pyx_t_1 = __Pyx_c_prod_double(__pyx_v_Delta0_ac, __Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(3, 0), __pyx_v_Delta0_bd), __pyx_v_Delta0), __Pyx_c_prod_double(__pyx_v_Delta0_ac, __pyx_v_Delta0_ac)));
        __pyx_t_6 = __pyx_PyComplex_FromComplex(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 451, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_v_Deltaremainder = __pyx_t_6;
        __pyx_t_6 = 0;

        /* "Full_Matrix.pyx":452
 *                 Delta1=Delta1_bd+Delta1_ac
 *                 Deltaremainder = Delta0_ac*(3*Delta0_bd*Delta0 +Delta0_ac*Delta0_ac )
 *                 bd_splitter=-4.*(bm*vsigmasquared+dm) + cquadr(bm-xld)             # <<<<<<<<<<<<<<
 *                 ri_bd=-432.*d*cquadr(bd_splitter)
 *                 ri_ac=Delta1_ac*(2.*Delta1_bd+Delta1_ac) -4.*Deltaremainder
 */
        __pyx_v_bd_splitter = __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(-4., 0), __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_bm, __pyx_v_vsigmasquared), __pyx_v_dm)), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_diff_double(__pyx_v_bm, __pyx_v_xld)));

        /* "Full_Matrix.pyx":453
 *                 Deltaremainder = Delta0_ac*(3*Delta0_bd*Delta0 +Delta0_ac*Delta0_ac )
 *                 bd_splitter=-4.*(bm*vsigmasquared+dm) + cquadr(bm-xld)
 *                 ri_bd=-432.*d*cquadr(bd_splitter)             # <<<<<<<<<<<<<<
 *                 ri_ac=Delta1_ac*(2.*Delta1_bd+Delta1_ac) -4.*Deltaremainder
 *                 ri=ri_bd+ri_ac
 */
        __pyx_v_ri_bd = __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(-432., 0), __pyx_v_d), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_v_bd_splitter));

        /* "Full_Matrix.pyx":454
 *                 bd_splitter=-4.*(bm*vsigmasquared+dm) + cquadr(bm-xld)
 *                 ri_bd=-432.*d*cquadr(bd_splitter)
 *                 ri_ac=Delta1_ac*(2.*Delta1_bd+Delta1_ac) -4.*Deltaremainder             # <<<<<<<<<<<<<<
 *                 ri=ri_bd+ri_ac
 *                 root=sqrt( ri )
 */
        __pyx_t_1 = __Pyx_c_prod_double(__pyx_v_Delta1_ac, __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2., 0), __pyx_v_Delta1_bd), __pyx_v_Delta1_ac));
        __pyx_t_6 = __pyx_PyComplex_FromComplex(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = PyNumber_Multiply(__pyx_float_4_, __pyx_v_Deltaremainder); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyNumber_Subtract(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_1 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_v_ri_ac = __pyx_t_1;

        /* "Full_Matrix.pyx":455
 *                 ri_bd=-432.*d*cquadr(bd_splitter)
 *                 ri_ac=Delta1_ac*(2.*Delta1_bd+Delta1_ac) -4.*Deltaremainder
 *                 ri=ri_bd+ri_ac             # <<<<<<<<<<<<<<
 *                 root=sqrt( ri )
 *                 Qinternal=0.5*(Delta1+root)
 */
        __pyx_v_ri = __Pyx_c_sum_double(__pyx_v_ri_bd, __pyx_v_ri_ac);

        /* "Full_Matrix.pyx":456
 *                 ri_ac=Delta1_ac*(2.*Delta1_bd+Delta1_ac) -4.*Deltaremainder
 *                 ri=ri_bd+ri_ac
 *                 root=sqrt( ri )             # <<<<<<<<<<<<<<
 *                 Qinternal=0.5*(Delta1+root)
 *                 Q=pow(Qinternal, 0.3333333333333333)
 */
        __pyx_v_root = sqrt(__pyx_v_ri);

        /* "Full_Matrix.pyx":457
 *                 ri=ri_bd+ri_ac
 *                 root=sqrt( ri )
 *                 Qinternal=0.5*(Delta1+root)             # <<<<<<<<<<<<<<
 *                 Q=pow(Qinternal, 0.3333333333333333)
 * 
 */
        __pyx_v_Qinternal = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __Pyx_c_sum_double(__pyx_v_Delta1, __pyx_v_root));

        /* "Full_Matrix.pyx":458
 *                 root=sqrt( ri )
 *                 Qinternal=0.5*(Delta1+root)
 *                 Q=pow(Qinternal, 0.3333333333333333)             # <<<<<<<<<<<<<<
 * 
 *                 qu=0.5*a*xld
 */
        __pyx_v_Q = pow(__pyx_v_Qinternal, 0.3333333333333333);

        /* "Full_Matrix.pyx":460
 *                 Q=pow(Qinternal, 0.3333333333333333)
 * 
 *                 qu=0.5*a*xld             # <<<<<<<<<<<<<<
 *                 qm=(0.5*a*(-bm +aquadr/4) + vy*(MS[0]).mixmag*(MS[0]).inverseezz)
 *                 q=qu+qm
 */
        __pyx_v_qu = __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __pyx_v_a), __pyx_v_xld);

        /* "Full_Matrix.pyx":461
 * 
 *                 qu=0.5*a*xld
 *                 qm=(0.5*a*(-bm +aquadr/4) + vy*(MS[0]).mixmag*(MS[0]).inverseezz)             # <<<<<<<<<<<<<<
 *                 q=qu+qm
 * 
 */
        __pyx_t_1 = __pyx_t_double_complex_from_parts(4, 0);
        if (unlikely(__Pyx_c_is_zero_double(__pyx_t_1))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 461, __pyx_L1_error)
        }
        __pyx_v_qm = __Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __pyx_v_a), __Pyx_c_sum_double(__Pyx_c_neg_double(__pyx_v_bm), __Pyx_c_quot_double(__pyx_v_aquadr, __pyx_t_1))), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vy, 0), (__pyx_v_MS[0]).mixmag), (__pyx_v_MS[0]).inverseezz));

        /* "Full_Matrix.pyx":462
 *                 qu=0.5*a*xld
 *                 qm=(0.5*a*(-bm +aquadr/4) + vy*(MS[0]).mixmag*(MS[0]).inverseezz)
 *                 q=qu+qm             # <<<<<<<<<<<<<<
 * 
 *                 pm=-3.*aquadr/8.0
 */
        __pyx_v_q = __Pyx_c_sum_double(__pyx_v_qu, __pyx_v_qm);

        /* "Full_Matrix.pyx":464
 *                 q=qu+qm
 * 
 *                 pm=-3.*aquadr/8.0             # <<<<<<<<<<<<<<
 *                 p=b+pm
 *                 S=0.5*sqrt( -2.*p/3. + (Q+Delta0/Q)/3.0 )
 */
        __pyx_t_1 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(-3., 0), __pyx_v_aquadr);
        __pyx_t_2 = __pyx_t_double_complex_from_parts(8.0, 0);
        if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 464, __pyx_L1_error)
        }
        __pyx_v_pm = __Pyx_c_quot_double(__pyx_t_1, __pyx_t_2);

        /* "Full_Matrix.pyx":465
 * 
 *                 pm=-3.*aquadr/8.0
 *                 p=b+pm             # <<<<<<<<<<<<<<
 *                 S=0.5*sqrt( -2.*p/3. + (Q+Delta0/Q)/3.0 )
 *                 F1= 9.*b*bd_splitter +0.5*Delta1_ac+0.5*root +8.*pm*(3.*b*p +pm*pm)
 */
        __pyx_v_p = __Pyx_c_sum_double(__pyx_v_b, __pyx_v_pm);

        /* "Full_Matrix.pyx":466
 *                 pm=-3.*aquadr/8.0
 *                 p=b+pm
 *                 S=0.5*sqrt( -2.*p/3. + (Q+Delta0/Q)/3.0 )             # <<<<<<<<<<<<<<
 *                 F1= 9.*b*bd_splitter +0.5*Delta1_ac+0.5*root +8.*pm*(3.*b*p +pm*pm)
 *                 F2=9.*bd_splitter*( bquadr*bquadr - 24.*bquadr*d - 48.*dquadr ) \
 */
        __pyx_t_2 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(-2., 0), __pyx_v_p);
        __pyx_t_1 = __pyx_t_double_complex_from_parts(3., 0);
        if (unlikely(__Pyx_c_is_zero_double(__pyx_t_1))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 466, __pyx_L1_error)
        }
        if (unlikely(__Pyx_c_is_zero_double(__pyx_v_Q))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 466, __pyx_L1_error)
        }
        __pyx_t_9 = __Pyx_c_sum_double(__pyx_v_Q, __Pyx_c_quot_double(__pyx_v_Delta0, __pyx_v_Q));
        __pyx_t_10 = __pyx_t_double_complex_from_parts(3.0, 0);
        if (unlikely(__Pyx_c_is_zero_double(__pyx_t_10))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 466, __pyx_L1_error)
        }
        __pyx_v_S = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), sqrt(__Pyx_c_sum_double(__Pyx_c_quot_double(__pyx_t_2, __pyx_t_1), __Pyx_c_quot_double(__pyx_t_9, __pyx_t_10))));

        /* "Full_Matrix.pyx":467
 *                 p=b+pm
 *                 S=0.5*sqrt( -2.*p/3. + (Q+Delta0/Q)/3.0 )
 *                 F1= 9.*b*bd_splitter +0.5*Delta1_ac+0.5*root +8.*pm*(3.*b*p +pm*pm)             # <<<<<<<<<<<<<<
 *                 F2=9.*bd_splitter*( bquadr*bquadr - 24.*bquadr*d - 48.*dquadr ) \
 *                 +4.*Delta1_bd*pm*(3*b*p +pm*pm ) + 4.*(Delta1_ac+root)*ccube(p) + Deltaremainder
 */
        __pyx_v_F1 = __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(9., 0), __pyx_v_b), __pyx_v_bd_splitter), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __pyx_v_Delta1_ac)), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __pyx_v_root)), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(8., 0), __pyx_v_pm), __Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(3., 0), __pyx_v_b), __pyx_v_p), __Pyx_c_prod_double(__pyx_v_pm, __pyx_v_pm))));

        /* "Full_Matrix.pyx":469
 *                 F1= 9.*b*bd_splitter +0.5*Delta1_ac+0.5*root +8.*pm*(3.*b*p +pm*pm)
 *                 F2=9.*bd_splitter*( bquadr*bquadr - 24.*bquadr*d - 48.*dquadr ) \
 *                 +4.*Delta1_bd*pm*(3*b*p +pm*pm ) + 4.*(Delta1_ac+root)*ccube(p) + Deltaremainder             # <<<<<<<<<<<<<<
 *                 Qsquared=Q*Q
 *                 M=(-Q*F1/(3.*( Qinternal-2*p*Qsquared+( Q*cquadr(2*p) ) )  )) - (F2/( ( Delta0quadr-2*p*Q*Delta0+cquadr(2*p*Q) )*3.*Q))
 */
        __pyx_t_10 = __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(9., 0), __pyx_v_bd_splitter), __Pyx_c_diff_double(__Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_v_bquadr, __pyx_v_bquadr), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(24., 0), __pyx_v_bquadr), __pyx_v_d)), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(48., 0), __pyx_v_dquadr))), __Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(4., 0), __pyx_v_Delta1_bd), __pyx_v_pm), __Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(3, 0), __pyx_v_b), __pyx_v_p), __Pyx_c_prod_double(__pyx_v_pm, __pyx_v_pm)))), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(4., 0), __Pyx_c_sum_double(__pyx_v_Delta1_ac, __pyx_v_root)), __pyx_f_35Mathematical_Functions_Reflectivity_ccube(__pyx_v_p)));
        __pyx_t_8 = __pyx_PyComplex_FromComplex(__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = PyNumber_Add(__pyx_t_8, __pyx_v_Deltaremainder); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_10 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_v_F2 = __pyx_t_10;

        /* "Full_Matrix.pyx":470
 *                 F2=9.*bd_splitter*( bquadr*bquadr - 24.*bquadr*d - 48.*dquadr ) \
 *                 +4.*Delta1_bd*pm*(3*b*p +pm*pm ) + 4.*(Delta1_ac+root)*ccube(p) + Deltaremainder
 *                 Qsquared=Q*Q             # <<<<<<<<<<<<<<
 *                 M=(-Q*F1/(3.*( Qinternal-2*p*Qsquared+( Q*cquadr(2*p) ) )  )) - (F2/( ( Delta0quadr-2*p*Q*Delta0+cquadr(2*p*Q) )*3.*Q))
 * 
 */
        __pyx_v_Qsquared = __Pyx_c_prod_double(__pyx_v_Q, __pyx_v_Q);

        /* "Full_Matrix.pyx":471
 *                 +4.*Delta1_bd*pm*(3*b*p +pm*pm ) + 4.*(Delta1_ac+root)*ccube(p) + Deltaremainder
 *                 Qsquared=Q*Q
 *                 M=(-Q*F1/(3.*( Qinternal-2*p*Qsquared+( Q*cquadr(2*p) ) )  )) - (F2/( ( Delta0quadr-2*p*Q*Delta0+cquadr(2*p*Q) )*3.*Q))             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_10 = __Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_Q), __pyx_v_F1);
        __pyx_t_9 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(3., 0), __Pyx_c_sum_double(__Pyx_c_diff_double(__pyx_v_Qinternal, __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_p), __pyx_v_Qsquared)), __Pyx_c_prod_double(__pyx_v_Q, __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_p)))));
        if (unlikely(__Pyx_c_is_zero_double(__pyx_t_9))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 471, __pyx_L1_error)
        }
        __pyx_t_1 = __Pyx_c_quot_double(__pyx_t_10, __pyx_t_9);
        __pyx_t_7 = __pyx_PyComplex_FromComplex(__pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __pyx_PyComplex_FromComplex(__pyx_v_F2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_1 = __Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_p), __pyx_v_Q), __pyx_v_Delta0);
        __pyx_t_6 = __pyx_PyComplex_FromComplex(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_11 = PyNumber_Subtract(__pyx_v_Delta0quadr, __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_1 = __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_p), __pyx_v_Q));
        __pyx_t_6 = __pyx_PyComplex_FromComplex(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_12 = PyNumber_Add(__pyx_t_11, __pyx_t_6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyNumber_Multiply(__pyx_t_12, __pyx_float_3_); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __pyx_PyComplex_FromComplex(__pyx_v_Q); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = PyNumber_Multiply(__pyx_t_6, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyNumber_Subtract(__pyx_t_7, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_1 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_t_11); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 471, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_v_M = __pyx_t_1;

        /* "Full_Matrix.pyx":475
 * 
 * 
 *                 q_div_S=q/S             # <<<<<<<<<<<<<<
 *                 root_MqS1=sqrt(M-q_div_S)
 *                 root_MqS2=sqrt(M+q_div_S)
 */
        if (unlikely(__Pyx_c_is_zero_double(__pyx_v_S))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 475, __pyx_L1_error)
        }
        __pyx_v_q_div_S = __Pyx_c_quot_double(__pyx_v_q, __pyx_v_S);

        /* "Full_Matrix.pyx":476
 * 
 *                 q_div_S=q/S
 *                 root_MqS1=sqrt(M-q_div_S)             # <<<<<<<<<<<<<<
 *                 root_MqS2=sqrt(M+q_div_S)
 *                 vrem[0]= min_a_div_4+0.5*root_MqS1
 */
        __pyx_t_1 = sqrt(__Pyx_c_diff_double(__pyx_v_M, __pyx_v_q_div_S));
        __pyx_t_11 = __pyx_PyComplex_FromComplex(__pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 476, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_v_root_MqS1 = __pyx_t_11;
        __pyx_t_11 = 0;

        /* "Full_Matrix.pyx":477
 *                 q_div_S=q/S
 *                 root_MqS1=sqrt(M-q_div_S)
 *                 root_MqS2=sqrt(M+q_div_S)             # <<<<<<<<<<<<<<
 *                 vrem[0]= min_a_div_4+0.5*root_MqS1
 *                 vrem[1]= min_a_div_4-0.5*root_MqS1
 */
        __pyx_t_1 = sqrt(__Pyx_c_sum_double(__pyx_v_M, __pyx_v_q_div_S));
        __pyx_t_11 = __pyx_PyComplex_FromComplex(__pyx_t_1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 477, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_v_root_MqS2 = __pyx_t_11;
        __pyx_t_11 = 0;

        /* "Full_Matrix.pyx":478
 *                 root_MqS1=sqrt(M-q_div_S)
 *                 root_MqS2=sqrt(M+q_div_S)
 *                 vrem[0]= min_a_div_4+0.5*root_MqS1             # <<<<<<<<<<<<<<
 *                 vrem[1]= min_a_div_4-0.5*root_MqS1
 *                 vrem[2]= min_a_div_4-0.5*root_MqS2
 */
        __pyx_t_11 = __pyx_PyComplex_FromComplex(__pyx_v_min_a_div_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = PyNumber_Multiply(__pyx_float_0_5, __pyx_v_root_MqS1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_7 = PyNumber_Add(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 478, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_1 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 478, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        (__pyx_v_vrem[0]) = __pyx_t_1;

        /* "Full_Matrix.pyx":479
 *                 root_MqS2=sqrt(M+q_div_S)
 *                 vrem[0]= min_a_div_4+0.5*root_MqS1
 *                 vrem[1]= min_a_div_4-0.5*root_MqS1             # <<<<<<<<<<<<<<
 *                 vrem[2]= min_a_div_4-0.5*root_MqS2
 *                 vrem[3]= min_a_div_4+0.5*root_MqS2
 */
        __pyx_t_7 = __pyx_PyComplex_FromComplex(__pyx_v_min_a_div_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 479, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_12 = PyNumber_Multiply(__pyx_float_0_5, __pyx_v_root_MqS1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 479, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = PyNumber_Subtract(__pyx_t_7, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 479, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_1 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_t_11); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 479, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        (__pyx_v_vrem[1]) = __pyx_t_1;

        /* "Full_Matrix.pyx":480
 *                 vrem[0]= min_a_div_4+0.5*root_MqS1
 *                 vrem[1]= min_a_div_4-0.5*root_MqS1
 *                 vrem[2]= min_a_div_4-0.5*root_MqS2             # <<<<<<<<<<<<<<
 *                 vrem[3]= min_a_div_4+0.5*root_MqS2
 * 
 */
        __pyx_t_11 = __pyx_PyComplex_FromComplex(__pyx_v_min_a_div_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 480, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = PyNumber_Multiply(__pyx_float_0_5, __pyx_v_root_MqS2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 480, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_7 = PyNumber_Subtract(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 480, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_1 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 480, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        (__pyx_v_vrem[2]) = __pyx_t_1;

        /* "Full_Matrix.pyx":481
 *                 vrem[1]= min_a_div_4-0.5*root_MqS1
 *                 vrem[2]= min_a_div_4-0.5*root_MqS2
 *                 vrem[3]= min_a_div_4+0.5*root_MqS2             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_7 = __pyx_PyComplex_FromComplex(__pyx_v_min_a_div_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_12 = PyNumber_Multiply(__pyx_float_0_5, __pyx_v_root_MqS2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_11 = PyNumber_Add(__pyx_t_7, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 481, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_1 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_t_11); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        (__pyx_v_vrem[3]) = __pyx_t_1;

        /* "Full_Matrix.pyx":484
 * 
 * 
 *                 (vz[0])[0]= S+vrem[0]             # <<<<<<<<<<<<<<
 *                 (vz[0])[1]= S+vrem[1]
 *                 (vz[0])[2]=-S+vrem[2]
 */
        ((__pyx_v_vz[0])[0]) = __Pyx_c_sum_double(__pyx_v_S, (__pyx_v_vrem[0]));

        /* "Full_Matrix.pyx":485
 * 
 *                 (vz[0])[0]= S+vrem[0]
 *                 (vz[0])[1]= S+vrem[1]             # <<<<<<<<<<<<<<
 *                 (vz[0])[2]=-S+vrem[2]
 *                 (vz[0])[3]=-S+vrem[3]
 */
        ((__pyx_v_vz[0])[1]) = __Pyx_c_sum_double(__pyx_v_S, (__pyx_v_vrem[1]));

        /* "Full_Matrix.pyx":486
 *                 (vz[0])[0]= S+vrem[0]
 *                 (vz[0])[1]= S+vrem[1]
 *                 (vz[0])[2]=-S+vrem[2]             # <<<<<<<<<<<<<<
 *                 (vz[0])[3]=-S+vrem[3]
 * 
 */
        ((__pyx_v_vz[0])[2]) = __Pyx_c_sum_double(__Pyx_c_neg_double(__pyx_v_S), (__pyx_v_vrem[2]));

        /* "Full_Matrix.pyx":487
 *                 (vz[0])[1]= S+vrem[1]
 *                 (vz[0])[2]=-S+vrem[2]
 *                 (vz[0])[3]=-S+vrem[3]             # <<<<<<<<<<<<<<
 * 
 * 
 */
        ((__pyx_v_vz[0])[3]) = __Pyx_c_sum_double(__Pyx_c_neg_double(__pyx_v_S), (__pyx_v_vrem[3]));

        /* "Full_Matrix.pyx":491
 * 
 * 
 *                 bs1=bm-xld             # <<<<<<<<<<<<<<
 *                 bs2=bs1*( bs1*bs1-6*b*vsigmasquared )
 *                 bs3=0.5*(Delta1_ac+root)
 */
        __pyx_v_bs1 = __Pyx_c_diff_double(__pyx_v_bm, __pyx_v_xld);

        /* "Full_Matrix.pyx":492
 * 
 *                 bs1=bm-xld
 *                 bs2=bs1*( bs1*bs1-6*b*vsigmasquared )             # <<<<<<<<<<<<<<
 *                 bs3=0.5*(Delta1_ac+root)
 *                 bs4=4*vsigmasquared
 */
        __pyx_v_bs2 = __Pyx_c_prod_double(__pyx_v_bs1, __Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_v_bs1, __pyx_v_bs1), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(6, 0), __pyx_v_b), __pyx_v_vsigmasquared)));

        /* "Full_Matrix.pyx":493
 *                 bs1=bm-xld
 *                 bs2=bs1*( bs1*bs1-6*b*vsigmasquared )
 *                 bs3=0.5*(Delta1_ac+root)             # <<<<<<<<<<<<<<
 *                 bs4=4*vsigmasquared
 *                 bs5=bs4*Q
 */
        __pyx_v_bs3 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), __Pyx_c_sum_double(__pyx_v_Delta1_ac, __pyx_v_root));

        /* "Full_Matrix.pyx":494
 *                 bs2=bs1*( bs1*bs1-6*b*vsigmasquared )
 *                 bs3=0.5*(Delta1_ac+root)
 *                 bs4=4*vsigmasquared             # <<<<<<<<<<<<<<
 *                 bs5=bs4*Q
 * 
 */
        __pyx_v_bs4 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(4, 0), __pyx_v_vsigmasquared);

        /* "Full_Matrix.pyx":495
 *                 bs3=0.5*(Delta1_ac+root)
 *                 bs4=4*vsigmasquared
 *                 bs5=bs4*Q             # <<<<<<<<<<<<<<
 * 
 *                 D21_min_SS=- (  -2.*(pm +bs1 ) \
 */
        __pyx_v_bs5 = __Pyx_c_prod_double(__pyx_v_bs4, __pyx_v_Q);

        /* "Full_Matrix.pyx":498
 * 
 *                 D21_min_SS=- (  -2.*(pm +bs1 ) \
 *                  + (  bs2 -36*d*bs1 +72*vsigmasquared*(xld*vsigmasquared+dm )     +bs3 )/(Q*Q +Q*bs4 + bs4*bs4 ) \             # <<<<<<<<<<<<<<
 *                  +  (  9.0*bd_splitter*( bquadr*bquadr - 24.0*bquadr*d - 48.0*dquadr ) + Deltaremainder -8*( bs2*Qinternal -b*bquadr*bs3 )  ) /(Q*( Delta0*Delta0 + bs5*Delta0 + cquadr(bs5)  )   )  )/12
 * 
 */
        __pyx_t_1 = __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_diff_double(__pyx_v_bs2, __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(36, 0), __pyx_v_d), __pyx_v_bs1)), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(72, 0), __pyx_v_vsigmasquared), __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_xld, __pyx_v_vsigmasquared), __pyx_v_dm))), __pyx_v_bs3);
        __pyx_t_9 = __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_Q, __pyx_v_Q), __Pyx_c_prod_double(__pyx_v_Q, __pyx_v_bs4)), __Pyx_c_prod_double(__pyx_v_bs4, __pyx_v_bs4));
        if (unlikely(__Pyx_c_is_zero_double(__pyx_t_9))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 498, __pyx_L1_error)
        }
        __pyx_t_10 = __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(-2., 0), __Pyx_c_sum_double(__pyx_v_pm, __pyx_v_bs1)), __Pyx_c_quot_double(__pyx_t_1, __pyx_t_9));
        __pyx_t_11 = __pyx_PyComplex_FromComplex(__pyx_t_10); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 498, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);

        /* "Full_Matrix.pyx":499
 *                 D21_min_SS=- (  -2.*(pm +bs1 ) \
 *                  + (  bs2 -36*d*bs1 +72*vsigmasquared*(xld*vsigmasquared+dm )     +bs3 )/(Q*Q +Q*bs4 + bs4*bs4 ) \
 *                  +  (  9.0*bd_splitter*( bquadr*bquadr - 24.0*bquadr*d - 48.0*dquadr ) + Deltaremainder -8*( bs2*Qinternal -b*bquadr*bs3 )  ) /(Q*( Delta0*Delta0 + bs5*Delta0 + cquadr(bs5)  )   )  )/12             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_10 = __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(9.0, 0), __pyx_v_bd_splitter), __Pyx_c_diff_double(__Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_v_bquadr, __pyx_v_bquadr), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(24.0, 0), __pyx_v_bquadr), __pyx_v_d)), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(48.0, 0), __pyx_v_dquadr)));
        __pyx_t_12 = __pyx_PyComplex_FromComplex(__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_7 = PyNumber_Add(__pyx_t_12, __pyx_v_Deltaremainder); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_10 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(8, 0), __Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_v_bs2, __pyx_v_Qinternal), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_v_b, __pyx_v_bquadr), __pyx_v_bs3)));
        __pyx_t_12 = __pyx_PyComplex_FromComplex(__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_8 = PyNumber_Subtract(__pyx_t_7, __pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_10 = __Pyx_c_prod_double(__pyx_v_Q, __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_Delta0, __pyx_v_Delta0), __Pyx_c_prod_double(__pyx_v_bs5, __pyx_v_Delta0)), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_v_bs5)));
        __pyx_t_12 = __pyx_PyComplex_FromComplex(__pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyNumber_Add(__pyx_t_11, __pyx_t_7); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "Full_Matrix.pyx":497
 *                 bs5=bs4*Q
 * 
 *                 D21_min_SS=- (  -2.*(pm +bs1 ) \             # <<<<<<<<<<<<<<
 *                  + (  bs2 -36*d*bs1 +72*vsigmasquared*(xld*vsigmasquared+dm )     +bs3 )/(Q*Q +Q*bs4 + bs4*bs4 ) \
 *                  +  (  9.0*bd_splitter*( bquadr*bquadr - 24.0*bquadr*d - 48.0*dquadr ) + Deltaremainder -8*( bs2*Qinternal -b*bquadr*bs3 )  ) /(Q*( Delta0*Delta0 + bs5*Delta0 + cquadr(bs5)  )   )  )/12
 */
        __pyx_t_7 = PyNumber_Negative(__pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 497, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "Full_Matrix.pyx":499
 *                 D21_min_SS=- (  -2.*(pm +bs1 ) \
 *                  + (  bs2 -36*d*bs1 +72*vsigmasquared*(xld*vsigmasquared+dm )     +bs3 )/(Q*Q +Q*bs4 + bs4*bs4 ) \
 *                  +  (  9.0*bd_splitter*( bquadr*bquadr - 24.0*bquadr*d - 48.0*dquadr ) + Deltaremainder -8*( bs2*Qinternal -b*bquadr*bs3 )  ) /(Q*( Delta0*Delta0 + bs5*Delta0 + cquadr(bs5)  )   )  )/12             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_12 = __Pyx_PyNumber_Divide(__pyx_t_7, __pyx_int_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 499, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_10 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_t_12); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 499, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_v_D21_min_SS = __pyx_t_10;

        /* "Full_Matrix.pyx":502
 * 
 * 
 *                 D21_min_vzsq[0] = D21_min_SS  - vrem[0]*(2*S+vrem[0]) -bm             # <<<<<<<<<<<<<<
 *                 D21_min_vzsq[1] = D21_min_SS  - vrem[1]*(2*S+vrem[1]) -bm
 *                 D21_min_vzsq[2] = D21_min_SS  - vrem[2]*(-2*S+vrem[2]) -bm
 */
        (__pyx_v_D21_min_vzsq[0]) = __Pyx_c_diff_double(__Pyx_c_diff_double(__pyx_v_D21_min_SS, __Pyx_c_prod_double((__pyx_v_vrem[0]), __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_S), (__pyx_v_vrem[0])))), __pyx_v_bm);

        /* "Full_Matrix.pyx":503
 * 
 *                 D21_min_vzsq[0] = D21_min_SS  - vrem[0]*(2*S+vrem[0]) -bm
 *                 D21_min_vzsq[1] = D21_min_SS  - vrem[1]*(2*S+vrem[1]) -bm             # <<<<<<<<<<<<<<
 *                 D21_min_vzsq[2] = D21_min_SS  - vrem[2]*(-2*S+vrem[2]) -bm
 *                 D21_min_vzsq[3] = D21_min_SS  - vrem[3]*(-2*S+vrem[3]) -bm
 */
        (__pyx_v_D21_min_vzsq[1]) = __Pyx_c_diff_double(__Pyx_c_diff_double(__pyx_v_D21_min_SS, __Pyx_c_prod_double((__pyx_v_vrem[1]), __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_S), (__pyx_v_vrem[1])))), __pyx_v_bm);

        /* "Full_Matrix.pyx":504
 *                 D21_min_vzsq[0] = D21_min_SS  - vrem[0]*(2*S+vrem[0]) -bm
 *                 D21_min_vzsq[1] = D21_min_SS  - vrem[1]*(2*S+vrem[1]) -bm
 *                 D21_min_vzsq[2] = D21_min_SS  - vrem[2]*(-2*S+vrem[2]) -bm             # <<<<<<<<<<<<<<
 *                 D21_min_vzsq[3] = D21_min_SS  - vrem[3]*(-2*S+vrem[3]) -bm
 *                 for i in range(4):
 */
        (__pyx_v_D21_min_vzsq[2]) = __Pyx_c_diff_double(__Pyx_c_diff_double(__pyx_v_D21_min_SS, __Pyx_c_prod_double((__pyx_v_vrem[2]), __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(-2L, 0), __pyx_v_S), (__pyx_v_vrem[2])))), __pyx_v_bm);

        /* "Full_Matrix.pyx":505
 *                 D21_min_vzsq[1] = D21_min_SS  - vrem[1]*(2*S+vrem[1]) -bm
 *                 D21_min_vzsq[2] = D21_min_SS  - vrem[2]*(-2*S+vrem[2]) -bm
 *                 D21_min_vzsq[3] = D21_min_SS  - vrem[3]*(-2*S+vrem[3]) -bm             # <<<<<<<<<<<<<<
 *                 for i in range(4):
 *                     D34D43_min_vD33vD44[i]= D21_min_vzsq[i] -(vz[0])[i]*a +xld +bm
 */
        (__pyx_v_D21_min_vzsq[3]) = __Pyx_c_diff_double(__Pyx_c_diff_double(__pyx_v_D21_min_SS, __Pyx_c_prod_double((__pyx_v_vrem[3]), __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(-2L, 0), __pyx_v_S), (__pyx_v_vrem[3])))), __pyx_v_bm);

        /* "Full_Matrix.pyx":506
 *                 D21_min_vzsq[2] = D21_min_SS  - vrem[2]*(-2*S+vrem[2]) -bm
 *                 D21_min_vzsq[3] = D21_min_SS  - vrem[3]*(-2*S+vrem[3]) -bm
 *                 for i in range(4):             # <<<<<<<<<<<<<<
 *                     D34D43_min_vD33vD44[i]= D21_min_vzsq[i] -(vz[0])[i]*a +xld +bm
 *              #   print("hallo")
 */
        for (__pyx_t_5 = 0; __pyx_t_5 < 4; __pyx_t_5+=1) {
          __pyx_v_i = __pyx_t_5;

          /* "Full_Matrix.pyx":507
 *                 D21_min_vzsq[3] = D21_min_SS  - vrem[3]*(-2*S+vrem[3]) -bm
 *                 for i in range(4):
 *                     D34D43_min_vD33vD44[i]= D21_min_vzsq[i] -(vz[0])[i]*a +xld +bm             # <<<<<<<<<<<<<<
 *              #   print("hallo")
 * 
 */
          (__pyx_v_D34D43_min_vD33vD44[__pyx_v_i]) = __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_diff_double((__pyx_v_D21_min_vzsq[__pyx_v_i]), __Pyx_c_prod_double(((__pyx_v_vz[0])[__pyx_v_i]), __pyx_v_a)), __pyx_v_xld), __pyx_v_bm);
        }

        /* "Full_Matrix.pyx":513
 *                 #Force special cases:
 * 
 *                 if( ( (D31==0) and ( (MS[0]).D41==0) ) or ( ( (MS[0]).D23==0 )  and (D24==0) ) ):             # <<<<<<<<<<<<<<
 *                     (vz[0])[0]=sqrt(vsigmasquared)
 *                     (vz[0])[1]=sqrt(vpisquared)
 */
        __pyx_t_4 = ((__Pyx_c_eq_double(__pyx_v_D31, __pyx_t_double_complex_from_parts(0, 0))) != 0);
        if (!__pyx_t_4) {
          goto __pyx_L28_next_or;
        } else {
        }
        __pyx_t_4 = ((__Pyx_c_eq_double((__pyx_v_MS[0]).D41, __pyx_t_double_complex_from_parts(0, 0))) != 0);
        if (!__pyx_t_4) {
        } else {
          __pyx_t_3 = __pyx_t_4;
          goto __pyx_L27_bool_binop_done;
        }
        __pyx_L28_next_or:;
        __pyx_t_4 = ((__Pyx_c_eq_double((__pyx_v_MS[0]).D23, __pyx_t_double_complex_from_parts(0, 0))) != 0);
        if (__pyx_t_4) {
        } else {
          __pyx_t_3 = __pyx_t_4;
          goto __pyx_L27_bool_binop_done;
        }
        __pyx_t_4 = ((__Pyx_c_eq_double(__pyx_v_D24, __pyx_t_double_complex_from_parts(0, 0))) != 0);
        __pyx_t_3 = __pyx_t_4;
        __pyx_L27_bool_binop_done:;
        if (__pyx_t_3) {

          /* "Full_Matrix.pyx":514
 * 
 *                 if( ( (D31==0) and ( (MS[0]).D41==0) ) or ( ( (MS[0]).D23==0 )  and (D24==0) ) ):
 *                     (vz[0])[0]=sqrt(vsigmasquared)             # <<<<<<<<<<<<<<
 *                     (vz[0])[1]=sqrt(vpisquared)
 *                     (vz[0])[2]=-(vz[0])[0]
 */
          ((__pyx_v_vz[0])[0]) = sqrt(__pyx_v_vsigmasquared);

          /* "Full_Matrix.pyx":515
 *                 if( ( (D31==0) and ( (MS[0]).D41==0) ) or ( ( (MS[0]).D23==0 )  and (D24==0) ) ):
 *                     (vz[0])[0]=sqrt(vsigmasquared)
 *                     (vz[0])[1]=sqrt(vpisquared)             # <<<<<<<<<<<<<<
 *                     (vz[0])[2]=-(vz[0])[0]
 *                     (vz[0])[3]=-(vz[0])[1]
 */
          ((__pyx_v_vz[0])[1]) = sqrt(__pyx_v_vpisquared);

          /* "Full_Matrix.pyx":516
 *                     (vz[0])[0]=sqrt(vsigmasquared)
 *                     (vz[0])[1]=sqrt(vpisquared)
 *                     (vz[0])[2]=-(vz[0])[0]             # <<<<<<<<<<<<<<
 *                     (vz[0])[3]=-(vz[0])[1]
 *                     D21_min_vzsq[0]=0
 */
          ((__pyx_v_vz[0])[2]) = __Pyx_c_neg_double(((__pyx_v_vz[0])[0]));

          /* "Full_Matrix.pyx":517
 *                     (vz[0])[1]=sqrt(vpisquared)
 *                     (vz[0])[2]=-(vz[0])[0]
 *                     (vz[0])[3]=-(vz[0])[1]             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[0]=0
 *                     D21_min_vzsq[1]=-xld
 */
          ((__pyx_v_vz[0])[3]) = __Pyx_c_neg_double(((__pyx_v_vz[0])[1]));

          /* "Full_Matrix.pyx":518
 *                     (vz[0])[2]=-(vz[0])[0]
 *                     (vz[0])[3]=-(vz[0])[1]
 *                     D21_min_vzsq[0]=0             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[1]=-xld
 *                     D21_min_vzsq[2]=0
 */
          (__pyx_v_D21_min_vzsq[0]) = __pyx_t_double_complex_from_parts(0, 0);

          /* "Full_Matrix.pyx":519
 *                     (vz[0])[3]=-(vz[0])[1]
 *                     D21_min_vzsq[0]=0
 *                     D21_min_vzsq[1]=-xld             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[2]=0
 *                     D21_min_vzsq[3]=-xld
 */
          (__pyx_v_D21_min_vzsq[1]) = __Pyx_c_neg_double(__pyx_v_xld);

          /* "Full_Matrix.pyx":520
 *                     D21_min_vzsq[0]=0
 *                     D21_min_vzsq[1]=-xld
 *                     D21_min_vzsq[2]=0             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[3]=-xld
 * 
 */
          (__pyx_v_D21_min_vzsq[2]) = __pyx_t_double_complex_from_parts(0, 0);

          /* "Full_Matrix.pyx":521
 *                     D21_min_vzsq[1]=-xld
 *                     D21_min_vzsq[2]=0
 *                     D21_min_vzsq[3]=-xld             # <<<<<<<<<<<<<<
 * 
 * 
 */
          (__pyx_v_D21_min_vzsq[3]) = __Pyx_c_neg_double(__pyx_v_xld);

          /* "Full_Matrix.pyx":513
 *                 #Force special cases:
 * 
 *                 if( ( (D31==0) and ( (MS[0]).D41==0) ) or ( ( (MS[0]).D23==0 )  and (D24==0) ) ):             # <<<<<<<<<<<<<<
 *                     (vz[0])[0]=sqrt(vsigmasquared)
 *                     (vz[0])[1]=sqrt(vpisquared)
 */
        }
      }
      __pyx_L15:;

      /* "Full_Matrix.pyx":529
 *                # print( D34D43_min_vD33vD44[i] )
 * 
 *             if( ( (vz[0])[0] ).real < 0 ):             # <<<<<<<<<<<<<<
 *                # switch=1
 *                 if( ( (vz[0])[2] ).real >0 ):
 */
      __pyx_t_3 = ((__Pyx_CREAL(((__pyx_v_vz[0])[0])) < 0.0) != 0);
      if (__pyx_t_3) {

        /* "Full_Matrix.pyx":531
 *             if( ( (vz[0])[0] ).real < 0 ):
 *                # switch=1
 *                 if( ( (vz[0])[2] ).real >0 ):             # <<<<<<<<<<<<<<
 *                     bs1=(vz[0])[0]
 *                     (vz[0])[0]=(vz[0])[2]
 */
        __pyx_t_3 = ((__Pyx_CREAL(((__pyx_v_vz[0])[2])) > 0.0) != 0);
        if (__pyx_t_3) {

          /* "Full_Matrix.pyx":532
 *                # switch=1
 *                 if( ( (vz[0])[2] ).real >0 ):
 *                     bs1=(vz[0])[0]             # <<<<<<<<<<<<<<
 *                     (vz[0])[0]=(vz[0])[2]
 *                     (vz[0])[2]=bs1
 */
          __pyx_v_bs1 = ((__pyx_v_vz[0])[0]);

          /* "Full_Matrix.pyx":533
 *                 if( ( (vz[0])[2] ).real >0 ):
 *                     bs1=(vz[0])[0]
 *                     (vz[0])[0]=(vz[0])[2]             # <<<<<<<<<<<<<<
 *                     (vz[0])[2]=bs1
 *                     bs1=D21_min_vzsq[0]
 */
          ((__pyx_v_vz[0])[0]) = ((__pyx_v_vz[0])[2]);

          /* "Full_Matrix.pyx":534
 *                     bs1=(vz[0])[0]
 *                     (vz[0])[0]=(vz[0])[2]
 *                     (vz[0])[2]=bs1             # <<<<<<<<<<<<<<
 *                     bs1=D21_min_vzsq[0]
 *                     D21_min_vzsq[0]=D21_min_vzsq[2]
 */
          ((__pyx_v_vz[0])[2]) = __pyx_v_bs1;

          /* "Full_Matrix.pyx":535
 *                     (vz[0])[0]=(vz[0])[2]
 *                     (vz[0])[2]=bs1
 *                     bs1=D21_min_vzsq[0]             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[0]=D21_min_vzsq[2]
 *                     D21_min_vzsq[2]=bs1
 */
          __pyx_v_bs1 = (__pyx_v_D21_min_vzsq[0]);

          /* "Full_Matrix.pyx":536
 *                     (vz[0])[2]=bs1
 *                     bs1=D21_min_vzsq[0]
 *                     D21_min_vzsq[0]=D21_min_vzsq[2]             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[2]=bs1
 *                     bs1=D34D43_min_vD33vD44[0]
 */
          (__pyx_v_D21_min_vzsq[0]) = (__pyx_v_D21_min_vzsq[2]);

          /* "Full_Matrix.pyx":537
 *                     bs1=D21_min_vzsq[0]
 *                     D21_min_vzsq[0]=D21_min_vzsq[2]
 *                     D21_min_vzsq[2]=bs1             # <<<<<<<<<<<<<<
 *                     bs1=D34D43_min_vD33vD44[0]
 *                     D34D43_min_vD33vD44[0]=D34D43_min_vD33vD44[2]
 */
          (__pyx_v_D21_min_vzsq[2]) = __pyx_v_bs1;

          /* "Full_Matrix.pyx":538
 *                     D21_min_vzsq[0]=D21_min_vzsq[2]
 *                     D21_min_vzsq[2]=bs1
 *                     bs1=D34D43_min_vD33vD44[0]             # <<<<<<<<<<<<<<
 *                     D34D43_min_vD33vD44[0]=D34D43_min_vD33vD44[2]
 *                     D34D43_min_vD33vD44[2]=bs1
 */
          __pyx_v_bs1 = (__pyx_v_D34D43_min_vD33vD44[0]);

          /* "Full_Matrix.pyx":539
 *                     D21_min_vzsq[2]=bs1
 *                     bs1=D34D43_min_vD33vD44[0]
 *                     D34D43_min_vD33vD44[0]=D34D43_min_vD33vD44[2]             # <<<<<<<<<<<<<<
 *                     D34D43_min_vD33vD44[2]=bs1
 *                 #    print("switching 0 2")
 */
          (__pyx_v_D34D43_min_vD33vD44[0]) = (__pyx_v_D34D43_min_vD33vD44[2]);

          /* "Full_Matrix.pyx":540
 *                     bs1=D34D43_min_vD33vD44[0]
 *                     D34D43_min_vD33vD44[0]=D34D43_min_vD33vD44[2]
 *                     D34D43_min_vD33vD44[2]=bs1             # <<<<<<<<<<<<<<
 *                 #    print("switching 0 2")
 *                 else:
 */
          (__pyx_v_D34D43_min_vD33vD44[2]) = __pyx_v_bs1;

          /* "Full_Matrix.pyx":531
 *             if( ( (vz[0])[0] ).real < 0 ):
 *                # switch=1
 *                 if( ( (vz[0])[2] ).real >0 ):             # <<<<<<<<<<<<<<
 *                     bs1=(vz[0])[0]
 *                     (vz[0])[0]=(vz[0])[2]
 */
          goto __pyx_L32;
        }

        /* "Full_Matrix.pyx":543
 *                 #    print("switching 0 2")
 *                 else:
 *                     bs1=(vz[0])[0]             # <<<<<<<<<<<<<<
 *                     (vz[0])[0]=(vz[0])[3]
 *                     (vz[0])[3]=bs1
 */
        /*else*/ {
          __pyx_v_bs1 = ((__pyx_v_vz[0])[0]);

          /* "Full_Matrix.pyx":544
 *                 else:
 *                     bs1=(vz[0])[0]
 *                     (vz[0])[0]=(vz[0])[3]             # <<<<<<<<<<<<<<
 *                     (vz[0])[3]=bs1
 *                     bs1=D21_min_vzsq[0]
 */
          ((__pyx_v_vz[0])[0]) = ((__pyx_v_vz[0])[3]);

          /* "Full_Matrix.pyx":545
 *                     bs1=(vz[0])[0]
 *                     (vz[0])[0]=(vz[0])[3]
 *                     (vz[0])[3]=bs1             # <<<<<<<<<<<<<<
 *                     bs1=D21_min_vzsq[0]
 *                     D21_min_vzsq[0]=D21_min_vzsq[3]
 */
          ((__pyx_v_vz[0])[3]) = __pyx_v_bs1;

          /* "Full_Matrix.pyx":546
 *                     (vz[0])[0]=(vz[0])[3]
 *                     (vz[0])[3]=bs1
 *                     bs1=D21_min_vzsq[0]             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[0]=D21_min_vzsq[3]
 *                     D21_min_vzsq[3]=bs1
 */
          __pyx_v_bs1 = (__pyx_v_D21_min_vzsq[0]);

          /* "Full_Matrix.pyx":547
 *                     (vz[0])[3]=bs1
 *                     bs1=D21_min_vzsq[0]
 *                     D21_min_vzsq[0]=D21_min_vzsq[3]             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[3]=bs1
 *                     bs1=D34D43_min_vD33vD44[0]
 */
          (__pyx_v_D21_min_vzsq[0]) = (__pyx_v_D21_min_vzsq[3]);

          /* "Full_Matrix.pyx":548
 *                     bs1=D21_min_vzsq[0]
 *                     D21_min_vzsq[0]=D21_min_vzsq[3]
 *                     D21_min_vzsq[3]=bs1             # <<<<<<<<<<<<<<
 *                     bs1=D34D43_min_vD33vD44[0]
 *                     D34D43_min_vD33vD44[0]=D34D43_min_vD33vD44[3]
 */
          (__pyx_v_D21_min_vzsq[3]) = __pyx_v_bs1;

          /* "Full_Matrix.pyx":549
 *                     D21_min_vzsq[0]=D21_min_vzsq[3]
 *                     D21_min_vzsq[3]=bs1
 *                     bs1=D34D43_min_vD33vD44[0]             # <<<<<<<<<<<<<<
 *                     D34D43_min_vD33vD44[0]=D34D43_min_vD33vD44[3]
 *                     D34D43_min_vD33vD44[3]=bs1
 */
          __pyx_v_bs1 = (__pyx_v_D34D43_min_vD33vD44[0]);

          /* "Full_Matrix.pyx":550
 *                     D21_min_vzsq[3]=bs1
 *                     bs1=D34D43_min_vD33vD44[0]
 *                     D34D43_min_vD33vD44[0]=D34D43_min_vD33vD44[3]             # <<<<<<<<<<<<<<
 *                     D34D43_min_vD33vD44[3]=bs1
 *                    # print("switching 0 3")
 */
          (__pyx_v_D34D43_min_vD33vD44[0]) = (__pyx_v_D34D43_min_vD33vD44[3]);

          /* "Full_Matrix.pyx":551
 *                     bs1=D34D43_min_vD33vD44[0]
 *                     D34D43_min_vD33vD44[0]=D34D43_min_vD33vD44[3]
 *                     D34D43_min_vD33vD44[3]=bs1             # <<<<<<<<<<<<<<
 *                    # print("switching 0 3")
 *             if( ( (vz[0])[1] ).real < 0 ):
 */
          (__pyx_v_D34D43_min_vD33vD44[3]) = __pyx_v_bs1;
        }
        __pyx_L32:;

        /* "Full_Matrix.pyx":529
 *                # print( D34D43_min_vD33vD44[i] )
 * 
 *             if( ( (vz[0])[0] ).real < 0 ):             # <<<<<<<<<<<<<<
 *                # switch=1
 *                 if( ( (vz[0])[2] ).real >0 ):
 */
      }

      /* "Full_Matrix.pyx":553
 *                     D34D43_min_vD33vD44[3]=bs1
 *                    # print("switching 0 3")
 *             if( ( (vz[0])[1] ).real < 0 ):             # <<<<<<<<<<<<<<
 *              #   switch=1
 *                 if( ( (vz[0])[2] ).real >0 ):
 */
      __pyx_t_3 = ((__Pyx_CREAL(((__pyx_v_vz[0])[1])) < 0.0) != 0);
      if (__pyx_t_3) {

        /* "Full_Matrix.pyx":555
 *             if( ( (vz[0])[1] ).real < 0 ):
 *              #   switch=1
 *                 if( ( (vz[0])[2] ).real >0 ):             # <<<<<<<<<<<<<<
 *                     bs1=(vz[0])[1]
 *                     (vz[0])[1]=(vz[0])[2]
 */
        __pyx_t_3 = ((__Pyx_CREAL(((__pyx_v_vz[0])[2])) > 0.0) != 0);
        if (__pyx_t_3) {

          /* "Full_Matrix.pyx":556
 *              #   switch=1
 *                 if( ( (vz[0])[2] ).real >0 ):
 *                     bs1=(vz[0])[1]             # <<<<<<<<<<<<<<
 *                     (vz[0])[1]=(vz[0])[2]
 *                     (vz[0])[2]=bs1
 */
          __pyx_v_bs1 = ((__pyx_v_vz[0])[1]);

          /* "Full_Matrix.pyx":557
 *                 if( ( (vz[0])[2] ).real >0 ):
 *                     bs1=(vz[0])[1]
 *                     (vz[0])[1]=(vz[0])[2]             # <<<<<<<<<<<<<<
 *                     (vz[0])[2]=bs1
 *                     bs1=D21_min_vzsq[1]
 */
          ((__pyx_v_vz[0])[1]) = ((__pyx_v_vz[0])[2]);

          /* "Full_Matrix.pyx":558
 *                     bs1=(vz[0])[1]
 *                     (vz[0])[1]=(vz[0])[2]
 *                     (vz[0])[2]=bs1             # <<<<<<<<<<<<<<
 *                     bs1=D21_min_vzsq[1]
 *                     D21_min_vzsq[1]=D21_min_vzsq[2]
 */
          ((__pyx_v_vz[0])[2]) = __pyx_v_bs1;

          /* "Full_Matrix.pyx":559
 *                     (vz[0])[1]=(vz[0])[2]
 *                     (vz[0])[2]=bs1
 *                     bs1=D21_min_vzsq[1]             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[1]=D21_min_vzsq[2]
 *                     D21_min_vzsq[2]=bs1
 */
          __pyx_v_bs1 = (__pyx_v_D21_min_vzsq[1]);

          /* "Full_Matrix.pyx":560
 *                     (vz[0])[2]=bs1
 *                     bs1=D21_min_vzsq[1]
 *                     D21_min_vzsq[1]=D21_min_vzsq[2]             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[2]=bs1
 *                     bs1=D34D43_min_vD33vD44[1]
 */
          (__pyx_v_D21_min_vzsq[1]) = (__pyx_v_D21_min_vzsq[2]);

          /* "Full_Matrix.pyx":561
 *                     bs1=D21_min_vzsq[1]
 *                     D21_min_vzsq[1]=D21_min_vzsq[2]
 *                     D21_min_vzsq[2]=bs1             # <<<<<<<<<<<<<<
 *                     bs1=D34D43_min_vD33vD44[1]
 *                     D34D43_min_vD33vD44[1]=D34D43_min_vD33vD44[2]
 */
          (__pyx_v_D21_min_vzsq[2]) = __pyx_v_bs1;

          /* "Full_Matrix.pyx":562
 *                     D21_min_vzsq[1]=D21_min_vzsq[2]
 *                     D21_min_vzsq[2]=bs1
 *                     bs1=D34D43_min_vD33vD44[1]             # <<<<<<<<<<<<<<
 *                     D34D43_min_vD33vD44[1]=D34D43_min_vD33vD44[2]
 *                     D34D43_min_vD33vD44[2]=bs1
 */
          __pyx_v_bs1 = (__pyx_v_D34D43_min_vD33vD44[1]);

          /* "Full_Matrix.pyx":563
 *                     D21_min_vzsq[2]=bs1
 *                     bs1=D34D43_min_vD33vD44[1]
 *                     D34D43_min_vD33vD44[1]=D34D43_min_vD33vD44[2]             # <<<<<<<<<<<<<<
 *                     D34D43_min_vD33vD44[2]=bs1
 *                  #   print("switching 1 2")
 */
          (__pyx_v_D34D43_min_vD33vD44[1]) = (__pyx_v_D34D43_min_vD33vD44[2]);

          /* "Full_Matrix.pyx":564
 *                     bs1=D34D43_min_vD33vD44[1]
 *                     D34D43_min_vD33vD44[1]=D34D43_min_vD33vD44[2]
 *                     D34D43_min_vD33vD44[2]=bs1             # <<<<<<<<<<<<<<
 *                  #   print("switching 1 2")
 *                 else:
 */
          (__pyx_v_D34D43_min_vD33vD44[2]) = __pyx_v_bs1;

          /* "Full_Matrix.pyx":555
 *             if( ( (vz[0])[1] ).real < 0 ):
 *              #   switch=1
 *                 if( ( (vz[0])[2] ).real >0 ):             # <<<<<<<<<<<<<<
 *                     bs1=(vz[0])[1]
 *                     (vz[0])[1]=(vz[0])[2]
 */
          goto __pyx_L34;
        }

        /* "Full_Matrix.pyx":567
 *                  #   print("switching 1 2")
 *                 else:
 *                     bs1=(vz[0])[1]             # <<<<<<<<<<<<<<
 *                     (vz[0])[1]=(vz[0])[3]
 *                     (vz[0])[3]=bs1
 */
        /*else*/ {
          __pyx_v_bs1 = ((__pyx_v_vz[0])[1]);

          /* "Full_Matrix.pyx":568
 *                 else:
 *                     bs1=(vz[0])[1]
 *                     (vz[0])[1]=(vz[0])[3]             # <<<<<<<<<<<<<<
 *                     (vz[0])[3]=bs1
 *                     bs1=D21_min_vzsq[1]
 */
          ((__pyx_v_vz[0])[1]) = ((__pyx_v_vz[0])[3]);

          /* "Full_Matrix.pyx":569
 *                     bs1=(vz[0])[1]
 *                     (vz[0])[1]=(vz[0])[3]
 *                     (vz[0])[3]=bs1             # <<<<<<<<<<<<<<
 *                     bs1=D21_min_vzsq[1]
 *                     D21_min_vzsq[1]=D21_min_vzsq[3]
 */
          ((__pyx_v_vz[0])[3]) = __pyx_v_bs1;

          /* "Full_Matrix.pyx":570
 *                     (vz[0])[1]=(vz[0])[3]
 *                     (vz[0])[3]=bs1
 *                     bs1=D21_min_vzsq[1]             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[1]=D21_min_vzsq[3]
 *                     D21_min_vzsq[3]=bs1
 */
          __pyx_v_bs1 = (__pyx_v_D21_min_vzsq[1]);

          /* "Full_Matrix.pyx":571
 *                     (vz[0])[3]=bs1
 *                     bs1=D21_min_vzsq[1]
 *                     D21_min_vzsq[1]=D21_min_vzsq[3]             # <<<<<<<<<<<<<<
 *                     D21_min_vzsq[3]=bs1
 *                     bs1=D34D43_min_vD33vD44[1]
 */
          (__pyx_v_D21_min_vzsq[1]) = (__pyx_v_D21_min_vzsq[3]);

          /* "Full_Matrix.pyx":572
 *                     bs1=D21_min_vzsq[1]
 *                     D21_min_vzsq[1]=D21_min_vzsq[3]
 *                     D21_min_vzsq[3]=bs1             # <<<<<<<<<<<<<<
 *                     bs1=D34D43_min_vD33vD44[1]
 *                     D34D43_min_vD33vD44[1]=D34D43_min_vD33vD44[3]
 */
          (__pyx_v_D21_min_vzsq[3]) = __pyx_v_bs1;

          /* "Full_Matrix.pyx":573
 *                     D21_min_vzsq[1]=D21_min_vzsq[3]
 *                     D21_min_vzsq[3]=bs1
 *                     bs1=D34D43_min_vD33vD44[1]             # <<<<<<<<<<<<<<
 *                     D34D43_min_vD33vD44[1]=D34D43_min_vD33vD44[3]
 *                     D34D43_min_vD33vD44[3]=bs1
 */
          __pyx_v_bs1 = (__pyx_v_D34D43_min_vD33vD44[1]);

          /* "Full_Matrix.pyx":574
 *                     D21_min_vzsq[3]=bs1
 *                     bs1=D34D43_min_vD33vD44[1]
 *                     D34D43_min_vD33vD44[1]=D34D43_min_vD33vD44[3]             # <<<<<<<<<<<<<<
 *                     D34D43_min_vD33vD44[3]=bs1
 *                   #  print("switching 1 3")
 */
          (__pyx_v_D34D43_min_vD33vD44[1]) = (__pyx_v_D34D43_min_vD33vD44[3]);

          /* "Full_Matrix.pyx":575
 *                     bs1=D34D43_min_vD33vD44[1]
 *                     D34D43_min_vD33vD44[1]=D34D43_min_vD33vD44[3]
 *                     D34D43_min_vD33vD44[3]=bs1             # <<<<<<<<<<<<<<
 *                   #  print("switching 1 3")
 * 
 */
          (__pyx_v_D34D43_min_vD33vD44[3]) = __pyx_v_bs1;
        }
        __pyx_L34:;

        /* "Full_Matrix.pyx":553
 *                     D34D43_min_vD33vD44[3]=bs1
 *                    # print("switching 0 3")
 *             if( ( (vz[0])[1] ).real < 0 ):             # <<<<<<<<<<<<<<
 *              #   switch=1
 *                 if( ( (vz[0])[2] ).real >0 ):
 */
      }

      /* "Full_Matrix.pyx":580
 *            # i=0
 * 
 *             comp1=Cmaxnorm(D31)             # <<<<<<<<<<<<<<
 *             comp2=Cmaxnorm( (MS[0]).D41 )
 * 
 */
      __pyx_v_comp1 = __pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm(__pyx_v_D31);

      /* "Full_Matrix.pyx":581
 * 
 *             comp1=Cmaxnorm(D31)
 *             comp2=Cmaxnorm( (MS[0]).D41 )             # <<<<<<<<<<<<<<
 * 
 *        #     print(comp1, comp2, comp3)
 */
      __pyx_v_comp2 = __pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm((__pyx_v_MS[0]).D41);

      /* "Full_Matrix.pyx":587
 *             #print("first evs")
 * 
 *             for i in range(0,4,2):             # <<<<<<<<<<<<<<
 *                 phipre[0]=1
 *                 phipre[1]=(vz[0])[i]
 */
      for (__pyx_t_5 = 0; __pyx_t_5 < 4; __pyx_t_5+=2) {
        __pyx_v_i = __pyx_t_5;

        /* "Full_Matrix.pyx":588
 * 
 *             for i in range(0,4,2):
 *                 phipre[0]=1             # <<<<<<<<<<<<<<
 *                 phipre[1]=(vz[0])[i]
 *                 comp3=Cmaxnorm( D21_min_vzsq[i] )
 */
        (__pyx_v_phipre[0]) = __pyx_t_double_complex_from_parts(1, 0);

        /* "Full_Matrix.pyx":589
 *             for i in range(0,4,2):
 *                 phipre[0]=1
 *                 phipre[1]=(vz[0])[i]             # <<<<<<<<<<<<<<
 *                 comp3=Cmaxnorm( D21_min_vzsq[i] )
 *                 if( (comp1==0) and (comp2==0) and (comp3==0) ):
 */
        (__pyx_v_phipre[1]) = ((__pyx_v_vz[0])[__pyx_v_i]);

        /* "Full_Matrix.pyx":590
 *                 phipre[0]=1
 *                 phipre[1]=(vz[0])[i]
 *                 comp3=Cmaxnorm( D21_min_vzsq[i] )             # <<<<<<<<<<<<<<
 *                 if( (comp1==0) and (comp2==0) and (comp3==0) ):
 *                     phipre[2] = 0
 */
        __pyx_v_comp3 = __pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm((__pyx_v_D21_min_vzsq[__pyx_v_i]));

        /* "Full_Matrix.pyx":591
 *                 phipre[1]=(vz[0])[i]
 *                 comp3=Cmaxnorm( D21_min_vzsq[i] )
 *                 if( (comp1==0) and (comp2==0) and (comp3==0) ):             # <<<<<<<<<<<<<<
 *                     phipre[2] = 0
 *                     phipre[3] = 0
 */
        __pyx_t_4 = ((__pyx_v_comp1 == 0.0) != 0);
        if (__pyx_t_4) {
        } else {
          __pyx_t_3 = __pyx_t_4;
          goto __pyx_L38_bool_binop_done;
        }
        __pyx_t_4 = ((__pyx_v_comp2 == 0.0) != 0);
        if (__pyx_t_4) {
        } else {
          __pyx_t_3 = __pyx_t_4;
          goto __pyx_L38_bool_binop_done;
        }
        __pyx_t_4 = ((__pyx_v_comp3 == 0.0) != 0);
        __pyx_t_3 = __pyx_t_4;
        __pyx_L38_bool_binop_done:;
        if (__pyx_t_3) {

          /* "Full_Matrix.pyx":592
 *                 comp3=Cmaxnorm( D21_min_vzsq[i] )
 *                 if( (comp1==0) and (comp2==0) and (comp3==0) ):
 *                     phipre[2] = 0             # <<<<<<<<<<<<<<
 *                     phipre[3] = 0
 *                 else:
 */
          (__pyx_v_phipre[2]) = __pyx_t_double_complex_from_parts(0, 0);

          /* "Full_Matrix.pyx":593
 *                 if( (comp1==0) and (comp2==0) and (comp3==0) ):
 *                     phipre[2] = 0
 *                     phipre[3] = 0             # <<<<<<<<<<<<<<
 *                 else:
 *                     if( comp1<=comp2 ):
 */
          (__pyx_v_phipre[3]) = __pyx_t_double_complex_from_parts(0, 0);

          /* "Full_Matrix.pyx":591
 *                 phipre[1]=(vz[0])[i]
 *                 comp3=Cmaxnorm( D21_min_vzsq[i] )
 *                 if( (comp1==0) and (comp2==0) and (comp3==0) ):             # <<<<<<<<<<<<<<
 *                     phipre[2] = 0
 *                     phipre[3] = 0
 */
          goto __pyx_L37;
        }

        /* "Full_Matrix.pyx":595
 *                     phipre[3] = 0
 *                 else:
 *                     if( comp1<=comp2 ):             # <<<<<<<<<<<<<<
 *                        # print("hi1")
 *                         if( (comp1==0) and (comp2==0) ):
 */
        /*else*/ {
          __pyx_t_3 = ((__pyx_v_comp1 <= __pyx_v_comp2) != 0);
          if (__pyx_t_3) {

            /* "Full_Matrix.pyx":597
 *                     if( comp1<=comp2 ):
 *                        # print("hi1")
 *                         if( (comp1==0) and (comp2==0) ):             # <<<<<<<<<<<<<<
 *                             bs1=0
 *                         else:
 */
            __pyx_t_4 = ((__pyx_v_comp1 == 0.0) != 0);
            if (__pyx_t_4) {
            } else {
              __pyx_t_3 = __pyx_t_4;
              goto __pyx_L43_bool_binop_done;
            }
            __pyx_t_4 = ((__pyx_v_comp2 == 0.0) != 0);
            __pyx_t_3 = __pyx_t_4;
            __pyx_L43_bool_binop_done:;
            if (__pyx_t_3) {

              /* "Full_Matrix.pyx":598
 *                        # print("hi1")
 *                         if( (comp1==0) and (comp2==0) ):
 *                             bs1=0             # <<<<<<<<<<<<<<
 *                         else:
 *                             bs1=D31/(MS[0]).D41
 */
              __pyx_v_bs1 = __pyx_t_double_complex_from_parts(0, 0);

              /* "Full_Matrix.pyx":597
 *                     if( comp1<=comp2 ):
 *                        # print("hi1")
 *                         if( (comp1==0) and (comp2==0) ):             # <<<<<<<<<<<<<<
 *                             bs1=0
 *                         else:
 */
              goto __pyx_L42;
            }

            /* "Full_Matrix.pyx":600
 *                             bs1=0
 *                         else:
 *                             bs1=D31/(MS[0]).D41             # <<<<<<<<<<<<<<
 * 
 *                         denom=one_minus_vyvy_div_ezz-bs1*(D44- (vz[0])[i] )
 */
            /*else*/ {
              if (unlikely(__Pyx_c_is_zero_double((__pyx_v_MS[0]).D41))) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 600, __pyx_L1_error)
              }
              __pyx_v_bs1 = __Pyx_c_quot_double(__pyx_v_D31, (__pyx_v_MS[0]).D41);
            }
            __pyx_L42:;

            /* "Full_Matrix.pyx":602
 *                             bs1=D31/(MS[0]).D41
 * 
 *                         denom=one_minus_vyvy_div_ezz-bs1*(D44- (vz[0])[i] )             # <<<<<<<<<<<<<<
 *                         if(denom==0):
 *                             denom=cx*2.0e-16
 */
            __pyx_v_denom = __Pyx_c_diff_double(__pyx_v_one_minus_vyvy_div_ezz, __Pyx_c_prod_double(__pyx_v_bs1, __Pyx_c_diff_double(__pyx_v_D44, ((__pyx_v_vz[0])[__pyx_v_i]))));

            /* "Full_Matrix.pyx":603
 * 
 *                         denom=one_minus_vyvy_div_ezz-bs1*(D44- (vz[0])[i] )
 *                         if(denom==0):             # <<<<<<<<<<<<<<
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =( (vz[0])[i] - D33 )/denom
 */
            __pyx_t_3 = ((__Pyx_c_eq_double(__pyx_v_denom, __pyx_t_double_complex_from_parts(0, 0))) != 0);
            if (__pyx_t_3) {

              /* "Full_Matrix.pyx":604
 *                         denom=one_minus_vyvy_div_ezz-bs1*(D44- (vz[0])[i] )
 *                         if(denom==0):
 *                             denom=cx*2.0e-16             # <<<<<<<<<<<<<<
 *                         rel34u[i] =( (vz[0])[i] - D33 )/denom
 *                         rel34m[i] =bs1*(MS[0]).D43/denom
 */
              __pyx_v_denom = __Pyx_c_prod_double(__pyx_v_cx, __pyx_t_double_complex_from_parts(2.0e-16, 0));

              /* "Full_Matrix.pyx":603
 * 
 *                         denom=one_minus_vyvy_div_ezz-bs1*(D44- (vz[0])[i] )
 *                         if(denom==0):             # <<<<<<<<<<<<<<
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =( (vz[0])[i] - D33 )/denom
 */
            }

            /* "Full_Matrix.pyx":605
 *                         if(denom==0):
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =( (vz[0])[i] - D33 )/denom             # <<<<<<<<<<<<<<
 *                         rel34m[i] =bs1*(MS[0]).D43/denom
 *                         rel34[i]=rel34m[i]+rel34u[i]
 */
            __pyx_t_10 = __Pyx_c_diff_double(((__pyx_v_vz[0])[__pyx_v_i]), __pyx_v_D33);
            if (unlikely(__Pyx_c_is_zero_double(__pyx_v_denom))) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 605, __pyx_L1_error)
            }
            (__pyx_v_rel34u[__pyx_v_i]) = __Pyx_c_quot_double(__pyx_t_10, __pyx_v_denom);

            /* "Full_Matrix.pyx":606
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =( (vz[0])[i] - D33 )/denom
 *                         rel34m[i] =bs1*(MS[0]).D43/denom             # <<<<<<<<<<<<<<
 *                         rel34[i]=rel34m[i]+rel34u[i]
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 */
            __pyx_t_10 = __Pyx_c_prod_double(__pyx_v_bs1, (__pyx_v_MS[0]).D43);
            if (unlikely(__Pyx_c_is_zero_double(__pyx_v_denom))) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 606, __pyx_L1_error)
            }
            (__pyx_v_rel34m[__pyx_v_i]) = __Pyx_c_quot_double(__pyx_t_10, __pyx_v_denom);

            /* "Full_Matrix.pyx":607
 *                         rel34u[i] =( (vz[0])[i] - D33 )/denom
 *                         rel34m[i] =bs1*(MS[0]).D43/denom
 *                         rel34[i]=rel34m[i]+rel34u[i]             # <<<<<<<<<<<<<<
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 * 
 */
            (__pyx_v_rel34[__pyx_v_i]) = __Pyx_c_sum_double((__pyx_v_rel34m[__pyx_v_i]), (__pyx_v_rel34u[__pyx_v_i]));

            /* "Full_Matrix.pyx":608
 *                         rel34m[i] =bs1*(MS[0]).D43/denom
 *                         rel34[i]=rel34m[i]+rel34u[i]
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24             # <<<<<<<<<<<<<<
 * 
 *                         if( (comp2>comp3) or ( (bs3==0) ) ):
 */
            __pyx_v_bs3 = __Pyx_c_sum_double((__pyx_v_MS[0]).D23, __Pyx_c_prod_double((__pyx_v_rel34[__pyx_v_i]), __pyx_v_D24));

            /* "Full_Matrix.pyx":610
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 * 
 *                         if( (comp2>comp3) or ( (bs3==0) ) ):             # <<<<<<<<<<<<<<
 *                          #   print("use b")
 *                             bs2=bs1*(D44- (vz[0])[i] )
 */
            __pyx_t_4 = ((__pyx_v_comp2 > __pyx_v_comp3) != 0);
            if (!__pyx_t_4) {
            } else {
              __pyx_t_3 = __pyx_t_4;
              goto __pyx_L47_bool_binop_done;
            }
            __pyx_t_4 = ((__Pyx_c_eq_double(__pyx_v_bs3, __pyx_t_double_complex_from_parts(0, 0))) != 0);
            __pyx_t_3 = __pyx_t_4;
            __pyx_L47_bool_binop_done:;
            if (__pyx_t_3) {

              /* "Full_Matrix.pyx":612
 *                         if( (comp2>comp3) or ( (bs3==0) ) ):
 *                          #   print("use b")
 *                             bs2=bs1*(D44- (vz[0])[i] )             # <<<<<<<<<<<<<<
 * #                            print(bs1, bs2)
 * #                            print( (one_minus_vyvy_div_ezz-bs2  )  )
 */
              __pyx_v_bs2 = __Pyx_c_prod_double(__pyx_v_bs1, __Pyx_c_diff_double(__pyx_v_D44, ((__pyx_v_vz[0])[__pyx_v_i])));

              /* "Full_Matrix.pyx":616
 * #                            print( (one_minus_vyvy_div_ezz-bs2  )  )
 * #                            print( (  + (D44-(vz[0])[i] )*rel34m[i] +( D34D43_min_vD33vD44[i]-(MS[0]).D43*bs2 )/(one_minus_vyvy_div_ezz-bs2  ) ) )
 *                             phipre[2] = -(MS[0]).D41/(  + (D44-(vz[0])[i] )*rel34m[i] +( D34D43_min_vD33vD44[i]-(MS[0]).D43*bs2 )/(one_minus_vyvy_div_ezz-bs2  ) )             # <<<<<<<<<<<<<<
 *                             phipre[3] = rel34[i]*phipre[2]
 *                         else:
 */
              __pyx_t_10 = __Pyx_c_neg_double((__pyx_v_MS[0]).D41);
              __pyx_t_9 = __Pyx_c_diff_double((__pyx_v_D34D43_min_vD33vD44[__pyx_v_i]), __Pyx_c_prod_double((__pyx_v_MS[0]).D43, __pyx_v_bs2));
              __pyx_t_1 = __Pyx_c_diff_double(__pyx_v_one_minus_vyvy_div_ezz, __pyx_v_bs2);
              if (unlikely(__Pyx_c_is_zero_double(__pyx_t_1))) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 616, __pyx_L1_error)
              }
              __pyx_t_2 = __Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_v_D44, ((__pyx_v_vz[0])[__pyx_v_i])), (__pyx_v_rel34m[__pyx_v_i])), __Pyx_c_quot_double(__pyx_t_9, __pyx_t_1));
              if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 616, __pyx_L1_error)
              }
              (__pyx_v_phipre[2]) = __Pyx_c_quot_double(__pyx_t_10, __pyx_t_2);

              /* "Full_Matrix.pyx":617
 * #                            print( (  + (D44-(vz[0])[i] )*rel34m[i] +( D34D43_min_vD33vD44[i]-(MS[0]).D43*bs2 )/(one_minus_vyvy_div_ezz-bs2  ) ) )
 *                             phipre[2] = -(MS[0]).D41/(  + (D44-(vz[0])[i] )*rel34m[i] +( D34D43_min_vD33vD44[i]-(MS[0]).D43*bs2 )/(one_minus_vyvy_div_ezz-bs2  ) )
 *                             phipre[3] = rel34[i]*phipre[2]             # <<<<<<<<<<<<<<
 *                         else:
 *                           #  print("use c")
 */
              (__pyx_v_phipre[3]) = __Pyx_c_prod_double((__pyx_v_rel34[__pyx_v_i]), (__pyx_v_phipre[2]));

              /* "Full_Matrix.pyx":610
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 * 
 *                         if( (comp2>comp3) or ( (bs3==0) ) ):             # <<<<<<<<<<<<<<
 *                          #   print("use b")
 *                             bs2=bs1*(D44- (vz[0])[i] )
 */
              goto __pyx_L46;
            }

            /* "Full_Matrix.pyx":620
 *                         else:
 *                           #  print("use c")
 *                             phipre[2] = -D21_min_vzsq[i]/bs3             # <<<<<<<<<<<<<<
 *                             phipre[3] = rel34[i]*phipre[2]
 * 
 */
            /*else*/ {
              __pyx_t_2 = __Pyx_c_neg_double((__pyx_v_D21_min_vzsq[__pyx_v_i]));
              if (unlikely(__Pyx_c_is_zero_double(__pyx_v_bs3))) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 620, __pyx_L1_error)
              }
              (__pyx_v_phipre[2]) = __Pyx_c_quot_double(__pyx_t_2, __pyx_v_bs3);

              /* "Full_Matrix.pyx":621
 *                           #  print("use c")
 *                             phipre[2] = -D21_min_vzsq[i]/bs3
 *                             phipre[3] = rel34[i]*phipre[2]             # <<<<<<<<<<<<<<
 * 
 *                     elif( comp2<comp1 ):
 */
              (__pyx_v_phipre[3]) = __Pyx_c_prod_double((__pyx_v_rel34[__pyx_v_i]), (__pyx_v_phipre[2]));
            }
            __pyx_L46:;

            /* "Full_Matrix.pyx":595
 *                     phipre[3] = 0
 *                 else:
 *                     if( comp1<=comp2 ):             # <<<<<<<<<<<<<<
 *                        # print("hi1")
 *                         if( (comp1==0) and (comp2==0) ):
 */
            goto __pyx_L41;
          }

          /* "Full_Matrix.pyx":623
 *                             phipre[3] = rel34[i]*phipre[2]
 * 
 *                     elif( comp2<comp1 ):             # <<<<<<<<<<<<<<
 * 
 *                         bs1=(MS[0]).D41/D31
 */
          __pyx_t_3 = ((__pyx_v_comp2 < __pyx_v_comp1) != 0);
          if (__pyx_t_3) {

            /* "Full_Matrix.pyx":625
 *                     elif( comp2<comp1 ):
 * 
 *                         bs1=(MS[0]).D41/D31             # <<<<<<<<<<<<<<
 *                         denom=bs1*one_minus_vyvy_div_ezz-(D44- (vz[0])[i] )
 *                         if(denom==0):
 */
            if (unlikely(__Pyx_c_is_zero_double(__pyx_v_D31))) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 625, __pyx_L1_error)
            }
            __pyx_v_bs1 = __Pyx_c_quot_double((__pyx_v_MS[0]).D41, __pyx_v_D31);

            /* "Full_Matrix.pyx":626
 * 
 *                         bs1=(MS[0]).D41/D31
 *                         denom=bs1*one_minus_vyvy_div_ezz-(D44- (vz[0])[i] )             # <<<<<<<<<<<<<<
 *                         if(denom==0):
 *                             denom=cx*2.0e-16
 */
            __pyx_v_denom = __Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_v_bs1, __pyx_v_one_minus_vyvy_div_ezz), __Pyx_c_diff_double(__pyx_v_D44, ((__pyx_v_vz[0])[__pyx_v_i])));

            /* "Full_Matrix.pyx":627
 *                         bs1=(MS[0]).D41/D31
 *                         denom=bs1*one_minus_vyvy_div_ezz-(D44- (vz[0])[i] )
 *                         if(denom==0):             # <<<<<<<<<<<<<<
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =(MS[0]).D43/denom
 */
            __pyx_t_3 = ((__Pyx_c_eq_double(__pyx_v_denom, __pyx_t_double_complex_from_parts(0, 0))) != 0);
            if (__pyx_t_3) {

              /* "Full_Matrix.pyx":628
 *                         denom=bs1*one_minus_vyvy_div_ezz-(D44- (vz[0])[i] )
 *                         if(denom==0):
 *                             denom=cx*2.0e-16             # <<<<<<<<<<<<<<
 *                         rel34u[i] =(MS[0]).D43/denom
 *                         rel34m[i] = bs1*( (vz[0])[i] - D33 )/denom
 */
              __pyx_v_denom = __Pyx_c_prod_double(__pyx_v_cx, __pyx_t_double_complex_from_parts(2.0e-16, 0));

              /* "Full_Matrix.pyx":627
 *                         bs1=(MS[0]).D41/D31
 *                         denom=bs1*one_minus_vyvy_div_ezz-(D44- (vz[0])[i] )
 *                         if(denom==0):             # <<<<<<<<<<<<<<
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =(MS[0]).D43/denom
 */
            }

            /* "Full_Matrix.pyx":629
 *                         if(denom==0):
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =(MS[0]).D43/denom             # <<<<<<<<<<<<<<
 *                         rel34m[i] = bs1*( (vz[0])[i] - D33 )/denom
 *                         rel34[i]=rel34m[i]+rel34u[i]
 */
            if (unlikely(__Pyx_c_is_zero_double(__pyx_v_denom))) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 629, __pyx_L1_error)
            }
            (__pyx_v_rel34u[__pyx_v_i]) = __Pyx_c_quot_double((__pyx_v_MS[0]).D43, __pyx_v_denom);

            /* "Full_Matrix.pyx":630
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =(MS[0]).D43/denom
 *                         rel34m[i] = bs1*( (vz[0])[i] - D33 )/denom             # <<<<<<<<<<<<<<
 *                         rel34[i]=rel34m[i]+rel34u[i]
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 */
            __pyx_t_2 = __Pyx_c_prod_double(__pyx_v_bs1, __Pyx_c_diff_double(((__pyx_v_vz[0])[__pyx_v_i]), __pyx_v_D33));
            if (unlikely(__Pyx_c_is_zero_double(__pyx_v_denom))) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 630, __pyx_L1_error)
            }
            (__pyx_v_rel34m[__pyx_v_i]) = __Pyx_c_quot_double(__pyx_t_2, __pyx_v_denom);

            /* "Full_Matrix.pyx":631
 *                         rel34u[i] =(MS[0]).D43/denom
 *                         rel34m[i] = bs1*( (vz[0])[i] - D33 )/denom
 *                         rel34[i]=rel34m[i]+rel34u[i]             # <<<<<<<<<<<<<<
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 * 
 */
            (__pyx_v_rel34[__pyx_v_i]) = __Pyx_c_sum_double((__pyx_v_rel34m[__pyx_v_i]), (__pyx_v_rel34u[__pyx_v_i]));

            /* "Full_Matrix.pyx":632
 *                         rel34m[i] = bs1*( (vz[0])[i] - D33 )/denom
 *                         rel34[i]=rel34m[i]+rel34u[i]
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24             # <<<<<<<<<<<<<<
 * 
 *                         if( (comp1>comp3) or (bs3==0) ):
 */
            __pyx_v_bs3 = __Pyx_c_sum_double((__pyx_v_MS[0]).D23, __Pyx_c_prod_double((__pyx_v_rel34[__pyx_v_i]), __pyx_v_D24));

            /* "Full_Matrix.pyx":634
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 * 
 *                         if( (comp1>comp3) or (bs3==0) ):             # <<<<<<<<<<<<<<
 *                             bs2=bs1*one_minus_vyvy_div_ezz
 *                         #    print( D33-(vz[0])[i] +one_minus_vyvy_div_ezz*rel34[i] )
 */
            __pyx_t_4 = ((__pyx_v_comp1 > __pyx_v_comp3) != 0);
            if (!__pyx_t_4) {
            } else {
              __pyx_t_3 = __pyx_t_4;
              goto __pyx_L51_bool_binop_done;
            }
            __pyx_t_4 = ((__Pyx_c_eq_double(__pyx_v_bs3, __pyx_t_double_complex_from_parts(0, 0))) != 0);
            __pyx_t_3 = __pyx_t_4;
            __pyx_L51_bool_binop_done:;
            if (__pyx_t_3) {

              /* "Full_Matrix.pyx":635
 * 
 *                         if( (comp1>comp3) or (bs3==0) ):
 *                             bs2=bs1*one_minus_vyvy_div_ezz             # <<<<<<<<<<<<<<
 *                         #    print( D33-(vz[0])[i] +one_minus_vyvy_div_ezz*rel34[i] )
 *                         #    print(  +one_minus_vyvy_div_ezz*rel34m[i] + (  (D33-(vz[0])[i])*bs2+ D34D43_min_vD33vD44[i] )/(bs2-(D44- (vz[0])[i] ))   )
 */
              __pyx_v_bs2 = __Pyx_c_prod_double(__pyx_v_bs1, __pyx_v_one_minus_vyvy_div_ezz);

              /* "Full_Matrix.pyx":638
 *                         #    print( D33-(vz[0])[i] +one_minus_vyvy_div_ezz*rel34[i] )
 *                         #    print(  +one_minus_vyvy_div_ezz*rel34m[i] + (  (D33-(vz[0])[i])*bs2+ D34D43_min_vD33vD44[i] )/(bs2-(D44- (vz[0])[i] ))   )
 *                             phipre[2] = -D31/(  +one_minus_vyvy_div_ezz*rel34m[i] + (  (D33-(vz[0])[i])*bs2+ D34D43_min_vD33vD44[i] )/(bs2-(D44- (vz[0])[i] ))   )             # <<<<<<<<<<<<<<
 *                             phipre[3] = rel34[i]*phipre[2]
 *                         else:
 */
              __pyx_t_2 = __Pyx_c_neg_double(__pyx_v_D31);
              __pyx_t_10 = __Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_v_D33, ((__pyx_v_vz[0])[__pyx_v_i])), __pyx_v_bs2), (__pyx_v_D34D43_min_vD33vD44[__pyx_v_i]));
              __pyx_t_1 = __Pyx_c_diff_double(__pyx_v_bs2, __Pyx_c_diff_double(__pyx_v_D44, ((__pyx_v_vz[0])[__pyx_v_i])));
              if (unlikely(__Pyx_c_is_zero_double(__pyx_t_1))) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 638, __pyx_L1_error)
              }
              __pyx_t_9 = __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_one_minus_vyvy_div_ezz, (__pyx_v_rel34m[__pyx_v_i])), __Pyx_c_quot_double(__pyx_t_10, __pyx_t_1));
              if (unlikely(__Pyx_c_is_zero_double(__pyx_t_9))) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 638, __pyx_L1_error)
              }
              (__pyx_v_phipre[2]) = __Pyx_c_quot_double(__pyx_t_2, __pyx_t_9);

              /* "Full_Matrix.pyx":639
 *                         #    print(  +one_minus_vyvy_div_ezz*rel34m[i] + (  (D33-(vz[0])[i])*bs2+ D34D43_min_vD33vD44[i] )/(bs2-(D44- (vz[0])[i] ))   )
 *                             phipre[2] = -D31/(  +one_minus_vyvy_div_ezz*rel34m[i] + (  (D33-(vz[0])[i])*bs2+ D34D43_min_vD33vD44[i] )/(bs2-(D44- (vz[0])[i] ))   )
 *                             phipre[3] = rel34[i]*phipre[2]             # <<<<<<<<<<<<<<
 *                         else:
 *                             phipre[2] = -D21_min_vzsq[i]/bs3
 */
              (__pyx_v_phipre[3]) = __Pyx_c_prod_double((__pyx_v_rel34[__pyx_v_i]), (__pyx_v_phipre[2]));

              /* "Full_Matrix.pyx":634
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 * 
 *                         if( (comp1>comp3) or (bs3==0) ):             # <<<<<<<<<<<<<<
 *                             bs2=bs1*one_minus_vyvy_div_ezz
 *                         #    print( D33-(vz[0])[i] +one_minus_vyvy_div_ezz*rel34[i] )
 */
              goto __pyx_L50;
            }

            /* "Full_Matrix.pyx":641
 *                             phipre[3] = rel34[i]*phipre[2]
 *                         else:
 *                             phipre[2] = -D21_min_vzsq[i]/bs3             # <<<<<<<<<<<<<<
 *                             phipre[3] = rel34[i]*phipre[2]
 * 
 */
            /*else*/ {
              __pyx_t_9 = __Pyx_c_neg_double((__pyx_v_D21_min_vzsq[__pyx_v_i]));
              if (unlikely(__Pyx_c_is_zero_double(__pyx_v_bs3))) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 641, __pyx_L1_error)
              }
              (__pyx_v_phipre[2]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_v_bs3);

              /* "Full_Matrix.pyx":642
 *                         else:
 *                             phipre[2] = -D21_min_vzsq[i]/bs3
 *                             phipre[3] = rel34[i]*phipre[2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
              (__pyx_v_phipre[3]) = __Pyx_c_prod_double((__pyx_v_rel34[__pyx_v_i]), (__pyx_v_phipre[2]));
            }
            __pyx_L50:;

            /* "Full_Matrix.pyx":623
 *                             phipre[3] = rel34[i]*phipre[2]
 * 
 *                     elif( comp2<comp1 ):             # <<<<<<<<<<<<<<
 * 
 *                         bs1=(MS[0]).D41/D31
 */
          }
          __pyx_L41:;
        }
        __pyx_L37:;

        /* "Full_Matrix.pyx":645
 * 
 * 
 *                 for j in range(4):             # <<<<<<<<<<<<<<
 *                     (PHI[0])[j][i]=phipre[j]
 *            # print("second evs")
 */
        for (__pyx_t_13 = 0; __pyx_t_13 < 4; __pyx_t_13+=1) {
          __pyx_v_j = __pyx_t_13;

          /* "Full_Matrix.pyx":646
 * 
 *                 for j in range(4):
 *                     (PHI[0])[j][i]=phipre[j]             # <<<<<<<<<<<<<<
 *            # print("second evs")
 * 
 */
          (((__pyx_v_PHI[0])[__pyx_v_j])[__pyx_v_i]) = (__pyx_v_phipre[__pyx_v_j]);
        }
      }

      /* "Full_Matrix.pyx":649
 *            # print("second evs")
 * 
 *             for i in range(1,4,2):             # <<<<<<<<<<<<<<
 *                 phipre[2]=1
 *                 if( (comp1==0) and (comp2==0) and (comp3==0) ):
 */
      for (__pyx_t_5 = 1; __pyx_t_5 < 4; __pyx_t_5+=2) {
        __pyx_v_i = __pyx_t_5;

        /* "Full_Matrix.pyx":650
 * 
 *             for i in range(1,4,2):
 *                 phipre[2]=1             # <<<<<<<<<<<<<<
 *                 if( (comp1==0) and (comp2==0) and (comp3==0) ):
 * 
 */
        (__pyx_v_phipre[2]) = __pyx_t_double_complex_from_parts(1, 0);

        /* "Full_Matrix.pyx":651
 *             for i in range(1,4,2):
 *                 phipre[2]=1
 *                 if( (comp1==0) and (comp2==0) and (comp3==0) ):             # <<<<<<<<<<<<<<
 * 
 *                     phipre[0] = 0
 */
        __pyx_t_4 = ((__pyx_v_comp1 == 0.0) != 0);
        if (__pyx_t_4) {
        } else {
          __pyx_t_3 = __pyx_t_4;
          goto __pyx_L58_bool_binop_done;
        }
        __pyx_t_4 = ((__pyx_v_comp2 == 0.0) != 0);
        if (__pyx_t_4) {
        } else {
          __pyx_t_3 = __pyx_t_4;
          goto __pyx_L58_bool_binop_done;
        }
        __pyx_t_4 = ((__pyx_v_comp3 == 0.0) != 0);
        __pyx_t_3 = __pyx_t_4;
        __pyx_L58_bool_binop_done:;
        if (__pyx_t_3) {

          /* "Full_Matrix.pyx":653
 *                 if( (comp1==0) and (comp2==0) and (comp3==0) ):
 * 
 *                     phipre[0] = 0             # <<<<<<<<<<<<<<
 *                     phipre[1] = 0
 *                     phipre[3] = ( (vz[0])[i] - D33 )/one_minus_vyvy_div_ezz
 */
          (__pyx_v_phipre[0]) = __pyx_t_double_complex_from_parts(0, 0);

          /* "Full_Matrix.pyx":654
 * 
 *                     phipre[0] = 0
 *                     phipre[1] = 0             # <<<<<<<<<<<<<<
 *                     phipre[3] = ( (vz[0])[i] - D33 )/one_minus_vyvy_div_ezz
 *                 else:
 */
          (__pyx_v_phipre[1]) = __pyx_t_double_complex_from_parts(0, 0);

          /* "Full_Matrix.pyx":655
 *                     phipre[0] = 0
 *                     phipre[1] = 0
 *                     phipre[3] = ( (vz[0])[i] - D33 )/one_minus_vyvy_div_ezz             # <<<<<<<<<<<<<<
 *                 else:
 *                     if( comp1<=comp2 ):
 */
          __pyx_t_9 = __Pyx_c_diff_double(((__pyx_v_vz[0])[__pyx_v_i]), __pyx_v_D33);
          if (unlikely(__Pyx_c_is_zero_double(__pyx_v_one_minus_vyvy_div_ezz))) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 655, __pyx_L1_error)
          }
          (__pyx_v_phipre[3]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_v_one_minus_vyvy_div_ezz);

          /* "Full_Matrix.pyx":651
 *             for i in range(1,4,2):
 *                 phipre[2]=1
 *                 if( (comp1==0) and (comp2==0) and (comp3==0) ):             # <<<<<<<<<<<<<<
 * 
 *                     phipre[0] = 0
 */
          goto __pyx_L57;
        }

        /* "Full_Matrix.pyx":657
 *                     phipre[3] = ( (vz[0])[i] - D33 )/one_minus_vyvy_div_ezz
 *                 else:
 *                     if( comp1<=comp2 ):             # <<<<<<<<<<<<<<
 *                         if( (comp1==0) and (comp2==0) ):
 *                             bs1=0
 */
        /*else*/ {
          __pyx_t_3 = ((__pyx_v_comp1 <= __pyx_v_comp2) != 0);
          if (__pyx_t_3) {

            /* "Full_Matrix.pyx":658
 *                 else:
 *                     if( comp1<=comp2 ):
 *                         if( (comp1==0) and (comp2==0) ):             # <<<<<<<<<<<<<<
 *                             bs1=0
 *                         else:
 */
            __pyx_t_4 = ((__pyx_v_comp1 == 0.0) != 0);
            if (__pyx_t_4) {
            } else {
              __pyx_t_3 = __pyx_t_4;
              goto __pyx_L63_bool_binop_done;
            }
            __pyx_t_4 = ((__pyx_v_comp2 == 0.0) != 0);
            __pyx_t_3 = __pyx_t_4;
            __pyx_L63_bool_binop_done:;
            if (__pyx_t_3) {

              /* "Full_Matrix.pyx":659
 *                     if( comp1<=comp2 ):
 *                         if( (comp1==0) and (comp2==0) ):
 *                             bs1=0             # <<<<<<<<<<<<<<
 *                         else:
 *                             bs1=D31/(MS[0]).D41
 */
              __pyx_v_bs1 = __pyx_t_double_complex_from_parts(0, 0);

              /* "Full_Matrix.pyx":658
 *                 else:
 *                     if( comp1<=comp2 ):
 *                         if( (comp1==0) and (comp2==0) ):             # <<<<<<<<<<<<<<
 *                             bs1=0
 *                         else:
 */
              goto __pyx_L62;
            }

            /* "Full_Matrix.pyx":661
 *                             bs1=0
 *                         else:
 *                             bs1=D31/(MS[0]).D41             # <<<<<<<<<<<<<<
 * 
 *                         denom=one_minus_vyvy_div_ezz-bs1*(D44- (vz[0])[i] )
 */
            /*else*/ {
              if (unlikely(__Pyx_c_is_zero_double((__pyx_v_MS[0]).D41))) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 661, __pyx_L1_error)
              }
              __pyx_v_bs1 = __Pyx_c_quot_double(__pyx_v_D31, (__pyx_v_MS[0]).D41);
            }
            __pyx_L62:;

            /* "Full_Matrix.pyx":663
 *                             bs1=D31/(MS[0]).D41
 * 
 *                         denom=one_minus_vyvy_div_ezz-bs1*(D44- (vz[0])[i] )             # <<<<<<<<<<<<<<
 *                         if(denom==0):
 *                             denom=cx*2.0e-16
 */
            __pyx_v_denom = __Pyx_c_diff_double(__pyx_v_one_minus_vyvy_div_ezz, __Pyx_c_prod_double(__pyx_v_bs1, __Pyx_c_diff_double(__pyx_v_D44, ((__pyx_v_vz[0])[__pyx_v_i]))));

            /* "Full_Matrix.pyx":664
 * 
 *                         denom=one_minus_vyvy_div_ezz-bs1*(D44- (vz[0])[i] )
 *                         if(denom==0):             # <<<<<<<<<<<<<<
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =( (vz[0])[i] - D33 )/denom
 */
            __pyx_t_3 = ((__Pyx_c_eq_double(__pyx_v_denom, __pyx_t_double_complex_from_parts(0, 0))) != 0);
            if (__pyx_t_3) {

              /* "Full_Matrix.pyx":665
 *                         denom=one_minus_vyvy_div_ezz-bs1*(D44- (vz[0])[i] )
 *                         if(denom==0):
 *                             denom=cx*2.0e-16             # <<<<<<<<<<<<<<
 *                         rel34u[i] =( (vz[0])[i] - D33 )/denom
 *                         rel34m[i] =bs1*(MS[0]).D43/denom
 */
              __pyx_v_denom = __Pyx_c_prod_double(__pyx_v_cx, __pyx_t_double_complex_from_parts(2.0e-16, 0));

              /* "Full_Matrix.pyx":664
 * 
 *                         denom=one_minus_vyvy_div_ezz-bs1*(D44- (vz[0])[i] )
 *                         if(denom==0):             # <<<<<<<<<<<<<<
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =( (vz[0])[i] - D33 )/denom
 */
            }

            /* "Full_Matrix.pyx":666
 *                         if(denom==0):
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =( (vz[0])[i] - D33 )/denom             # <<<<<<<<<<<<<<
 *                         rel34m[i] =bs1*(MS[0]).D43/denom
 *                         rel34[i]=rel34m[i]+rel34u[i]
 */
            __pyx_t_9 = __Pyx_c_diff_double(((__pyx_v_vz[0])[__pyx_v_i]), __pyx_v_D33);
            if (unlikely(__Pyx_c_is_zero_double(__pyx_v_denom))) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 666, __pyx_L1_error)
            }
            (__pyx_v_rel34u[__pyx_v_i]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_v_denom);

            /* "Full_Matrix.pyx":667
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =( (vz[0])[i] - D33 )/denom
 *                         rel34m[i] =bs1*(MS[0]).D43/denom             # <<<<<<<<<<<<<<
 *                         rel34[i]=rel34m[i]+rel34u[i]
 *                         phipre[3] = rel34[i]
 */
            __pyx_t_9 = __Pyx_c_prod_double(__pyx_v_bs1, (__pyx_v_MS[0]).D43);
            if (unlikely(__Pyx_c_is_zero_double(__pyx_v_denom))) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 667, __pyx_L1_error)
            }
            (__pyx_v_rel34m[__pyx_v_i]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_v_denom);

            /* "Full_Matrix.pyx":668
 *                         rel34u[i] =( (vz[0])[i] - D33 )/denom
 *                         rel34m[i] =bs1*(MS[0]).D43/denom
 *                         rel34[i]=rel34m[i]+rel34u[i]             # <<<<<<<<<<<<<<
 *                         phipre[3] = rel34[i]
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 */
            (__pyx_v_rel34[__pyx_v_i]) = __Pyx_c_sum_double((__pyx_v_rel34m[__pyx_v_i]), (__pyx_v_rel34u[__pyx_v_i]));

            /* "Full_Matrix.pyx":669
 *                         rel34m[i] =bs1*(MS[0]).D43/denom
 *                         rel34[i]=rel34m[i]+rel34u[i]
 *                         phipre[3] = rel34[i]             # <<<<<<<<<<<<<<
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 *                         if( (comp2>comp3) or (bs3==0)  ):
 */
            (__pyx_v_phipre[3]) = (__pyx_v_rel34[__pyx_v_i]);

            /* "Full_Matrix.pyx":670
 *                         rel34[i]=rel34m[i]+rel34u[i]
 *                         phipre[3] = rel34[i]
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24             # <<<<<<<<<<<<<<
 *                         if( (comp2>comp3) or (bs3==0)  ):
 *                             bs2=bs1*(D44- (vz[0])[i] )
 */
            __pyx_v_bs3 = __Pyx_c_sum_double((__pyx_v_MS[0]).D23, __Pyx_c_prod_double((__pyx_v_rel34[__pyx_v_i]), __pyx_v_D24));

            /* "Full_Matrix.pyx":671
 *                         phipre[3] = rel34[i]
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 *                         if( (comp2>comp3) or (bs3==0)  ):             # <<<<<<<<<<<<<<
 *                             bs2=bs1*(D44- (vz[0])[i] )
 *                             phipre[0] = -(  + (D44-(vz[0])[i] )*rel34m[i] +( D34D43_min_vD33vD44[i]-(MS[0]).D43*bs2 )/(one_minus_vyvy_div_ezz-bs2  ) )/(MS[0]).D41
 */
            __pyx_t_4 = ((__pyx_v_comp2 > __pyx_v_comp3) != 0);
            if (!__pyx_t_4) {
            } else {
              __pyx_t_3 = __pyx_t_4;
              goto __pyx_L67_bool_binop_done;
            }
            __pyx_t_4 = ((__Pyx_c_eq_double(__pyx_v_bs3, __pyx_t_double_complex_from_parts(0, 0))) != 0);
            __pyx_t_3 = __pyx_t_4;
            __pyx_L67_bool_binop_done:;
            if (__pyx_t_3) {

              /* "Full_Matrix.pyx":672
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 *                         if( (comp2>comp3) or (bs3==0)  ):
 *                             bs2=bs1*(D44- (vz[0])[i] )             # <<<<<<<<<<<<<<
 *                             phipre[0] = -(  + (D44-(vz[0])[i] )*rel34m[i] +( D34D43_min_vD33vD44[i]-(MS[0]).D43*bs2 )/(one_minus_vyvy_div_ezz-bs2  ) )/(MS[0]).D41
 *                             phipre[1] = (vz[0])[i]*phipre[0]
 */
              __pyx_v_bs2 = __Pyx_c_prod_double(__pyx_v_bs1, __Pyx_c_diff_double(__pyx_v_D44, ((__pyx_v_vz[0])[__pyx_v_i])));

              /* "Full_Matrix.pyx":673
 *                         if( (comp2>comp3) or (bs3==0)  ):
 *                             bs2=bs1*(D44- (vz[0])[i] )
 *                             phipre[0] = -(  + (D44-(vz[0])[i] )*rel34m[i] +( D34D43_min_vD33vD44[i]-(MS[0]).D43*bs2 )/(one_minus_vyvy_div_ezz-bs2  ) )/(MS[0]).D41             # <<<<<<<<<<<<<<
 *                             phipre[1] = (vz[0])[i]*phipre[0]
 *                         else:
 */
              __pyx_t_9 = __Pyx_c_diff_double((__pyx_v_D34D43_min_vD33vD44[__pyx_v_i]), __Pyx_c_prod_double((__pyx_v_MS[0]).D43, __pyx_v_bs2));
              __pyx_t_2 = __Pyx_c_diff_double(__pyx_v_one_minus_vyvy_div_ezz, __pyx_v_bs2);
              if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 673, __pyx_L1_error)
              }
              __pyx_t_1 = __Pyx_c_neg_double(__Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_v_D44, ((__pyx_v_vz[0])[__pyx_v_i])), (__pyx_v_rel34m[__pyx_v_i])), __Pyx_c_quot_double(__pyx_t_9, __pyx_t_2)));
              if (unlikely(__Pyx_c_is_zero_double((__pyx_v_MS[0]).D41))) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 673, __pyx_L1_error)
              }
              (__pyx_v_phipre[0]) = __Pyx_c_quot_double(__pyx_t_1, (__pyx_v_MS[0]).D41);

              /* "Full_Matrix.pyx":674
 *                             bs2=bs1*(D44- (vz[0])[i] )
 *                             phipre[0] = -(  + (D44-(vz[0])[i] )*rel34m[i] +( D34D43_min_vD33vD44[i]-(MS[0]).D43*bs2 )/(one_minus_vyvy_div_ezz-bs2  ) )/(MS[0]).D41
 *                             phipre[1] = (vz[0])[i]*phipre[0]             # <<<<<<<<<<<<<<
 *                         else:
 *                             phipre[0] = -bs3/D21_min_vzsq[i]
 */
              (__pyx_v_phipre[1]) = __Pyx_c_prod_double(((__pyx_v_vz[0])[__pyx_v_i]), (__pyx_v_phipre[0]));

              /* "Full_Matrix.pyx":671
 *                         phipre[3] = rel34[i]
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 *                         if( (comp2>comp3) or (bs3==0)  ):             # <<<<<<<<<<<<<<
 *                             bs2=bs1*(D44- (vz[0])[i] )
 *                             phipre[0] = -(  + (D44-(vz[0])[i] )*rel34m[i] +( D34D43_min_vD33vD44[i]-(MS[0]).D43*bs2 )/(one_minus_vyvy_div_ezz-bs2  ) )/(MS[0]).D41
 */
              goto __pyx_L66;
            }

            /* "Full_Matrix.pyx":676
 *                             phipre[1] = (vz[0])[i]*phipre[0]
 *                         else:
 *                             phipre[0] = -bs3/D21_min_vzsq[i]             # <<<<<<<<<<<<<<
 *                             phipre[1] = (vz[0])[i]*phipre[0]
 *                     elif( comp2<comp1 ):
 */
            /*else*/ {
              __pyx_t_1 = __Pyx_c_neg_double(__pyx_v_bs3);
              if (unlikely(__Pyx_c_is_zero_double((__pyx_v_D21_min_vzsq[__pyx_v_i])))) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 676, __pyx_L1_error)
              }
              (__pyx_v_phipre[0]) = __Pyx_c_quot_double(__pyx_t_1, (__pyx_v_D21_min_vzsq[__pyx_v_i]));

              /* "Full_Matrix.pyx":677
 *                         else:
 *                             phipre[0] = -bs3/D21_min_vzsq[i]
 *                             phipre[1] = (vz[0])[i]*phipre[0]             # <<<<<<<<<<<<<<
 *                     elif( comp2<comp1 ):
 *                         bs1=(MS[0]).D41/D31
 */
              (__pyx_v_phipre[1]) = __Pyx_c_prod_double(((__pyx_v_vz[0])[__pyx_v_i]), (__pyx_v_phipre[0]));
            }
            __pyx_L66:;

            /* "Full_Matrix.pyx":657
 *                     phipre[3] = ( (vz[0])[i] - D33 )/one_minus_vyvy_div_ezz
 *                 else:
 *                     if( comp1<=comp2 ):             # <<<<<<<<<<<<<<
 *                         if( (comp1==0) and (comp2==0) ):
 *                             bs1=0
 */
            goto __pyx_L61;
          }

          /* "Full_Matrix.pyx":678
 *                             phipre[0] = -bs3/D21_min_vzsq[i]
 *                             phipre[1] = (vz[0])[i]*phipre[0]
 *                     elif( comp2<comp1 ):             # <<<<<<<<<<<<<<
 *                         bs1=(MS[0]).D41/D31
 *                         denom=bs1*one_minus_vyvy_div_ezz-(D44- (vz[0])[i] )
 */
          __pyx_t_3 = ((__pyx_v_comp2 < __pyx_v_comp1) != 0);
          if (__pyx_t_3) {

            /* "Full_Matrix.pyx":679
 *                             phipre[1] = (vz[0])[i]*phipre[0]
 *                     elif( comp2<comp1 ):
 *                         bs1=(MS[0]).D41/D31             # <<<<<<<<<<<<<<
 *                         denom=bs1*one_minus_vyvy_div_ezz-(D44- (vz[0])[i] )
 *                         if(denom==0):
 */
            if (unlikely(__Pyx_c_is_zero_double(__pyx_v_D31))) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 679, __pyx_L1_error)
            }
            __pyx_v_bs1 = __Pyx_c_quot_double((__pyx_v_MS[0]).D41, __pyx_v_D31);

            /* "Full_Matrix.pyx":680
 *                     elif( comp2<comp1 ):
 *                         bs1=(MS[0]).D41/D31
 *                         denom=bs1*one_minus_vyvy_div_ezz-(D44- (vz[0])[i] )             # <<<<<<<<<<<<<<
 *                         if(denom==0):
 *                             denom=cx*2.0e-16
 */
            __pyx_v_denom = __Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_v_bs1, __pyx_v_one_minus_vyvy_div_ezz), __Pyx_c_diff_double(__pyx_v_D44, ((__pyx_v_vz[0])[__pyx_v_i])));

            /* "Full_Matrix.pyx":681
 *                         bs1=(MS[0]).D41/D31
 *                         denom=bs1*one_minus_vyvy_div_ezz-(D44- (vz[0])[i] )
 *                         if(denom==0):             # <<<<<<<<<<<<<<
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =(MS[0]).D43/denom
 */
            __pyx_t_3 = ((__Pyx_c_eq_double(__pyx_v_denom, __pyx_t_double_complex_from_parts(0, 0))) != 0);
            if (__pyx_t_3) {

              /* "Full_Matrix.pyx":682
 *                         denom=bs1*one_minus_vyvy_div_ezz-(D44- (vz[0])[i] )
 *                         if(denom==0):
 *                             denom=cx*2.0e-16             # <<<<<<<<<<<<<<
 *                         rel34u[i] =(MS[0]).D43/denom
 *                         rel34m[i] = bs1*( (vz[0])[i] - D33 )/denom
 */
              __pyx_v_denom = __Pyx_c_prod_double(__pyx_v_cx, __pyx_t_double_complex_from_parts(2.0e-16, 0));

              /* "Full_Matrix.pyx":681
 *                         bs1=(MS[0]).D41/D31
 *                         denom=bs1*one_minus_vyvy_div_ezz-(D44- (vz[0])[i] )
 *                         if(denom==0):             # <<<<<<<<<<<<<<
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =(MS[0]).D43/denom
 */
            }

            /* "Full_Matrix.pyx":683
 *                         if(denom==0):
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =(MS[0]).D43/denom             # <<<<<<<<<<<<<<
 *                         rel34m[i] = bs1*( (vz[0])[i] - D33 )/denom
 *                         rel34[i]=rel34m[i]+rel34u[i]
 */
            if (unlikely(__Pyx_c_is_zero_double(__pyx_v_denom))) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 683, __pyx_L1_error)
            }
            (__pyx_v_rel34u[__pyx_v_i]) = __Pyx_c_quot_double((__pyx_v_MS[0]).D43, __pyx_v_denom);

            /* "Full_Matrix.pyx":684
 *                             denom=cx*2.0e-16
 *                         rel34u[i] =(MS[0]).D43/denom
 *                         rel34m[i] = bs1*( (vz[0])[i] - D33 )/denom             # <<<<<<<<<<<<<<
 *                         rel34[i]=rel34m[i]+rel34u[i]
 *                         phipre[3] = rel34[i]
 */
            __pyx_t_1 = __Pyx_c_prod_double(__pyx_v_bs1, __Pyx_c_diff_double(((__pyx_v_vz[0])[__pyx_v_i]), __pyx_v_D33));
            if (unlikely(__Pyx_c_is_zero_double(__pyx_v_denom))) {
              PyErr_SetString(PyExc_ZeroDivisionError, "float division");
              __PYX_ERR(0, 684, __pyx_L1_error)
            }
            (__pyx_v_rel34m[__pyx_v_i]) = __Pyx_c_quot_double(__pyx_t_1, __pyx_v_denom);

            /* "Full_Matrix.pyx":685
 *                         rel34u[i] =(MS[0]).D43/denom
 *                         rel34m[i] = bs1*( (vz[0])[i] - D33 )/denom
 *                         rel34[i]=rel34m[i]+rel34u[i]             # <<<<<<<<<<<<<<
 *                         phipre[3] = rel34[i]
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 */
            (__pyx_v_rel34[__pyx_v_i]) = __Pyx_c_sum_double((__pyx_v_rel34m[__pyx_v_i]), (__pyx_v_rel34u[__pyx_v_i]));

            /* "Full_Matrix.pyx":686
 *                         rel34m[i] = bs1*( (vz[0])[i] - D33 )/denom
 *                         rel34[i]=rel34m[i]+rel34u[i]
 *                         phipre[3] = rel34[i]             # <<<<<<<<<<<<<<
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 * 
 */
            (__pyx_v_phipre[3]) = (__pyx_v_rel34[__pyx_v_i]);

            /* "Full_Matrix.pyx":687
 *                         rel34[i]=rel34m[i]+rel34u[i]
 *                         phipre[3] = rel34[i]
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24             # <<<<<<<<<<<<<<
 * 
 *                         if( (comp1>comp3) or (bs3==0) ):
 */
            __pyx_v_bs3 = __Pyx_c_sum_double((__pyx_v_MS[0]).D23, __Pyx_c_prod_double((__pyx_v_rel34[__pyx_v_i]), __pyx_v_D24));

            /* "Full_Matrix.pyx":689
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 * 
 *                         if( (comp1>comp3) or (bs3==0) ):             # <<<<<<<<<<<<<<
 *                             bs2=bs1*one_minus_vyvy_div_ezz
 *                         #    print( D33-(vz[0])[i] +one_minus_vyvy_div_ezz*rel34[i] )
 */
            __pyx_t_4 = ((__pyx_v_comp1 > __pyx_v_comp3) != 0);
            if (!__pyx_t_4) {
            } else {
              __pyx_t_3 = __pyx_t_4;
              goto __pyx_L71_bool_binop_done;
            }
            __pyx_t_4 = ((__Pyx_c_eq_double(__pyx_v_bs3, __pyx_t_double_complex_from_parts(0, 0))) != 0);
            __pyx_t_3 = __pyx_t_4;
            __pyx_L71_bool_binop_done:;
            if (__pyx_t_3) {

              /* "Full_Matrix.pyx":690
 * 
 *                         if( (comp1>comp3) or (bs3==0) ):
 *                             bs2=bs1*one_minus_vyvy_div_ezz             # <<<<<<<<<<<<<<
 *                         #    print( D33-(vz[0])[i] +one_minus_vyvy_div_ezz*rel34[i] )
 *                         #    print(  +one_minus_vyvy_div_ezz*rel34m[i] + (  (D33-(vz[0])[i])*bs2+ D34D43_min_vD33vD44[i] )/(bs2-(D44- (vz[0])[i] ))   )
 */
              __pyx_v_bs2 = __Pyx_c_prod_double(__pyx_v_bs1, __pyx_v_one_minus_vyvy_div_ezz);

              /* "Full_Matrix.pyx":693
 *                         #    print( D33-(vz[0])[i] +one_minus_vyvy_div_ezz*rel34[i] )
 *                         #    print(  +one_minus_vyvy_div_ezz*rel34m[i] + (  (D33-(vz[0])[i])*bs2+ D34D43_min_vD33vD44[i] )/(bs2-(D44- (vz[0])[i] ))   )
 *                             phipre[0] = -(  +one_minus_vyvy_div_ezz*rel34m[i] + (  (D33-(vz[0])[i])*bs2+ D34D43_min_vD33vD44[i] )/(bs2-(D44- (vz[0])[i] ))   )/D31             # <<<<<<<<<<<<<<
 *                             phipre[1] = (vz[0])[i]*phipre[0]
 *                         else:
 */
              __pyx_t_1 = __Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_v_D33, ((__pyx_v_vz[0])[__pyx_v_i])), __pyx_v_bs2), (__pyx_v_D34D43_min_vD33vD44[__pyx_v_i]));
              __pyx_t_2 = __Pyx_c_diff_double(__pyx_v_bs2, __Pyx_c_diff_double(__pyx_v_D44, ((__pyx_v_vz[0])[__pyx_v_i])));
              if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 693, __pyx_L1_error)
              }
              __pyx_t_9 = __Pyx_c_neg_double(__Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_one_minus_vyvy_div_ezz, (__pyx_v_rel34m[__pyx_v_i])), __Pyx_c_quot_double(__pyx_t_1, __pyx_t_2)));
              if (unlikely(__Pyx_c_is_zero_double(__pyx_v_D31))) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 693, __pyx_L1_error)
              }
              (__pyx_v_phipre[0]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_v_D31);

              /* "Full_Matrix.pyx":694
 *                         #    print(  +one_minus_vyvy_div_ezz*rel34m[i] + (  (D33-(vz[0])[i])*bs2+ D34D43_min_vD33vD44[i] )/(bs2-(D44- (vz[0])[i] ))   )
 *                             phipre[0] = -(  +one_minus_vyvy_div_ezz*rel34m[i] + (  (D33-(vz[0])[i])*bs2+ D34D43_min_vD33vD44[i] )/(bs2-(D44- (vz[0])[i] ))   )/D31
 *                             phipre[1] = (vz[0])[i]*phipre[0]             # <<<<<<<<<<<<<<
 *                         else:
 *                             phipre[0] = -bs3/D21_min_vzsq[i]
 */
              (__pyx_v_phipre[1]) = __Pyx_c_prod_double(((__pyx_v_vz[0])[__pyx_v_i]), (__pyx_v_phipre[0]));

              /* "Full_Matrix.pyx":689
 *                         bs3 = (MS[0]).D23 + rel34[i]*D24
 * 
 *                         if( (comp1>comp3) or (bs3==0) ):             # <<<<<<<<<<<<<<
 *                             bs2=bs1*one_minus_vyvy_div_ezz
 *                         #    print( D33-(vz[0])[i] +one_minus_vyvy_div_ezz*rel34[i] )
 */
              goto __pyx_L70;
            }

            /* "Full_Matrix.pyx":696
 *                             phipre[1] = (vz[0])[i]*phipre[0]
 *                         else:
 *                             phipre[0] = -bs3/D21_min_vzsq[i]             # <<<<<<<<<<<<<<
 *                             phipre[1] = (vz[0])[i]*phipre[0]
 *                 for j in range(4):
 */
            /*else*/ {
              __pyx_t_9 = __Pyx_c_neg_double(__pyx_v_bs3);
              if (unlikely(__Pyx_c_is_zero_double((__pyx_v_D21_min_vzsq[__pyx_v_i])))) {
                PyErr_SetString(PyExc_ZeroDivisionError, "float division");
                __PYX_ERR(0, 696, __pyx_L1_error)
              }
              (__pyx_v_phipre[0]) = __Pyx_c_quot_double(__pyx_t_9, (__pyx_v_D21_min_vzsq[__pyx_v_i]));

              /* "Full_Matrix.pyx":697
 *                         else:
 *                             phipre[0] = -bs3/D21_min_vzsq[i]
 *                             phipre[1] = (vz[0])[i]*phipre[0]             # <<<<<<<<<<<<<<
 *                 for j in range(4):
 *                     (PHI[0])[j][i]=phipre[j]
 */
              (__pyx_v_phipre[1]) = __Pyx_c_prod_double(((__pyx_v_vz[0])[__pyx_v_i]), (__pyx_v_phipre[0]));
            }
            __pyx_L70:;

            /* "Full_Matrix.pyx":678
 *                             phipre[0] = -bs3/D21_min_vzsq[i]
 *                             phipre[1] = (vz[0])[i]*phipre[0]
 *                     elif( comp2<comp1 ):             # <<<<<<<<<<<<<<
 *                         bs1=(MS[0]).D41/D31
 *                         denom=bs1*one_minus_vyvy_div_ezz-(D44- (vz[0])[i] )
 */
          }
          __pyx_L61:;
        }
        __pyx_L57:;

        /* "Full_Matrix.pyx":698
 *                             phipre[0] = -bs3/D21_min_vzsq[i]
 *                             phipre[1] = (vz[0])[i]*phipre[0]
 *                 for j in range(4):             # <<<<<<<<<<<<<<
 *                     (PHI[0])[j][i]=phipre[j]
 * 
 */
        for (__pyx_t_13 = 0; __pyx_t_13 < 4; __pyx_t_13+=1) {
          __pyx_v_j = __pyx_t_13;

          /* "Full_Matrix.pyx":699
 *                             phipre[1] = (vz[0])[i]*phipre[0]
 *                 for j in range(4):
 *                     (PHI[0])[j][i]=phipre[j]             # <<<<<<<<<<<<<<
 * 
 *             NormalizePHI(PHI)
 */
          (((__pyx_v_PHI[0])[__pyx_v_j])[__pyx_v_i]) = (__pyx_v_phipre[__pyx_v_j]);
        }
      }

      /* "Full_Matrix.pyx":701
 *                     (PHI[0])[j][i]=phipre[j]
 * 
 *             NormalizePHI(PHI)             # <<<<<<<<<<<<<<
 * 
 *             Matrix4Invert(PHI, PSI)
 */
      __pyx_f_11Full_Matrix_NormalizePHI(__pyx_v_PHI);

      /* "Full_Matrix.pyx":703
 *             NormalizePHI(PHI)
 * 
 *             Matrix4Invert(PHI, PSI)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Matrix4Invert(__pyx_v_PHI, __pyx_v_PSI);
    }
    __pyx_L10:;

    /* "Full_Matrix.pyx":231
 *     cdef double complex mag_vs_xld
 * 
 *     if( L.type==4 ):             # <<<<<<<<<<<<<<
 *         eyzzy_div_ezz = (MS[0]).eyzzy*(MS[0]).inverseezz
 * 
 */
    break;
    case 3:

    /* "Full_Matrix.pyx":796
 *        # print("Moke x")
 *        # print("MOKE", L.magdir)
 *         if( L.magdir==1 ):             # <<<<<<<<<<<<<<
 *           #  print("hallo")
 *             (vz[0])[0]=CalculateVZsigma(vyvy, cx)
 */
    __pyx_t_3 = ((__pyx_v_L.magdir == 1) != 0);
    if (__pyx_t_3) {

      /* "Full_Matrix.pyx":798
 *         if( L.magdir==1 ):
 *           #  print("hallo")
 *             (vz[0])[0]=CalculateVZsigma(vyvy, cx)             # <<<<<<<<<<<<<<
 *             (vz[0])[1]=CalculateVZpi_m(vyvy, cy, cz, cg)
 *             (vz[0])[2]=-(vz[0])[0]
 */
      ((__pyx_v_vz[0])[0]) = __pyx_f_18Reflectivity_Sigma_CalculateVZsigma(__pyx_v_vyvy, __pyx_v_cx);

      /* "Full_Matrix.pyx":799
 *           #  print("hallo")
 *             (vz[0])[0]=CalculateVZsigma(vyvy, cx)
 *             (vz[0])[1]=CalculateVZpi_m(vyvy, cy, cz, cg)             # <<<<<<<<<<<<<<
 *             (vz[0])[2]=-(vz[0])[0]
 *             (vz[0])[3]=-(vz[0])[1]
 */
      ((__pyx_v_vz[0])[1]) = __pyx_f_16MOKE_transversal_CalculateVZpi_m(__pyx_v_vyvy, __pyx_v_cy, __pyx_v_cz, __pyx_v_cg);

      /* "Full_Matrix.pyx":800
 *             (vz[0])[0]=CalculateVZsigma(vyvy, cx)
 *             (vz[0])[1]=CalculateVZpi_m(vyvy, cy, cz, cg)
 *             (vz[0])[2]=-(vz[0])[0]             # <<<<<<<<<<<<<<
 *             (vz[0])[3]=-(vz[0])[1]
 *             a = 1./(1.+cz)
 */
      ((__pyx_v_vz[0])[2]) = __Pyx_c_neg_double(((__pyx_v_vz[0])[0]));

      /* "Full_Matrix.pyx":801
 *             (vz[0])[1]=CalculateVZpi_m(vyvy, cy, cz, cg)
 *             (vz[0])[2]=-(vz[0])[0]
 *             (vz[0])[3]=-(vz[0])[1]             # <<<<<<<<<<<<<<
 *             a = 1./(1.+cz)
 *             b=( (vz[0])[1]-vy*cg*a )
 */
      ((__pyx_v_vz[0])[3]) = __Pyx_c_neg_double(((__pyx_v_vz[0])[1]));

      /* "Full_Matrix.pyx":802
 *             (vz[0])[2]=-(vz[0])[0]
 *             (vz[0])[3]=-(vz[0])[1]
 *             a = 1./(1.+cz)             # <<<<<<<<<<<<<<
 *             b=( (vz[0])[1]-vy*cg*a )
 *             c=1.0/(1.-vyvy*a )
 */
      __pyx_t_9 = __pyx_t_double_complex_from_parts(1., 0);
      __pyx_t_2 = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_cz);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 802, __pyx_L1_error)
      }
      __pyx_v_a = __Pyx_c_quot_double(__pyx_t_9, __pyx_t_2);

      /* "Full_Matrix.pyx":803
 *             (vz[0])[3]=-(vz[0])[1]
 *             a = 1./(1.+cz)
 *             b=( (vz[0])[1]-vy*cg*a )             # <<<<<<<<<<<<<<
 *             c=1.0/(1.-vyvy*a )
 *             d=( (vz[0])[3]-vy*cg*a )
 */
      __pyx_v_b = __Pyx_c_diff_double(((__pyx_v_vz[0])[1]), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vy, 0), __pyx_v_cg), __pyx_v_a));

      /* "Full_Matrix.pyx":804
 *             a = 1./(1.+cz)
 *             b=( (vz[0])[1]-vy*cg*a )
 *             c=1.0/(1.-vyvy*a )             # <<<<<<<<<<<<<<
 *             d=( (vz[0])[3]-vy*cg*a )
 *             S=2*(vz[0])[3]
 */
      __pyx_t_2 = __pyx_t_double_complex_from_parts(1.0, 0);
      __pyx_t_9 = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1., 0), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0), __pyx_v_a));
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_9))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 804, __pyx_L1_error)
      }
      __pyx_v_c = __Pyx_c_quot_double(__pyx_t_2, __pyx_t_9);

      /* "Full_Matrix.pyx":805
 *             b=( (vz[0])[1]-vy*cg*a )
 *             c=1.0/(1.-vyvy*a )
 *             d=( (vz[0])[3]-vy*cg*a )             # <<<<<<<<<<<<<<
 *             S=2*(vz[0])[3]
 *             (PHI[0])[0][0]=1
 */
      __pyx_v_d = __Pyx_c_diff_double(((__pyx_v_vz[0])[3]), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vy, 0), __pyx_v_cg), __pyx_v_a));

      /* "Full_Matrix.pyx":806
 *             c=1.0/(1.-vyvy*a )
 *             d=( (vz[0])[3]-vy*cg*a )
 *             S=2*(vz[0])[3]             # <<<<<<<<<<<<<<
 *             (PHI[0])[0][0]=1
 *             (PHI[0])[1][0]=(vz[0])[0]
 */
      __pyx_v_S = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), ((__pyx_v_vz[0])[3]));

      /* "Full_Matrix.pyx":807
 *             d=( (vz[0])[3]-vy*cg*a )
 *             S=2*(vz[0])[3]
 *             (PHI[0])[0][0]=1             # <<<<<<<<<<<<<<
 *             (PHI[0])[1][0]=(vz[0])[0]
 *             (PHI[0])[2][0]=0
 */
      (((__pyx_v_PHI[0])[0])[0]) = __pyx_t_double_complex_from_parts(1, 0);

      /* "Full_Matrix.pyx":808
 *             S=2*(vz[0])[3]
 *             (PHI[0])[0][0]=1
 *             (PHI[0])[1][0]=(vz[0])[0]             # <<<<<<<<<<<<<<
 *             (PHI[0])[2][0]=0
 *             (PHI[0])[3][0]=0
 */
      (((__pyx_v_PHI[0])[1])[0]) = ((__pyx_v_vz[0])[0]);

      /* "Full_Matrix.pyx":809
 *             (PHI[0])[0][0]=1
 *             (PHI[0])[1][0]=(vz[0])[0]
 *             (PHI[0])[2][0]=0             # <<<<<<<<<<<<<<
 *             (PHI[0])[3][0]=0
 * 
 */
      (((__pyx_v_PHI[0])[2])[0]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":810
 *             (PHI[0])[1][0]=(vz[0])[0]
 *             (PHI[0])[2][0]=0
 *             (PHI[0])[3][0]=0             # <<<<<<<<<<<<<<
 * 
 *             (PHI[0])[0][1]=0
 */
      (((__pyx_v_PHI[0])[3])[0]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":812
 *             (PHI[0])[3][0]=0
 * 
 *             (PHI[0])[0][1]=0             # <<<<<<<<<<<<<<
 *             (PHI[0])[1][1]=0
 *             (PHI[0])[2][1]=1
 */
      (((__pyx_v_PHI[0])[0])[1]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":813
 * 
 *             (PHI[0])[0][1]=0
 *             (PHI[0])[1][1]=0             # <<<<<<<<<<<<<<
 *             (PHI[0])[2][1]=1
 *             (PHI[0])[3][1]=b*c
 */
      (((__pyx_v_PHI[0])[1])[1]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":814
 *             (PHI[0])[0][1]=0
 *             (PHI[0])[1][1]=0
 *             (PHI[0])[2][1]=1             # <<<<<<<<<<<<<<
 *             (PHI[0])[3][1]=b*c
 * 
 */
      (((__pyx_v_PHI[0])[2])[1]) = __pyx_t_double_complex_from_parts(1, 0);

      /* "Full_Matrix.pyx":815
 *             (PHI[0])[1][1]=0
 *             (PHI[0])[2][1]=1
 *             (PHI[0])[3][1]=b*c             # <<<<<<<<<<<<<<
 * 
 *             (PHI[0])[0][2]=1
 */
      (((__pyx_v_PHI[0])[3])[1]) = __Pyx_c_prod_double(__pyx_v_b, __pyx_v_c);

      /* "Full_Matrix.pyx":817
 *             (PHI[0])[3][1]=b*c
 * 
 *             (PHI[0])[0][2]=1             # <<<<<<<<<<<<<<
 *             (PHI[0])[1][2]=(vz[0])[2]
 *             (PHI[0])[2][2]=0
 */
      (((__pyx_v_PHI[0])[0])[2]) = __pyx_t_double_complex_from_parts(1, 0);

      /* "Full_Matrix.pyx":818
 * 
 *             (PHI[0])[0][2]=1
 *             (PHI[0])[1][2]=(vz[0])[2]             # <<<<<<<<<<<<<<
 *             (PHI[0])[2][2]=0
 *             (PHI[0])[3][2]=0
 */
      (((__pyx_v_PHI[0])[1])[2]) = ((__pyx_v_vz[0])[2]);

      /* "Full_Matrix.pyx":819
 *             (PHI[0])[0][2]=1
 *             (PHI[0])[1][2]=(vz[0])[2]
 *             (PHI[0])[2][2]=0             # <<<<<<<<<<<<<<
 *             (PHI[0])[3][2]=0
 * 
 */
      (((__pyx_v_PHI[0])[2])[2]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":820
 *             (PHI[0])[1][2]=(vz[0])[2]
 *             (PHI[0])[2][2]=0
 *             (PHI[0])[3][2]=0             # <<<<<<<<<<<<<<
 * 
 *             (PHI[0])[0][3]=0
 */
      (((__pyx_v_PHI[0])[3])[2]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":822
 *             (PHI[0])[3][2]=0
 * 
 *             (PHI[0])[0][3]=0             # <<<<<<<<<<<<<<
 *             (PHI[0])[1][3]=0
 *             (PHI[0])[2][3]=1
 */
      (((__pyx_v_PHI[0])[0])[3]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":823
 * 
 *             (PHI[0])[0][3]=0
 *             (PHI[0])[1][3]=0             # <<<<<<<<<<<<<<
 *             (PHI[0])[2][3]=1
 *             (PHI[0])[3][3]=d*c
 */
      (((__pyx_v_PHI[0])[1])[3]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":824
 *             (PHI[0])[0][3]=0
 *             (PHI[0])[1][3]=0
 *             (PHI[0])[2][3]=1             # <<<<<<<<<<<<<<
 *             (PHI[0])[3][3]=d*c
 * 
 */
      (((__pyx_v_PHI[0])[2])[3]) = __pyx_t_double_complex_from_parts(1, 0);

      /* "Full_Matrix.pyx":825
 *             (PHI[0])[1][3]=0
 *             (PHI[0])[2][3]=1
 *             (PHI[0])[3][3]=d*c             # <<<<<<<<<<<<<<
 * 
 *             (PSI[0])[0][0]=0.5
 */
      (((__pyx_v_PHI[0])[3])[3]) = __Pyx_c_prod_double(__pyx_v_d, __pyx_v_c);

      /* "Full_Matrix.pyx":827
 *             (PHI[0])[3][3]=d*c
 * 
 *             (PSI[0])[0][0]=0.5             # <<<<<<<<<<<<<<
 *             (PSI[0])[0][1]=0.5/(vz[0])[0]
 *             (PSI[0])[0][2]=0
 */
      (((__pyx_v_PSI[0])[0])[0]) = __pyx_t_double_complex_from_parts(0.5, 0);

      /* "Full_Matrix.pyx":828
 * 
 *             (PSI[0])[0][0]=0.5
 *             (PSI[0])[0][1]=0.5/(vz[0])[0]             # <<<<<<<<<<<<<<
 *             (PSI[0])[0][2]=0
 *             (PSI[0])[0][3]=0
 */
      __pyx_t_9 = __pyx_t_double_complex_from_parts(0.5, 0);
      if (unlikely(__Pyx_c_is_zero_double(((__pyx_v_vz[0])[0])))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 828, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[0])[1]) = __Pyx_c_quot_double(__pyx_t_9, ((__pyx_v_vz[0])[0]));

      /* "Full_Matrix.pyx":829
 *             (PSI[0])[0][0]=0.5
 *             (PSI[0])[0][1]=0.5/(vz[0])[0]
 *             (PSI[0])[0][2]=0             # <<<<<<<<<<<<<<
 *             (PSI[0])[0][3]=0
 * 
 */
      (((__pyx_v_PSI[0])[0])[2]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":830
 *             (PSI[0])[0][1]=0.5/(vz[0])[0]
 *             (PSI[0])[0][2]=0
 *             (PSI[0])[0][3]=0             # <<<<<<<<<<<<<<
 * 
 *             (PSI[0])[1][0]=0
 */
      (((__pyx_v_PSI[0])[0])[3]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":832
 *             (PSI[0])[0][3]=0
 * 
 *             (PSI[0])[1][0]=0             # <<<<<<<<<<<<<<
 *             (PSI[0])[1][1]=0
 *             (PSI[0])[1][2]=d/S
 */
      (((__pyx_v_PSI[0])[1])[0]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":833
 * 
 *             (PSI[0])[1][0]=0
 *             (PSI[0])[1][1]=0             # <<<<<<<<<<<<<<
 *             (PSI[0])[1][2]=d/S
 *             (PSI[0])[1][3]=-1/(  c*S  )
 */
      (((__pyx_v_PSI[0])[1])[1]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":834
 *             (PSI[0])[1][0]=0
 *             (PSI[0])[1][1]=0
 *             (PSI[0])[1][2]=d/S             # <<<<<<<<<<<<<<
 *             (PSI[0])[1][3]=-1/(  c*S  )
 * 
 */
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_S))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 834, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[1])[2]) = __Pyx_c_quot_double(__pyx_v_d, __pyx_v_S);

      /* "Full_Matrix.pyx":835
 *             (PSI[0])[1][1]=0
 *             (PSI[0])[1][2]=d/S
 *             (PSI[0])[1][3]=-1/(  c*S  )             # <<<<<<<<<<<<<<
 * 
 *             (PSI[0])[2][0]=0.5
 */
      __pyx_t_9 = __pyx_t_double_complex_from_parts(-1L, 0);
      __pyx_t_2 = __Pyx_c_prod_double(__pyx_v_c, __pyx_v_S);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 835, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[1])[3]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_t_2);

      /* "Full_Matrix.pyx":837
 *             (PSI[0])[1][3]=-1/(  c*S  )
 * 
 *             (PSI[0])[2][0]=0.5             # <<<<<<<<<<<<<<
 *             (PSI[0])[2][1]=-(PSI[0])[0][1]
 *             (PSI[0])[2][2]=0
 */
      (((__pyx_v_PSI[0])[2])[0]) = __pyx_t_double_complex_from_parts(0.5, 0);

      /* "Full_Matrix.pyx":838
 * 
 *             (PSI[0])[2][0]=0.5
 *             (PSI[0])[2][1]=-(PSI[0])[0][1]             # <<<<<<<<<<<<<<
 *             (PSI[0])[2][2]=0
 *             (PSI[0])[2][3]=0
 */
      (((__pyx_v_PSI[0])[2])[1]) = __Pyx_c_neg_double((((__pyx_v_PSI[0])[0])[1]));

      /* "Full_Matrix.pyx":839
 *             (PSI[0])[2][0]=0.5
 *             (PSI[0])[2][1]=-(PSI[0])[0][1]
 *             (PSI[0])[2][2]=0             # <<<<<<<<<<<<<<
 *             (PSI[0])[2][3]=0
 * 
 */
      (((__pyx_v_PSI[0])[2])[2]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":840
 *             (PSI[0])[2][1]=-(PSI[0])[0][1]
 *             (PSI[0])[2][2]=0
 *             (PSI[0])[2][3]=0             # <<<<<<<<<<<<<<
 * 
 *             (PSI[0])[3][0]=0
 */
      (((__pyx_v_PSI[0])[2])[3]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":842
 *             (PSI[0])[2][3]=0
 * 
 *             (PSI[0])[3][0]=0             # <<<<<<<<<<<<<<
 *             (PSI[0])[3][1]=0
 *             (PSI[0])[3][2]=-b/S
 */
      (((__pyx_v_PSI[0])[3])[0]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":843
 * 
 *             (PSI[0])[3][0]=0
 *             (PSI[0])[3][1]=0             # <<<<<<<<<<<<<<
 *             (PSI[0])[3][2]=-b/S
 *             (PSI[0])[3][3]=-(PSI[0])[1][3]
 */
      (((__pyx_v_PSI[0])[3])[1]) = __pyx_t_double_complex_from_parts(0, 0);

      /* "Full_Matrix.pyx":844
 *             (PSI[0])[3][0]=0
 *             (PSI[0])[3][1]=0
 *             (PSI[0])[3][2]=-b/S             # <<<<<<<<<<<<<<
 *             (PSI[0])[3][3]=-(PSI[0])[1][3]
 * 
 */
      __pyx_t_2 = __Pyx_c_neg_double(__pyx_v_b);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_S))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 844, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[3])[2]) = __Pyx_c_quot_double(__pyx_t_2, __pyx_v_S);

      /* "Full_Matrix.pyx":845
 *             (PSI[0])[3][1]=0
 *             (PSI[0])[3][2]=-b/S
 *             (PSI[0])[3][3]=-(PSI[0])[1][3]             # <<<<<<<<<<<<<<
 * 
 * #            i=0
 */
      (((__pyx_v_PSI[0])[3])[3]) = __Pyx_c_neg_double((((__pyx_v_PSI[0])[1])[3]));

      /* "Full_Matrix.pyx":796
 *        # print("Moke x")
 *        # print("MOKE", L.magdir)
 *         if( L.magdir==1 ):             # <<<<<<<<<<<<<<
 *           #  print("hallo")
 *             (vz[0])[0]=CalculateVZsigma(vyvy, cx)
 */
    }

    /* "Full_Matrix.pyx":880
 *             #####
 * 
 *         if( L.magdir==2 ):             # <<<<<<<<<<<<<<
 *          #   print("Moke y")
 * 
 */
    __pyx_t_3 = ((__pyx_v_L.magdir == 2) != 0);
    if (__pyx_t_3) {

      /* "Full_Matrix.pyx":884
 * 
 * 
 *             a=1.0/(1.+cz)             # <<<<<<<<<<<<<<
 *             xld= (cx-cy) + vyvy*(cy-cz)*a
 *             c = cquadr( xld )
 */
      __pyx_t_2 = __pyx_t_double_complex_from_parts(1.0, 0);
      __pyx_t_9 = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_cz);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_9))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 884, __pyx_L1_error)
      }
      __pyx_v_a = __Pyx_c_quot_double(__pyx_t_2, __pyx_t_9);

      /* "Full_Matrix.pyx":885
 * 
 *             a=1.0/(1.+cz)
 *             xld= (cx-cy) + vyvy*(cy-cz)*a             # <<<<<<<<<<<<<<
 *             c = cquadr( xld )
 *             du=cx+cy+cx*cy
 */
      __pyx_v_xld = __Pyx_c_sum_double(__Pyx_c_diff_double(__pyx_v_cx, __pyx_v_cy), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0), __Pyx_c_diff_double(__pyx_v_cy, __pyx_v_cz)), __pyx_v_a));

      /* "Full_Matrix.pyx":886
 *             a=1.0/(1.+cz)
 *             xld= (cx-cy) + vyvy*(cy-cz)*a
 *             c = cquadr( xld )             # <<<<<<<<<<<<<<
 *             du=cx+cy+cx*cy
 *             dm=1.0+a
 */
      __pyx_v_c = __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_v_xld);

      /* "Full_Matrix.pyx":887
 *             xld= (cx-cy) + vyvy*(cy-cz)*a
 *             c = cquadr( xld )
 *             du=cx+cy+cx*cy             # <<<<<<<<<<<<<<
 *             dm=1.0+a
 *             p=-vy*cg*a
 */
      __pyx_v_du = __Pyx_c_sum_double(__Pyx_c_sum_double(__pyx_v_cx, __pyx_v_cy), __Pyx_c_prod_double(__pyx_v_cx, __pyx_v_cy));

      /* "Full_Matrix.pyx":888
 *             c = cquadr( xld )
 *             du=cx+cy+cx*cy
 *             dm=1.0+a             # <<<<<<<<<<<<<<
 *             p=-vy*cg*a
 *             bm=-cg*cg*a
 */
      __pyx_v_dm = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1.0, 0), __pyx_v_a);

      /* "Full_Matrix.pyx":889
 *             du=cx+cy+cx*cy
 *             dm=1.0+a
 *             p=-vy*cg*a             # <<<<<<<<<<<<<<
 *             bm=-cg*cg*a
 *             bu=-cy-cx+vyvy*cy*a
 */
      __pyx_v_p = __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts((-__pyx_v_vy), 0), __pyx_v_cg), __pyx_v_a);

      /* "Full_Matrix.pyx":890
 *             dm=1.0+a
 *             p=-vy*cg*a
 *             bm=-cg*cg*a             # <<<<<<<<<<<<<<
 *             bu=-cy-cx+vyvy*cy*a
 *             Delta0=bm+bu
 */
      __pyx_v_bm = __Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_cg), __pyx_v_cg), __pyx_v_a);

      /* "Full_Matrix.pyx":891
 *             p=-vy*cg*a
 *             bm=-cg*cg*a
 *             bu=-cy-cx+vyvy*cy*a             # <<<<<<<<<<<<<<
 *             Delta0=bm+bu
 *             Delta1=-2.0+vyvy*dm
 */
      __pyx_v_bu = __Pyx_c_sum_double(__Pyx_c_diff_double(__Pyx_c_neg_double(__pyx_v_cy), __pyx_v_cx), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0), __pyx_v_cy), __pyx_v_a));

      /* "Full_Matrix.pyx":892
 *             bm=-cg*cg*a
 *             bu=-cy-cx+vyvy*cy*a
 *             Delta0=bm+bu             # <<<<<<<<<<<<<<
 *             Delta1=-2.0+vyvy*dm
 *             Q=bm*(2.*bu + bm + 2.0*(  vyvy*dm + 2*cy   ) )
 */
      __pyx_v_Delta0 = __Pyx_c_sum_double(__pyx_v_bm, __pyx_v_bu);

      /* "Full_Matrix.pyx":893
 *             bu=-cy-cx+vyvy*cy*a
 *             Delta0=bm+bu
 *             Delta1=-2.0+vyvy*dm             # <<<<<<<<<<<<<<
 *             Q=bm*(2.*bu + bm + 2.0*(  vyvy*dm + 2*cy   ) )
 *             root=sqrt( Q + c )
 */
      __pyx_v_Delta1 = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(-2.0, 0), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0), __pyx_v_dm));

      /* "Full_Matrix.pyx":894
 *             Delta0=bm+bu
 *             Delta1=-2.0+vyvy*dm
 *             Q=bm*(2.*bu + bm + 2.0*(  vyvy*dm + 2*cy   ) )             # <<<<<<<<<<<<<<
 *             root=sqrt( Q + c )
 *             b=Delta0+Delta1
 */
      __pyx_v_Q = __Pyx_c_prod_double(__pyx_v_bm, __Pyx_c_sum_double(__Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2., 0), __pyx_v_bu), __pyx_v_bm), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2.0, 0), __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0), __pyx_v_dm), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_cy)))));

      /* "Full_Matrix.pyx":895
 *             Delta1=-2.0+vyvy*dm
 *             Q=bm*(2.*bu + bm + 2.0*(  vyvy*dm + 2*cy   ) )
 *             root=sqrt( Q + c )             # <<<<<<<<<<<<<<
 *             b=Delta0+Delta1
 *             (vz[0])[0]=sqrt((-b-root)/2)
 */
      __pyx_v_root = sqrt(__Pyx_c_sum_double(__pyx_v_Q, __pyx_v_c));

      /* "Full_Matrix.pyx":896
 *             Q=bm*(2.*bu + bm + 2.0*(  vyvy*dm + 2*cy   ) )
 *             root=sqrt( Q + c )
 *             b=Delta0+Delta1             # <<<<<<<<<<<<<<
 *             (vz[0])[0]=sqrt((-b-root)/2)
 *             (vz[0])[1]=sqrt((-b+root)/2)
 */
      __pyx_v_b = __Pyx_c_sum_double(__pyx_v_Delta0, __pyx_v_Delta1);

      /* "Full_Matrix.pyx":897
 *             root=sqrt( Q + c )
 *             b=Delta0+Delta1
 *             (vz[0])[0]=sqrt((-b-root)/2)             # <<<<<<<<<<<<<<
 *             (vz[0])[1]=sqrt((-b+root)/2)
 *             (vz[0])[2]=-(vz[0])[0]
 */
      __pyx_t_9 = __Pyx_c_diff_double(__Pyx_c_neg_double(__pyx_v_b), __pyx_v_root);
      __pyx_t_2 = __pyx_t_double_complex_from_parts(2, 0);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 897, __pyx_L1_error)
      }
      ((__pyx_v_vz[0])[0]) = sqrt(__Pyx_c_quot_double(__pyx_t_9, __pyx_t_2));

      /* "Full_Matrix.pyx":898
 *             b=Delta0+Delta1
 *             (vz[0])[0]=sqrt((-b-root)/2)
 *             (vz[0])[1]=sqrt((-b+root)/2)             # <<<<<<<<<<<<<<
 *             (vz[0])[2]=-(vz[0])[0]
 *             (vz[0])[3]=-(vz[0])[1]
 */
      __pyx_t_2 = __Pyx_c_sum_double(__Pyx_c_neg_double(__pyx_v_b), __pyx_v_root);
      __pyx_t_9 = __pyx_t_double_complex_from_parts(2, 0);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_9))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 898, __pyx_L1_error)
      }
      ((__pyx_v_vz[0])[1]) = sqrt(__Pyx_c_quot_double(__pyx_t_2, __pyx_t_9));

      /* "Full_Matrix.pyx":899
 *             (vz[0])[0]=sqrt((-b-root)/2)
 *             (vz[0])[1]=sqrt((-b+root)/2)
 *             (vz[0])[2]=-(vz[0])[0]             # <<<<<<<<<<<<<<
 *             (vz[0])[3]=-(vz[0])[1]
 *             bs1 = xld-root
 */
      ((__pyx_v_vz[0])[2]) = __Pyx_c_neg_double(((__pyx_v_vz[0])[0]));

      /* "Full_Matrix.pyx":900
 *             (vz[0])[1]=sqrt((-b+root)/2)
 *             (vz[0])[2]=-(vz[0])[0]
 *             (vz[0])[3]=-(vz[0])[1]             # <<<<<<<<<<<<<<
 *             bs1 = xld-root
 *             bs2 = xld+root
 */
      ((__pyx_v_vz[0])[3]) = __Pyx_c_neg_double(((__pyx_v_vz[0])[1]));

      /* "Full_Matrix.pyx":901
 *             (vz[0])[2]=-(vz[0])[0]
 *             (vz[0])[3]=-(vz[0])[1]
 *             bs1 = xld-root             # <<<<<<<<<<<<<<
 *             bs2 = xld+root
 * 
 */
      __pyx_v_bs1 = __Pyx_c_diff_double(__pyx_v_xld, __pyx_v_root);

      /* "Full_Matrix.pyx":902
 *             (vz[0])[3]=-(vz[0])[1]
 *             bs1 = xld-root
 *             bs2 = xld+root             # <<<<<<<<<<<<<<
 * 
 *             if( Cmaxnorm(bs1) < Cmaxnorm( bs2 ) ):
 */
      __pyx_v_bs2 = __Pyx_c_sum_double(__pyx_v_xld, __pyx_v_root);

      /* "Full_Matrix.pyx":904
 *             bs2 = xld+root
 * 
 *             if( Cmaxnorm(bs1) < Cmaxnorm( bs2 ) ):             # <<<<<<<<<<<<<<
 *              #   print("case a")
 *                 phipre[3]=(  bm -bs2  )/(2*p)
 */
      __pyx_t_3 = ((__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm(__pyx_v_bs1) < __pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm(__pyx_v_bs2)) != 0);
      if (__pyx_t_3) {

        /* "Full_Matrix.pyx":906
 *             if( Cmaxnorm(bs1) < Cmaxnorm( bs2 ) ):
 *              #   print("case a")
 *                 phipre[3]=(  bm -bs2  )/(2*p)             # <<<<<<<<<<<<<<
 *             else:
 *             #    print("case b")
 */
        __pyx_t_9 = __Pyx_c_diff_double(__pyx_v_bm, __pyx_v_bs2);
        __pyx_t_2 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_p);
        if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 906, __pyx_L1_error)
        }
        (__pyx_v_phipre[3]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_t_2);

        /* "Full_Matrix.pyx":904
 *             bs2 = xld+root
 * 
 *             if( Cmaxnorm(bs1) < Cmaxnorm( bs2 ) ):             # <<<<<<<<<<<<<<
 *              #   print("case a")
 *                 phipre[3]=(  bm -bs2  )/(2*p)
 */
        goto __pyx_L77;
      }

      /* "Full_Matrix.pyx":909
 *             else:
 *             #    print("case b")
 *                 phipre[3]=( bm +Q/bs1 )/(2*p)             # <<<<<<<<<<<<<<
 *             phipre[2]=phipre[3]*(vz[0])[0]/(1.+cy)
 *             phipre[0]=1
 */
      /*else*/ {
        if (unlikely(__Pyx_c_is_zero_double(__pyx_v_bs1))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 909, __pyx_L1_error)
        }
        __pyx_t_2 = __Pyx_c_sum_double(__pyx_v_bm, __Pyx_c_quot_double(__pyx_v_Q, __pyx_v_bs1));
        __pyx_t_9 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __pyx_v_p);
        if (unlikely(__Pyx_c_is_zero_double(__pyx_t_9))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 909, __pyx_L1_error)
        }
        (__pyx_v_phipre[3]) = __Pyx_c_quot_double(__pyx_t_2, __pyx_t_9);
      }
      __pyx_L77:;

      /* "Full_Matrix.pyx":910
 *             #    print("case b")
 *                 phipre[3]=( bm +Q/bs1 )/(2*p)
 *             phipre[2]=phipre[3]*(vz[0])[0]/(1.+cy)             # <<<<<<<<<<<<<<
 *             phipre[0]=1
 *             phipre[1]=(vz[0])[0]
 */
      __pyx_t_9 = __Pyx_c_prod_double((__pyx_v_phipre[3]), ((__pyx_v_vz[0])[0]));
      __pyx_t_2 = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_cy);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 910, __pyx_L1_error)
      }
      (__pyx_v_phipre[2]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_t_2);

      /* "Full_Matrix.pyx":911
 *                 phipre[3]=( bm +Q/bs1 )/(2*p)
 *             phipre[2]=phipre[3]*(vz[0])[0]/(1.+cy)
 *             phipre[0]=1             # <<<<<<<<<<<<<<
 *             phipre[1]=(vz[0])[0]
 * 
 */
      (__pyx_v_phipre[0]) = __pyx_t_double_complex_from_parts(1, 0);

      /* "Full_Matrix.pyx":912
 *             phipre[2]=phipre[3]*(vz[0])[0]/(1.+cy)
 *             phipre[0]=1
 *             phipre[1]=(vz[0])[0]             # <<<<<<<<<<<<<<
 * 
 *             for j in range(4):
 */
      (__pyx_v_phipre[1]) = ((__pyx_v_vz[0])[0]);

      /* "Full_Matrix.pyx":914
 *             phipre[1]=(vz[0])[0]
 * 
 *             for j in range(4):             # <<<<<<<<<<<<<<
 *                 (PHI[0])[j][0] = phipre[j]
 * 
 */
      for (__pyx_t_5 = 0; __pyx_t_5 < 4; __pyx_t_5+=1) {
        __pyx_v_j = __pyx_t_5;

        /* "Full_Matrix.pyx":915
 * 
 *             for j in range(4):
 *                 (PHI[0])[j][0] = phipre[j]             # <<<<<<<<<<<<<<
 * 
 *             phipre[2]=1
 */
        (((__pyx_v_PHI[0])[__pyx_v_j])[0]) = (__pyx_v_phipre[__pyx_v_j]);
      }

      /* "Full_Matrix.pyx":917
 *                 (PHI[0])[j][0] = phipre[j]
 * 
 *             phipre[2]=1             # <<<<<<<<<<<<<<
 *             phipre[3]=(1+cy)/(vz[0])[1]
 *             phipre[1]=(PHI[0])[3][0]
 */
      (__pyx_v_phipre[2]) = __pyx_t_double_complex_from_parts(1, 0);

      /* "Full_Matrix.pyx":918
 * 
 *             phipre[2]=1
 *             phipre[3]=(1+cy)/(vz[0])[1]             # <<<<<<<<<<<<<<
 *             phipre[1]=(PHI[0])[3][0]
 *             phipre[0]=phipre[1]/(vz[0])[1]
 */
      __pyx_t_2 = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1, 0), __pyx_v_cy);
      if (unlikely(__Pyx_c_is_zero_double(((__pyx_v_vz[0])[1])))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 918, __pyx_L1_error)
      }
      (__pyx_v_phipre[3]) = __Pyx_c_quot_double(__pyx_t_2, ((__pyx_v_vz[0])[1]));

      /* "Full_Matrix.pyx":919
 *             phipre[2]=1
 *             phipre[3]=(1+cy)/(vz[0])[1]
 *             phipre[1]=(PHI[0])[3][0]             # <<<<<<<<<<<<<<
 *             phipre[0]=phipre[1]/(vz[0])[1]
 *             #check if Eigenvector:
 */
      (__pyx_v_phipre[1]) = (((__pyx_v_PHI[0])[3])[0]);

      /* "Full_Matrix.pyx":920
 *             phipre[3]=(1+cy)/(vz[0])[1]
 *             phipre[1]=(PHI[0])[3][0]
 *             phipre[0]=phipre[1]/(vz[0])[1]             # <<<<<<<<<<<<<<
 *             #check if Eigenvector:
 *             for j in range(4):
 */
      if (unlikely(__Pyx_c_is_zero_double(((__pyx_v_vz[0])[1])))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 920, __pyx_L1_error)
      }
      (__pyx_v_phipre[0]) = __Pyx_c_quot_double((__pyx_v_phipre[1]), ((__pyx_v_vz[0])[1]));

      /* "Full_Matrix.pyx":922
 *             phipre[0]=phipre[1]/(vz[0])[1]
 *             #check if Eigenvector:
 *             for j in range(4):             # <<<<<<<<<<<<<<
 *                 (PHI[0])[j][1] = phipre[j]
 * 
 */
      for (__pyx_t_5 = 0; __pyx_t_5 < 4; __pyx_t_5+=1) {
        __pyx_v_j = __pyx_t_5;

        /* "Full_Matrix.pyx":923
 *             #check if Eigenvector:
 *             for j in range(4):
 *                 (PHI[0])[j][1] = phipre[j]             # <<<<<<<<<<<<<<
 * 
 *             (PHI[0])[0][2]=(PHI[0])[0][0]
 */
        (((__pyx_v_PHI[0])[__pyx_v_j])[1]) = (__pyx_v_phipre[__pyx_v_j]);
      }

      /* "Full_Matrix.pyx":925
 *                 (PHI[0])[j][1] = phipre[j]
 * 
 *             (PHI[0])[0][2]=(PHI[0])[0][0]             # <<<<<<<<<<<<<<
 *             (PHI[0])[1][2]=-(PHI[0])[1][0]
 *             (PHI[0])[2][2]=-(PHI[0])[2][0]
 */
      (((__pyx_v_PHI[0])[0])[2]) = (((__pyx_v_PHI[0])[0])[0]);

      /* "Full_Matrix.pyx":926
 * 
 *             (PHI[0])[0][2]=(PHI[0])[0][0]
 *             (PHI[0])[1][2]=-(PHI[0])[1][0]             # <<<<<<<<<<<<<<
 *             (PHI[0])[2][2]=-(PHI[0])[2][0]
 *             (PHI[0])[3][2]=(PHI[0])[3][0]
 */
      (((__pyx_v_PHI[0])[1])[2]) = __Pyx_c_neg_double((((__pyx_v_PHI[0])[1])[0]));

      /* "Full_Matrix.pyx":927
 *             (PHI[0])[0][2]=(PHI[0])[0][0]
 *             (PHI[0])[1][2]=-(PHI[0])[1][0]
 *             (PHI[0])[2][2]=-(PHI[0])[2][0]             # <<<<<<<<<<<<<<
 *             (PHI[0])[3][2]=(PHI[0])[3][0]
 * 
 */
      (((__pyx_v_PHI[0])[2])[2]) = __Pyx_c_neg_double((((__pyx_v_PHI[0])[2])[0]));

      /* "Full_Matrix.pyx":928
 *             (PHI[0])[1][2]=-(PHI[0])[1][0]
 *             (PHI[0])[2][2]=-(PHI[0])[2][0]
 *             (PHI[0])[3][2]=(PHI[0])[3][0]             # <<<<<<<<<<<<<<
 * 
 *             (PHI[0])[0][3]=-(PHI[0])[0][1]
 */
      (((__pyx_v_PHI[0])[3])[2]) = (((__pyx_v_PHI[0])[3])[0]);

      /* "Full_Matrix.pyx":930
 *             (PHI[0])[3][2]=(PHI[0])[3][0]
 * 
 *             (PHI[0])[0][3]=-(PHI[0])[0][1]             # <<<<<<<<<<<<<<
 *             (PHI[0])[1][3]=(PHI[0])[1][1]
 *             (PHI[0])[2][3]=(PHI[0])[2][1]
 */
      (((__pyx_v_PHI[0])[0])[3]) = __Pyx_c_neg_double((((__pyx_v_PHI[0])[0])[1]));

      /* "Full_Matrix.pyx":931
 * 
 *             (PHI[0])[0][3]=-(PHI[0])[0][1]
 *             (PHI[0])[1][3]=(PHI[0])[1][1]             # <<<<<<<<<<<<<<
 *             (PHI[0])[2][3]=(PHI[0])[2][1]
 *             (PHI[0])[3][3]=-(PHI[0])[3][1]
 */
      (((__pyx_v_PHI[0])[1])[3]) = (((__pyx_v_PHI[0])[1])[1]);

      /* "Full_Matrix.pyx":932
 *             (PHI[0])[0][3]=-(PHI[0])[0][1]
 *             (PHI[0])[1][3]=(PHI[0])[1][1]
 *             (PHI[0])[2][3]=(PHI[0])[2][1]             # <<<<<<<<<<<<<<
 *             (PHI[0])[3][3]=-(PHI[0])[3][1]
 * #            i=3
 */
      (((__pyx_v_PHI[0])[2])[3]) = (((__pyx_v_PHI[0])[2])[1]);

      /* "Full_Matrix.pyx":933
 *             (PHI[0])[1][3]=(PHI[0])[1][1]
 *             (PHI[0])[2][3]=(PHI[0])[2][1]
 *             (PHI[0])[3][3]=-(PHI[0])[3][1]             # <<<<<<<<<<<<<<
 * #            i=3
 * #            print("check if Eigenvector", i)
 */
      (((__pyx_v_PHI[0])[3])[3]) = __Pyx_c_neg_double((((__pyx_v_PHI[0])[3])[1]));

      /* "Full_Matrix.pyx":942
 * 
 *           #  (PHI[0])
 *             a=2*( (PHI[0])[3][0]*(PHI[0])[0][1] - (PHI[0])[3][1] )             # <<<<<<<<<<<<<<
 *             b=2*( (PHI[0])[1][0] - (PHI[0])[2][0]*(PHI[0])[1][1] )
 * 
 */
      __pyx_v_a = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __Pyx_c_diff_double(__Pyx_c_prod_double((((__pyx_v_PHI[0])[3])[0]), (((__pyx_v_PHI[0])[0])[1])), (((__pyx_v_PHI[0])[3])[1])));

      /* "Full_Matrix.pyx":943
 *           #  (PHI[0])
 *             a=2*( (PHI[0])[3][0]*(PHI[0])[0][1] - (PHI[0])[3][1] )
 *             b=2*( (PHI[0])[1][0] - (PHI[0])[2][0]*(PHI[0])[1][1] )             # <<<<<<<<<<<<<<
 * 
 *             (PSI[0])[0][0] = - (PHI[0])[3][1]/a
 */
      __pyx_v_b = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __Pyx_c_diff_double((((__pyx_v_PHI[0])[1])[0]), __Pyx_c_prod_double((((__pyx_v_PHI[0])[2])[0]), (((__pyx_v_PHI[0])[1])[1]))));

      /* "Full_Matrix.pyx":945
 *             b=2*( (PHI[0])[1][0] - (PHI[0])[2][0]*(PHI[0])[1][1] )
 * 
 *             (PSI[0])[0][0] = - (PHI[0])[3][1]/a             # <<<<<<<<<<<<<<
 *             (PSI[0])[1][0] =  (PHI[0])[3][0]/a
 *             (PSI[0])[2][0] = (PSI[0])[0][0]
 */
      __pyx_t_2 = __Pyx_c_neg_double((((__pyx_v_PHI[0])[3])[1]));
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_a))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 945, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[0])[0]) = __Pyx_c_quot_double(__pyx_t_2, __pyx_v_a);

      /* "Full_Matrix.pyx":946
 * 
 *             (PSI[0])[0][0] = - (PHI[0])[3][1]/a
 *             (PSI[0])[1][0] =  (PHI[0])[3][0]/a             # <<<<<<<<<<<<<<
 *             (PSI[0])[2][0] = (PSI[0])[0][0]
 *             (PSI[0])[3][0] = - (PSI[0])[1][0]
 */
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_a))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 946, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[1])[0]) = __Pyx_c_quot_double((((__pyx_v_PHI[0])[3])[0]), __pyx_v_a);

      /* "Full_Matrix.pyx":947
 *             (PSI[0])[0][0] = - (PHI[0])[3][1]/a
 *             (PSI[0])[1][0] =  (PHI[0])[3][0]/a
 *             (PSI[0])[2][0] = (PSI[0])[0][0]             # <<<<<<<<<<<<<<
 *             (PSI[0])[3][0] = - (PSI[0])[1][0]
 * 
 */
      (((__pyx_v_PSI[0])[2])[0]) = (((__pyx_v_PSI[0])[0])[0]);

      /* "Full_Matrix.pyx":948
 *             (PSI[0])[1][0] =  (PHI[0])[3][0]/a
 *             (PSI[0])[2][0] = (PSI[0])[0][0]
 *             (PSI[0])[3][0] = - (PSI[0])[1][0]             # <<<<<<<<<<<<<<
 * 
 *             (PSI[0])[0][1] = 1.0/b
 */
      (((__pyx_v_PSI[0])[3])[0]) = __Pyx_c_neg_double((((__pyx_v_PSI[0])[1])[0]));

      /* "Full_Matrix.pyx":950
 *             (PSI[0])[3][0] = - (PSI[0])[1][0]
 * 
 *             (PSI[0])[0][1] = 1.0/b             # <<<<<<<<<<<<<<
 *             (PSI[0])[1][1] = -(PHI[0])[2][0]/b
 *             (PSI[0])[2][1] = -(PSI[0])[0][1]
 */
      __pyx_t_2 = __pyx_t_double_complex_from_parts(1.0, 0);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_b))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 950, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[0])[1]) = __Pyx_c_quot_double(__pyx_t_2, __pyx_v_b);

      /* "Full_Matrix.pyx":951
 * 
 *             (PSI[0])[0][1] = 1.0/b
 *             (PSI[0])[1][1] = -(PHI[0])[2][0]/b             # <<<<<<<<<<<<<<
 *             (PSI[0])[2][1] = -(PSI[0])[0][1]
 *             (PSI[0])[3][1] = (PSI[0])[1][1]
 */
      __pyx_t_2 = __Pyx_c_neg_double((((__pyx_v_PHI[0])[2])[0]));
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_b))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 951, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[1])[1]) = __Pyx_c_quot_double(__pyx_t_2, __pyx_v_b);

      /* "Full_Matrix.pyx":952
 *             (PSI[0])[0][1] = 1.0/b
 *             (PSI[0])[1][1] = -(PHI[0])[2][0]/b
 *             (PSI[0])[2][1] = -(PSI[0])[0][1]             # <<<<<<<<<<<<<<
 *             (PSI[0])[3][1] = (PSI[0])[1][1]
 * 
 */
      (((__pyx_v_PSI[0])[2])[1]) = __Pyx_c_neg_double((((__pyx_v_PSI[0])[0])[1]));

      /* "Full_Matrix.pyx":953
 *             (PSI[0])[1][1] = -(PHI[0])[2][0]/b
 *             (PSI[0])[2][1] = -(PSI[0])[0][1]
 *             (PSI[0])[3][1] = (PSI[0])[1][1]             # <<<<<<<<<<<<<<
 * 
 *             (PSI[0])[0][2] = -(PHI[0])[1][1]/b
 */
      (((__pyx_v_PSI[0])[3])[1]) = (((__pyx_v_PSI[0])[1])[1]);

      /* "Full_Matrix.pyx":955
 *             (PSI[0])[3][1] = (PSI[0])[1][1]
 * 
 *             (PSI[0])[0][2] = -(PHI[0])[1][1]/b             # <<<<<<<<<<<<<<
 *             (PSI[0])[1][2] = (PHI[0])[1][0]/b
 *             (PSI[0])[2][2] = -(PSI[0])[0][2]
 */
      __pyx_t_2 = __Pyx_c_neg_double((((__pyx_v_PHI[0])[1])[1]));
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_b))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 955, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[0])[2]) = __Pyx_c_quot_double(__pyx_t_2, __pyx_v_b);

      /* "Full_Matrix.pyx":956
 * 
 *             (PSI[0])[0][2] = -(PHI[0])[1][1]/b
 *             (PSI[0])[1][2] = (PHI[0])[1][0]/b             # <<<<<<<<<<<<<<
 *             (PSI[0])[2][2] = -(PSI[0])[0][2]
 *             (PSI[0])[3][2] = (PSI[0])[1][2]
 */
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_b))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 956, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[1])[2]) = __Pyx_c_quot_double((((__pyx_v_PHI[0])[1])[0]), __pyx_v_b);

      /* "Full_Matrix.pyx":957
 *             (PSI[0])[0][2] = -(PHI[0])[1][1]/b
 *             (PSI[0])[1][2] = (PHI[0])[1][0]/b
 *             (PSI[0])[2][2] = -(PSI[0])[0][2]             # <<<<<<<<<<<<<<
 *             (PSI[0])[3][2] = (PSI[0])[1][2]
 * 
 */
      (((__pyx_v_PSI[0])[2])[2]) = __Pyx_c_neg_double((((__pyx_v_PSI[0])[0])[2]));

      /* "Full_Matrix.pyx":958
 *             (PSI[0])[1][2] = (PHI[0])[1][0]/b
 *             (PSI[0])[2][2] = -(PSI[0])[0][2]
 *             (PSI[0])[3][2] = (PSI[0])[1][2]             # <<<<<<<<<<<<<<
 * 
 *             (PSI[0])[0][3] = (PHI[0])[0][1]/a
 */
      (((__pyx_v_PSI[0])[3])[2]) = (((__pyx_v_PSI[0])[1])[2]);

      /* "Full_Matrix.pyx":960
 *             (PSI[0])[3][2] = (PSI[0])[1][2]
 * 
 *             (PSI[0])[0][3] = (PHI[0])[0][1]/a             # <<<<<<<<<<<<<<
 *             (PSI[0])[1][3] = - 1./a
 *             (PSI[0])[2][3] = (PSI[0])[0][3]
 */
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_a))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 960, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[0])[3]) = __Pyx_c_quot_double((((__pyx_v_PHI[0])[0])[1]), __pyx_v_a);

      /* "Full_Matrix.pyx":961
 * 
 *             (PSI[0])[0][3] = (PHI[0])[0][1]/a
 *             (PSI[0])[1][3] = - 1./a             # <<<<<<<<<<<<<<
 *             (PSI[0])[2][3] = (PSI[0])[0][3]
 *             (PSI[0])[3][3] = - (PSI[0])[1][3]
 */
      __pyx_t_2 = __pyx_t_double_complex_from_parts(-1., 0);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_a))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 961, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[1])[3]) = __Pyx_c_quot_double(__pyx_t_2, __pyx_v_a);

      /* "Full_Matrix.pyx":962
 *             (PSI[0])[0][3] = (PHI[0])[0][1]/a
 *             (PSI[0])[1][3] = - 1./a
 *             (PSI[0])[2][3] = (PSI[0])[0][3]             # <<<<<<<<<<<<<<
 *             (PSI[0])[3][3] = - (PSI[0])[1][3]
 * 
 */
      (((__pyx_v_PSI[0])[2])[3]) = (((__pyx_v_PSI[0])[0])[3]);

      /* "Full_Matrix.pyx":963
 *             (PSI[0])[1][3] = - 1./a
 *             (PSI[0])[2][3] = (PSI[0])[0][3]
 *             (PSI[0])[3][3] = - (PSI[0])[1][3]             # <<<<<<<<<<<<<<
 * 
 *             ##check if properly inverted:
 */
      (((__pyx_v_PSI[0])[3])[3]) = __Pyx_c_neg_double((((__pyx_v_PSI[0])[1])[3]));

      /* "Full_Matrix.pyx":880
 *             #####
 * 
 *         if( L.magdir==2 ):             # <<<<<<<<<<<<<<
 *          #   print("Moke y")
 * 
 */
    }

    /* "Full_Matrix.pyx":970
 * #                for j in range(4):
 * #                    print( (PHI[0])[i][j] )
 *         if(L.magdir == 3):             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = ((__pyx_v_L.magdir == 3) != 0);
    if (__pyx_t_3) {

      /* "Full_Matrix.pyx":973
 * 
 * 
 *             a=1.0/(1.+cz)             # <<<<<<<<<<<<<<
 *             xld= (cx-cy) + vyvy*(cy-cz)*a
 *             c = cquadr(xld)
 */
      __pyx_t_2 = __pyx_t_double_complex_from_parts(1.0, 0);
      __pyx_t_9 = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_cz);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_9))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 973, __pyx_L1_error)
      }
      __pyx_v_a = __Pyx_c_quot_double(__pyx_t_2, __pyx_t_9);

      /* "Full_Matrix.pyx":974
 * 
 *             a=1.0/(1.+cz)
 *             xld= (cx-cy) + vyvy*(cy-cz)*a             # <<<<<<<<<<<<<<
 *             c = cquadr(xld)
 * 
 */
      __pyx_v_xld = __Pyx_c_sum_double(__Pyx_c_diff_double(__pyx_v_cx, __pyx_v_cy), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0), __Pyx_c_diff_double(__pyx_v_cy, __pyx_v_cz)), __pyx_v_a));

      /* "Full_Matrix.pyx":975
 *             a=1.0/(1.+cz)
 *             xld= (cx-cy) + vyvy*(cy-cz)*a
 *             c = cquadr(xld)             # <<<<<<<<<<<<<<
 * 
 *             du=(1-vyvy*a)
 */
      __pyx_v_c = __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_v_xld);

      /* "Full_Matrix.pyx":977
 *             c = cquadr(xld)
 * 
 *             du=(1-vyvy*a)             # <<<<<<<<<<<<<<
 *             dm=( cy+1.0 )*a
 * 
 */
      __pyx_v_du = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1, 0), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0), __pyx_v_a));

      /* "Full_Matrix.pyx":978
 * 
 *             du=(1-vyvy*a)
 *             dm=( cy+1.0 )*a             # <<<<<<<<<<<<<<
 * 
 *             bu=(  dm  +1)*(1.-vyvy)/2
 */
      __pyx_v_dm = __Pyx_c_prod_double(__Pyx_c_sum_double(__pyx_v_cy, __pyx_t_double_complex_from_parts(1.0, 0)), __pyx_v_a);

      /* "Full_Matrix.pyx":980
 *             dm=( cy+1.0 )*a
 * 
 *             bu=(  dm  +1)*(1.-vyvy)/2             # <<<<<<<<<<<<<<
 *             bm=(cz*dm+cx)/2
 *             root=sqrt(0.25*c-cg*cg*du )
 */
      __pyx_t_9 = __Pyx_c_prod_double(__Pyx_c_sum_double(__pyx_v_dm, __pyx_t_double_complex_from_parts(1, 0)), __pyx_t_double_complex_from_parts((1. - __pyx_v_vyvy), 0));
      __pyx_t_2 = __pyx_t_double_complex_from_parts(2, 0);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 980, __pyx_L1_error)
      }
      __pyx_v_bu = __Pyx_c_quot_double(__pyx_t_9, __pyx_t_2);

      /* "Full_Matrix.pyx":981
 * 
 *             bu=(  dm  +1)*(1.-vyvy)/2
 *             bm=(cz*dm+cx)/2             # <<<<<<<<<<<<<<
 *             root=sqrt(0.25*c-cg*cg*du )
 * 
 */
      __pyx_t_2 = __Pyx_c_sum_double(__Pyx_c_prod_double(__pyx_v_cz, __pyx_v_dm), __pyx_v_cx);
      __pyx_t_9 = __pyx_t_double_complex_from_parts(2, 0);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_9))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 981, __pyx_L1_error)
      }
      __pyx_v_bm = __Pyx_c_quot_double(__pyx_t_2, __pyx_t_9);

      /* "Full_Matrix.pyx":982
 *             bu=(  dm  +1)*(1.-vyvy)/2
 *             bm=(cz*dm+cx)/2
 *             root=sqrt(0.25*c-cg*cg*du )             # <<<<<<<<<<<<<<
 * 
 *             b=bu + bm
 */
      __pyx_v_root = sqrt(__Pyx_c_diff_double(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.25, 0), __pyx_v_c), __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_v_cg, __pyx_v_cg), __pyx_v_du)));

      /* "Full_Matrix.pyx":984
 *             root=sqrt(0.25*c-cg*cg*du )
 * 
 *             b=bu + bm             # <<<<<<<<<<<<<<
 *             (vz[0])[0]=sqrt(b+root)
 *             (vz[0])[1]=sqrt(b-root)
 */
      __pyx_v_b = __Pyx_c_sum_double(__pyx_v_bu, __pyx_v_bm);

      /* "Full_Matrix.pyx":985
 * 
 *             b=bu + bm
 *             (vz[0])[0]=sqrt(b+root)             # <<<<<<<<<<<<<<
 *             (vz[0])[1]=sqrt(b-root)
 *             (vz[0])[2]=-(vz[0])[0]
 */
      ((__pyx_v_vz[0])[0]) = sqrt(__Pyx_c_sum_double(__pyx_v_b, __pyx_v_root));

      /* "Full_Matrix.pyx":986
 *             b=bu + bm
 *             (vz[0])[0]=sqrt(b+root)
 *             (vz[0])[1]=sqrt(b-root)             # <<<<<<<<<<<<<<
 *             (vz[0])[2]=-(vz[0])[0]
 *             (vz[0])[3]=-(vz[0])[1]
 */
      ((__pyx_v_vz[0])[1]) = sqrt(__Pyx_c_diff_double(__pyx_v_b, __pyx_v_root));

      /* "Full_Matrix.pyx":987
 *             (vz[0])[0]=sqrt(b+root)
 *             (vz[0])[1]=sqrt(b-root)
 *             (vz[0])[2]=-(vz[0])[0]             # <<<<<<<<<<<<<<
 *             (vz[0])[3]=-(vz[0])[1]
 * 
 */
      ((__pyx_v_vz[0])[2]) = __Pyx_c_neg_double(((__pyx_v_vz[0])[0]));

      /* "Full_Matrix.pyx":988
 *             (vz[0])[1]=sqrt(b-root)
 *             (vz[0])[2]=-(vz[0])[0]
 *             (vz[0])[3]=-(vz[0])[1]             # <<<<<<<<<<<<<<
 * 
 *             bs1 = xld/2-root
 */
      ((__pyx_v_vz[0])[3]) = __Pyx_c_neg_double(((__pyx_v_vz[0])[1]));

      /* "Full_Matrix.pyx":990
 *             (vz[0])[3]=-(vz[0])[1]
 * 
 *             bs1 = xld/2-root             # <<<<<<<<<<<<<<
 *             bs2 = xld/2+root
 * 
 */
      __pyx_t_9 = __pyx_t_double_complex_from_parts(2, 0);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_9))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 990, __pyx_L1_error)
      }
      __pyx_v_bs1 = __Pyx_c_diff_double(__Pyx_c_quot_double(__pyx_v_xld, __pyx_t_9), __pyx_v_root);

      /* "Full_Matrix.pyx":991
 * 
 *             bs1 = xld/2-root
 *             bs2 = xld/2+root             # <<<<<<<<<<<<<<
 * 
 *             phipre[0]=1
 */
      __pyx_t_9 = __pyx_t_double_complex_from_parts(2, 0);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_t_9))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 991, __pyx_L1_error)
      }
      __pyx_v_bs2 = __Pyx_c_sum_double(__Pyx_c_quot_double(__pyx_v_xld, __pyx_t_9), __pyx_v_root);

      /* "Full_Matrix.pyx":993
 *             bs2 = xld/2+root
 * 
 *             phipre[0]=1             # <<<<<<<<<<<<<<
 *             phipre[1]=(vz[0])[0]
 *             if( Cmaxnorm(bs1) < Cmaxnorm( bs2 ) ):
 */
      (__pyx_v_phipre[0]) = __pyx_t_double_complex_from_parts(1, 0);

      /* "Full_Matrix.pyx":994
 * 
 *             phipre[0]=1
 *             phipre[1]=(vz[0])[0]             # <<<<<<<<<<<<<<
 *             if( Cmaxnorm(bs1) < Cmaxnorm( bs2 ) ):
 *              #   print("a")
 */
      (__pyx_v_phipre[1]) = ((__pyx_v_vz[0])[0]);

      /* "Full_Matrix.pyx":995
 *             phipre[0]=1
 *             phipre[1]=(vz[0])[0]
 *             if( Cmaxnorm(bs1) < Cmaxnorm( bs2 ) ):             # <<<<<<<<<<<<<<
 *              #   print("a")
 *                 phipre[2]=  -cg*du/( bs2 )
 */
      __pyx_t_3 = ((__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm(__pyx_v_bs1) < __pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm(__pyx_v_bs2)) != 0);
      if (__pyx_t_3) {

        /* "Full_Matrix.pyx":997
 *             if( Cmaxnorm(bs1) < Cmaxnorm( bs2 ) ):
 *              #   print("a")
 *                 phipre[2]=  -cg*du/( bs2 )             # <<<<<<<<<<<<<<
 *             else:
 *               #  print("b")
 */
        __pyx_t_9 = __Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_cg), __pyx_v_du);
        if (unlikely(__Pyx_c_is_zero_double(__pyx_v_bs2))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 997, __pyx_L1_error)
        }
        (__pyx_v_phipre[2]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_v_bs2);

        /* "Full_Matrix.pyx":995
 *             phipre[0]=1
 *             phipre[1]=(vz[0])[0]
 *             if( Cmaxnorm(bs1) < Cmaxnorm( bs2 ) ):             # <<<<<<<<<<<<<<
 *              #   print("a")
 *                 phipre[2]=  -cg*du/( bs2 )
 */
        goto __pyx_L83;
      }

      /* "Full_Matrix.pyx":1000
 *             else:
 *               #  print("b")
 *                 phipre[2]=(  -bs1 )/cg             # <<<<<<<<<<<<<<
 *            # phipre[2]=(  -bs1 )/cg
 *             phipre[3]=((vz[0])[0]/du)*phipre[2]
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_c_neg_double(__pyx_v_bs1);
        if (unlikely(__Pyx_c_is_zero_double(__pyx_v_cg))) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 1000, __pyx_L1_error)
        }
        (__pyx_v_phipre[2]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_v_cg);
      }
      __pyx_L83:;

      /* "Full_Matrix.pyx":1002
 *                 phipre[2]=(  -bs1 )/cg
 *            # phipre[2]=(  -bs1 )/cg
 *             phipre[3]=((vz[0])[0]/du)*phipre[2]             # <<<<<<<<<<<<<<
 *             for j in range(4):
 *                 (PHI[0])[j][0] = phipre[j]
 */
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_du))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1002, __pyx_L1_error)
      }
      (__pyx_v_phipre[3]) = __Pyx_c_prod_double(__Pyx_c_quot_double(((__pyx_v_vz[0])[0]), __pyx_v_du), (__pyx_v_phipre[2]));

      /* "Full_Matrix.pyx":1003
 *            # phipre[2]=(  -bs1 )/cg
 *             phipre[3]=((vz[0])[0]/du)*phipre[2]
 *             for j in range(4):             # <<<<<<<<<<<<<<
 *                 (PHI[0])[j][0] = phipre[j]
 * 
 */
      for (__pyx_t_5 = 0; __pyx_t_5 < 4; __pyx_t_5+=1) {
        __pyx_v_j = __pyx_t_5;

        /* "Full_Matrix.pyx":1004
 *             phipre[3]=((vz[0])[0]/du)*phipre[2]
 *             for j in range(4):
 *                 (PHI[0])[j][0] = phipre[j]             # <<<<<<<<<<<<<<
 * 
 * 
 */
        (((__pyx_v_PHI[0])[__pyx_v_j])[0]) = (__pyx_v_phipre[__pyx_v_j]);
      }

      /* "Full_Matrix.pyx":1008
 * 
 * 
 *             (PHI[0])[2][1] = 1             # <<<<<<<<<<<<<<
 *             (PHI[0])[3][1] = (vz[0])[1]/du
 *             (PHI[0])[0][1] = (PHI[0])[2][0]/du
 */
      (((__pyx_v_PHI[0])[2])[1]) = __pyx_t_double_complex_from_parts(1, 0);

      /* "Full_Matrix.pyx":1009
 * 
 *             (PHI[0])[2][1] = 1
 *             (PHI[0])[3][1] = (vz[0])[1]/du             # <<<<<<<<<<<<<<
 *             (PHI[0])[0][1] = (PHI[0])[2][0]/du
 *             (PHI[0])[1][1] = (vz[0])[1]*(PHI[0])[0][1]
 */
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_du))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1009, __pyx_L1_error)
      }
      (((__pyx_v_PHI[0])[3])[1]) = __Pyx_c_quot_double(((__pyx_v_vz[0])[1]), __pyx_v_du);

      /* "Full_Matrix.pyx":1010
 *             (PHI[0])[2][1] = 1
 *             (PHI[0])[3][1] = (vz[0])[1]/du
 *             (PHI[0])[0][1] = (PHI[0])[2][0]/du             # <<<<<<<<<<<<<<
 *             (PHI[0])[1][1] = (vz[0])[1]*(PHI[0])[0][1]
 * 
 */
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_du))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1010, __pyx_L1_error)
      }
      (((__pyx_v_PHI[0])[0])[1]) = __Pyx_c_quot_double((((__pyx_v_PHI[0])[2])[0]), __pyx_v_du);

      /* "Full_Matrix.pyx":1011
 *             (PHI[0])[3][1] = (vz[0])[1]/du
 *             (PHI[0])[0][1] = (PHI[0])[2][0]/du
 *             (PHI[0])[1][1] = (vz[0])[1]*(PHI[0])[0][1]             # <<<<<<<<<<<<<<
 * 
 * 
 */
      (((__pyx_v_PHI[0])[1])[1]) = __Pyx_c_prod_double(((__pyx_v_vz[0])[1]), (((__pyx_v_PHI[0])[0])[1]));

      /* "Full_Matrix.pyx":1015
 * 
 * 
 *             (PHI[0])[0][2]=(PHI[0])[0][0]             # <<<<<<<<<<<<<<
 *             (PHI[0])[1][2]=-(PHI[0])[1][0]
 *             (PHI[0])[2][2]=(PHI[0])[2][0]
 */
      (((__pyx_v_PHI[0])[0])[2]) = (((__pyx_v_PHI[0])[0])[0]);

      /* "Full_Matrix.pyx":1016
 * 
 *             (PHI[0])[0][2]=(PHI[0])[0][0]
 *             (PHI[0])[1][2]=-(PHI[0])[1][0]             # <<<<<<<<<<<<<<
 *             (PHI[0])[2][2]=(PHI[0])[2][0]
 *             (PHI[0])[3][2]=-(PHI[0])[3][0]
 */
      (((__pyx_v_PHI[0])[1])[2]) = __Pyx_c_neg_double((((__pyx_v_PHI[0])[1])[0]));

      /* "Full_Matrix.pyx":1017
 *             (PHI[0])[0][2]=(PHI[0])[0][0]
 *             (PHI[0])[1][2]=-(PHI[0])[1][0]
 *             (PHI[0])[2][2]=(PHI[0])[2][0]             # <<<<<<<<<<<<<<
 *             (PHI[0])[3][2]=-(PHI[0])[3][0]
 * 
 */
      (((__pyx_v_PHI[0])[2])[2]) = (((__pyx_v_PHI[0])[2])[0]);

      /* "Full_Matrix.pyx":1018
 *             (PHI[0])[1][2]=-(PHI[0])[1][0]
 *             (PHI[0])[2][2]=(PHI[0])[2][0]
 *             (PHI[0])[3][2]=-(PHI[0])[3][0]             # <<<<<<<<<<<<<<
 * 
 *             (PHI[0])[0][3]=(PHI[0])[0][1]
 */
      (((__pyx_v_PHI[0])[3])[2]) = __Pyx_c_neg_double((((__pyx_v_PHI[0])[3])[0]));

      /* "Full_Matrix.pyx":1020
 *             (PHI[0])[3][2]=-(PHI[0])[3][0]
 * 
 *             (PHI[0])[0][3]=(PHI[0])[0][1]             # <<<<<<<<<<<<<<
 *             (PHI[0])[1][3]=-(PHI[0])[1][1]
 *             (PHI[0])[2][3]=(PHI[0])[2][1]
 */
      (((__pyx_v_PHI[0])[0])[3]) = (((__pyx_v_PHI[0])[0])[1]);

      /* "Full_Matrix.pyx":1021
 * 
 *             (PHI[0])[0][3]=(PHI[0])[0][1]
 *             (PHI[0])[1][3]=-(PHI[0])[1][1]             # <<<<<<<<<<<<<<
 *             (PHI[0])[2][3]=(PHI[0])[2][1]
 *             (PHI[0])[3][3]=-(PHI[0])[3][1]
 */
      (((__pyx_v_PHI[0])[1])[3]) = __Pyx_c_neg_double((((__pyx_v_PHI[0])[1])[1]));

      /* "Full_Matrix.pyx":1022
 *             (PHI[0])[0][3]=(PHI[0])[0][1]
 *             (PHI[0])[1][3]=-(PHI[0])[1][1]
 *             (PHI[0])[2][3]=(PHI[0])[2][1]             # <<<<<<<<<<<<<<
 *             (PHI[0])[3][3]=-(PHI[0])[3][1]
 * #            i=0
 */
      (((__pyx_v_PHI[0])[2])[3]) = (((__pyx_v_PHI[0])[2])[1]);

      /* "Full_Matrix.pyx":1023
 *             (PHI[0])[1][3]=-(PHI[0])[1][1]
 *             (PHI[0])[2][3]=(PHI[0])[2][1]
 *             (PHI[0])[3][3]=-(PHI[0])[3][1]             # <<<<<<<<<<<<<<
 * #            i=0
 * #            print((PHI[0])[0][i], (PHI[0])[1][i], (PHI[0])[2][i], (PHI[0])[3][i])
 */
      (((__pyx_v_PHI[0])[3])[3]) = __Pyx_c_neg_double((((__pyx_v_PHI[0])[3])[1]));

      /* "Full_Matrix.pyx":1058
 * 
 * 
 *             a=2*( (PHI[0])[2][0]*(PHI[0])[0][1] - 1 )             # <<<<<<<<<<<<<<
 *             b=2*( (PHI[0])[1][0]*(PHI[0])[3][1] - (PHI[0])[3][0]*(PHI[0])[1][1] )
 * 
 */
      __pyx_v_a = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __Pyx_c_diff_double(__Pyx_c_prod_double((((__pyx_v_PHI[0])[2])[0]), (((__pyx_v_PHI[0])[0])[1])), __pyx_t_double_complex_from_parts(1, 0)));

      /* "Full_Matrix.pyx":1059
 * 
 *             a=2*( (PHI[0])[2][0]*(PHI[0])[0][1] - 1 )
 *             b=2*( (PHI[0])[1][0]*(PHI[0])[3][1] - (PHI[0])[3][0]*(PHI[0])[1][1] )             # <<<<<<<<<<<<<<
 * 
 *             (PSI[0])[0][0] = -1./a
 */
      __pyx_v_b = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(2, 0), __Pyx_c_diff_double(__Pyx_c_prod_double((((__pyx_v_PHI[0])[1])[0]), (((__pyx_v_PHI[0])[3])[1])), __Pyx_c_prod_double((((__pyx_v_PHI[0])[3])[0]), (((__pyx_v_PHI[0])[1])[1]))));

      /* "Full_Matrix.pyx":1061
 *             b=2*( (PHI[0])[1][0]*(PHI[0])[3][1] - (PHI[0])[3][0]*(PHI[0])[1][1] )
 * 
 *             (PSI[0])[0][0] = -1./a             # <<<<<<<<<<<<<<
 *             (PSI[0])[1][0] = (PHI[0])[2][0]/a
 *             (PSI[0])[2][0] = (PSI[0])[0][0]
 */
      __pyx_t_9 = __pyx_t_double_complex_from_parts(-1., 0);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_a))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1061, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[0])[0]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_v_a);

      /* "Full_Matrix.pyx":1062
 * 
 *             (PSI[0])[0][0] = -1./a
 *             (PSI[0])[1][0] = (PHI[0])[2][0]/a             # <<<<<<<<<<<<<<
 *             (PSI[0])[2][0] = (PSI[0])[0][0]
 *             (PSI[0])[3][0] = (PSI[0])[1][0]
 */
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_a))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1062, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[1])[0]) = __Pyx_c_quot_double((((__pyx_v_PHI[0])[2])[0]), __pyx_v_a);

      /* "Full_Matrix.pyx":1063
 *             (PSI[0])[0][0] = -1./a
 *             (PSI[0])[1][0] = (PHI[0])[2][0]/a
 *             (PSI[0])[2][0] = (PSI[0])[0][0]             # <<<<<<<<<<<<<<
 *             (PSI[0])[3][0] = (PSI[0])[1][0]
 * 
 */
      (((__pyx_v_PSI[0])[2])[0]) = (((__pyx_v_PSI[0])[0])[0]);

      /* "Full_Matrix.pyx":1064
 *             (PSI[0])[1][0] = (PHI[0])[2][0]/a
 *             (PSI[0])[2][0] = (PSI[0])[0][0]
 *             (PSI[0])[3][0] = (PSI[0])[1][0]             # <<<<<<<<<<<<<<
 * 
 *             (PSI[0])[0][1] = (PHI[0])[3][1]/b
 */
      (((__pyx_v_PSI[0])[3])[0]) = (((__pyx_v_PSI[0])[1])[0]);

      /* "Full_Matrix.pyx":1066
 *             (PSI[0])[3][0] = (PSI[0])[1][0]
 * 
 *             (PSI[0])[0][1] = (PHI[0])[3][1]/b             # <<<<<<<<<<<<<<
 *             (PSI[0])[1][1] = -(PHI[0])[3][0] /b
 *             (PSI[0])[2][1] = -(PSI[0])[0][1]
 */
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_b))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1066, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[0])[1]) = __Pyx_c_quot_double((((__pyx_v_PHI[0])[3])[1]), __pyx_v_b);

      /* "Full_Matrix.pyx":1067
 * 
 *             (PSI[0])[0][1] = (PHI[0])[3][1]/b
 *             (PSI[0])[1][1] = -(PHI[0])[3][0] /b             # <<<<<<<<<<<<<<
 *             (PSI[0])[2][1] = -(PSI[0])[0][1]
 *             (PSI[0])[3][1] = -(PSI[0])[1][1]
 */
      __pyx_t_9 = __Pyx_c_neg_double((((__pyx_v_PHI[0])[3])[0]));
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_b))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1067, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[1])[1]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_v_b);

      /* "Full_Matrix.pyx":1068
 *             (PSI[0])[0][1] = (PHI[0])[3][1]/b
 *             (PSI[0])[1][1] = -(PHI[0])[3][0] /b
 *             (PSI[0])[2][1] = -(PSI[0])[0][1]             # <<<<<<<<<<<<<<
 *             (PSI[0])[3][1] = -(PSI[0])[1][1]
 * 
 */
      (((__pyx_v_PSI[0])[2])[1]) = __Pyx_c_neg_double((((__pyx_v_PSI[0])[0])[1]));

      /* "Full_Matrix.pyx":1069
 *             (PSI[0])[1][1] = -(PHI[0])[3][0] /b
 *             (PSI[0])[2][1] = -(PSI[0])[0][1]
 *             (PSI[0])[3][1] = -(PSI[0])[1][1]             # <<<<<<<<<<<<<<
 * 
 *             (PSI[0])[0][2] = (PHI[0])[0][1]/a
 */
      (((__pyx_v_PSI[0])[3])[1]) = __Pyx_c_neg_double((((__pyx_v_PSI[0])[1])[1]));

      /* "Full_Matrix.pyx":1071
 *             (PSI[0])[3][1] = -(PSI[0])[1][1]
 * 
 *             (PSI[0])[0][2] = (PHI[0])[0][1]/a             # <<<<<<<<<<<<<<
 *             (PSI[0])[1][2] = -1 /a
 *             (PSI[0])[2][2] = (PSI[0])[0][2]
 */
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_a))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1071, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[0])[2]) = __Pyx_c_quot_double((((__pyx_v_PHI[0])[0])[1]), __pyx_v_a);

      /* "Full_Matrix.pyx":1072
 * 
 *             (PSI[0])[0][2] = (PHI[0])[0][1]/a
 *             (PSI[0])[1][2] = -1 /a             # <<<<<<<<<<<<<<
 *             (PSI[0])[2][2] = (PSI[0])[0][2]
 *             (PSI[0])[3][2] = (PSI[0])[1][2]
 */
      __pyx_t_9 = __pyx_t_double_complex_from_parts(-1L, 0);
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_a))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1072, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[1])[2]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_v_a);

      /* "Full_Matrix.pyx":1073
 *             (PSI[0])[0][2] = (PHI[0])[0][1]/a
 *             (PSI[0])[1][2] = -1 /a
 *             (PSI[0])[2][2] = (PSI[0])[0][2]             # <<<<<<<<<<<<<<
 *             (PSI[0])[3][2] = (PSI[0])[1][2]
 * 
 */
      (((__pyx_v_PSI[0])[2])[2]) = (((__pyx_v_PSI[0])[0])[2]);

      /* "Full_Matrix.pyx":1074
 *             (PSI[0])[1][2] = -1 /a
 *             (PSI[0])[2][2] = (PSI[0])[0][2]
 *             (PSI[0])[3][2] = (PSI[0])[1][2]             # <<<<<<<<<<<<<<
 * 
 *             (PSI[0])[0][3] = -(PHI[0])[1][1]/b
 */
      (((__pyx_v_PSI[0])[3])[2]) = (((__pyx_v_PSI[0])[1])[2]);

      /* "Full_Matrix.pyx":1076
 *             (PSI[0])[3][2] = (PSI[0])[1][2]
 * 
 *             (PSI[0])[0][3] = -(PHI[0])[1][1]/b             # <<<<<<<<<<<<<<
 *             (PSI[0])[1][3] = (PHI[0])[1][0]/b
 *             (PSI[0])[2][3] = -(PSI[0])[0][3]
 */
      __pyx_t_9 = __Pyx_c_neg_double((((__pyx_v_PHI[0])[1])[1]));
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_b))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1076, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[0])[3]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_v_b);

      /* "Full_Matrix.pyx":1077
 * 
 *             (PSI[0])[0][3] = -(PHI[0])[1][1]/b
 *             (PSI[0])[1][3] = (PHI[0])[1][0]/b             # <<<<<<<<<<<<<<
 *             (PSI[0])[2][3] = -(PSI[0])[0][3]
 *             (PSI[0])[3][3] = -(PSI[0])[1][3]
 */
      if (unlikely(__Pyx_c_is_zero_double(__pyx_v_b))) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 1077, __pyx_L1_error)
      }
      (((__pyx_v_PSI[0])[1])[3]) = __Pyx_c_quot_double((((__pyx_v_PHI[0])[1])[0]), __pyx_v_b);

      /* "Full_Matrix.pyx":1078
 *             (PSI[0])[0][3] = -(PHI[0])[1][1]/b
 *             (PSI[0])[1][3] = (PHI[0])[1][0]/b
 *             (PSI[0])[2][3] = -(PSI[0])[0][3]             # <<<<<<<<<<<<<<
 *             (PSI[0])[3][3] = -(PSI[0])[1][3]
 *             #check if properly inverted:
 */
      (((__pyx_v_PSI[0])[2])[3]) = __Pyx_c_neg_double((((__pyx_v_PSI[0])[0])[3]));

      /* "Full_Matrix.pyx":1079
 *             (PSI[0])[1][3] = (PHI[0])[1][0]/b
 *             (PSI[0])[2][3] = -(PSI[0])[0][3]
 *             (PSI[0])[3][3] = -(PSI[0])[1][3]             # <<<<<<<<<<<<<<
 *             #check if properly inverted:
 * #            NormalizePHI(PHI)
 */
      (((__pyx_v_PSI[0])[3])[3]) = __Pyx_c_neg_double((((__pyx_v_PSI[0])[1])[3]));

      /* "Full_Matrix.pyx":970
 * #                for j in range(4):
 * #                    print( (PHI[0])[i][j] )
 *         if(L.magdir == 3):             # <<<<<<<<<<<<<<
 * 
 * 
 */
    }

    /* "Full_Matrix.pyx":792
 * #                    print("[", cx, cxy, cxz, cyx, cy, cyz, czx, czy, cz, "]", vy)
 *                ### print( (PHI[0])[i][j] )
 *     elif( L.type==3 ):             # <<<<<<<<<<<<<<
 *         #Transversal MOKE:
 *        # print("Moke x")
 */
    break;
    default:

    /* "Full_Matrix.pyx":1114
 * #                    print( (PHI[0])[i][j] )
 *     else:
 *         (vz[0])[0]=CalculateVZsigma(vyvy, cx)             # <<<<<<<<<<<<<<
 *         (vz[0])[1]=CalculateVZpi(vyvy, cy, cz)
 *         (vz[0])[2]=-(vz[0])[0]
 */
    ((__pyx_v_vz[0])[0]) = __pyx_f_18Reflectivity_Sigma_CalculateVZsigma(__pyx_v_vyvy, __pyx_v_cx);

    /* "Full_Matrix.pyx":1115
 *     else:
 *         (vz[0])[0]=CalculateVZsigma(vyvy, cx)
 *         (vz[0])[1]=CalculateVZpi(vyvy, cy, cz)             # <<<<<<<<<<<<<<
 *         (vz[0])[2]=-(vz[0])[0]
 *         (vz[0])[3]=-(vz[0])[1]
 */
    ((__pyx_v_vz[0])[1]) = __pyx_f_15Reflectivity_Pi_CalculateVZpi(__pyx_v_vyvy, __pyx_v_cy, __pyx_v_cz);

    /* "Full_Matrix.pyx":1116
 *         (vz[0])[0]=CalculateVZsigma(vyvy, cx)
 *         (vz[0])[1]=CalculateVZpi(vyvy, cy, cz)
 *         (vz[0])[2]=-(vz[0])[0]             # <<<<<<<<<<<<<<
 *         (vz[0])[3]=-(vz[0])[1]
 *         a=1.+cy
 */
    ((__pyx_v_vz[0])[2]) = __Pyx_c_neg_double(((__pyx_v_vz[0])[0]));

    /* "Full_Matrix.pyx":1117
 *         (vz[0])[1]=CalculateVZpi(vyvy, cy, cz)
 *         (vz[0])[2]=-(vz[0])[0]
 *         (vz[0])[3]=-(vz[0])[1]             # <<<<<<<<<<<<<<
 *         a=1.+cy
 *         (PHI[0])[0][0]=1
 */
    ((__pyx_v_vz[0])[3]) = __Pyx_c_neg_double(((__pyx_v_vz[0])[1]));

    /* "Full_Matrix.pyx":1118
 *         (vz[0])[2]=-(vz[0])[0]
 *         (vz[0])[3]=-(vz[0])[1]
 *         a=1.+cy             # <<<<<<<<<<<<<<
 *         (PHI[0])[0][0]=1
 *         (PHI[0])[1][0]=(vz[0])[0]
 */
    __pyx_v_a = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_cy);

    /* "Full_Matrix.pyx":1119
 *         (vz[0])[3]=-(vz[0])[1]
 *         a=1.+cy
 *         (PHI[0])[0][0]=1             # <<<<<<<<<<<<<<
 *         (PHI[0])[1][0]=(vz[0])[0]
 *         (PHI[0])[2][0]=0
 */
    (((__pyx_v_PHI[0])[0])[0]) = __pyx_t_double_complex_from_parts(1, 0);

    /* "Full_Matrix.pyx":1120
 *         a=1.+cy
 *         (PHI[0])[0][0]=1
 *         (PHI[0])[1][0]=(vz[0])[0]             # <<<<<<<<<<<<<<
 *         (PHI[0])[2][0]=0
 *         (PHI[0])[3][0]=0
 */
    (((__pyx_v_PHI[0])[1])[0]) = ((__pyx_v_vz[0])[0]);

    /* "Full_Matrix.pyx":1121
 *         (PHI[0])[0][0]=1
 *         (PHI[0])[1][0]=(vz[0])[0]
 *         (PHI[0])[2][0]=0             # <<<<<<<<<<<<<<
 *         (PHI[0])[3][0]=0
 * 
 */
    (((__pyx_v_PHI[0])[2])[0]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1122
 *         (PHI[0])[1][0]=(vz[0])[0]
 *         (PHI[0])[2][0]=0
 *         (PHI[0])[3][0]=0             # <<<<<<<<<<<<<<
 * 
 *         (PHI[0])[0][1]=0
 */
    (((__pyx_v_PHI[0])[3])[0]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1124
 *         (PHI[0])[3][0]=0
 * 
 *         (PHI[0])[0][1]=0             # <<<<<<<<<<<<<<
 *         (PHI[0])[1][1]=0
 *         (PHI[0])[2][1]=1
 */
    (((__pyx_v_PHI[0])[0])[1]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1125
 * 
 *         (PHI[0])[0][1]=0
 *         (PHI[0])[1][1]=0             # <<<<<<<<<<<<<<
 *         (PHI[0])[2][1]=1
 *         (PHI[0])[3][1]=a/(vz[0])[1]
 */
    (((__pyx_v_PHI[0])[1])[1]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1126
 *         (PHI[0])[0][1]=0
 *         (PHI[0])[1][1]=0
 *         (PHI[0])[2][1]=1             # <<<<<<<<<<<<<<
 *         (PHI[0])[3][1]=a/(vz[0])[1]
 * 
 */
    (((__pyx_v_PHI[0])[2])[1]) = __pyx_t_double_complex_from_parts(1, 0);

    /* "Full_Matrix.pyx":1127
 *         (PHI[0])[1][1]=0
 *         (PHI[0])[2][1]=1
 *         (PHI[0])[3][1]=a/(vz[0])[1]             # <<<<<<<<<<<<<<
 * 
 *         (PHI[0])[0][2]=1
 */
    if (unlikely(__Pyx_c_is_zero_double(((__pyx_v_vz[0])[1])))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1127, __pyx_L1_error)
    }
    (((__pyx_v_PHI[0])[3])[1]) = __Pyx_c_quot_double(__pyx_v_a, ((__pyx_v_vz[0])[1]));

    /* "Full_Matrix.pyx":1129
 *         (PHI[0])[3][1]=a/(vz[0])[1]
 * 
 *         (PHI[0])[0][2]=1             # <<<<<<<<<<<<<<
 *         (PHI[0])[1][2]=(vz[0])[2]
 *         (PHI[0])[2][2]=0
 */
    (((__pyx_v_PHI[0])[0])[2]) = __pyx_t_double_complex_from_parts(1, 0);

    /* "Full_Matrix.pyx":1130
 * 
 *         (PHI[0])[0][2]=1
 *         (PHI[0])[1][2]=(vz[0])[2]             # <<<<<<<<<<<<<<
 *         (PHI[0])[2][2]=0
 *         (PHI[0])[3][2]=0
 */
    (((__pyx_v_PHI[0])[1])[2]) = ((__pyx_v_vz[0])[2]);

    /* "Full_Matrix.pyx":1131
 *         (PHI[0])[0][2]=1
 *         (PHI[0])[1][2]=(vz[0])[2]
 *         (PHI[0])[2][2]=0             # <<<<<<<<<<<<<<
 *         (PHI[0])[3][2]=0
 * 
 */
    (((__pyx_v_PHI[0])[2])[2]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1132
 *         (PHI[0])[1][2]=(vz[0])[2]
 *         (PHI[0])[2][2]=0
 *         (PHI[0])[3][2]=0             # <<<<<<<<<<<<<<
 * 
 *         (PHI[0])[0][3]=0
 */
    (((__pyx_v_PHI[0])[3])[2]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1134
 *         (PHI[0])[3][2]=0
 * 
 *         (PHI[0])[0][3]=0             # <<<<<<<<<<<<<<
 *         (PHI[0])[1][3]=0
 *         (PHI[0])[2][3]=1
 */
    (((__pyx_v_PHI[0])[0])[3]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1135
 * 
 *         (PHI[0])[0][3]=0
 *         (PHI[0])[1][3]=0             # <<<<<<<<<<<<<<
 *         (PHI[0])[2][3]=1
 *         (PHI[0])[3][3]=-(PHI[0])[3][1]
 */
    (((__pyx_v_PHI[0])[1])[3]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1136
 *         (PHI[0])[0][3]=0
 *         (PHI[0])[1][3]=0
 *         (PHI[0])[2][3]=1             # <<<<<<<<<<<<<<
 *         (PHI[0])[3][3]=-(PHI[0])[3][1]
 * 
 */
    (((__pyx_v_PHI[0])[2])[3]) = __pyx_t_double_complex_from_parts(1, 0);

    /* "Full_Matrix.pyx":1137
 *         (PHI[0])[1][3]=0
 *         (PHI[0])[2][3]=1
 *         (PHI[0])[3][3]=-(PHI[0])[3][1]             # <<<<<<<<<<<<<<
 * 
 *         (PSI[0])[0][0]=0.5
 */
    (((__pyx_v_PHI[0])[3])[3]) = __Pyx_c_neg_double((((__pyx_v_PHI[0])[3])[1]));

    /* "Full_Matrix.pyx":1139
 *         (PHI[0])[3][3]=-(PHI[0])[3][1]
 * 
 *         (PSI[0])[0][0]=0.5             # <<<<<<<<<<<<<<
 *         (PSI[0])[0][1]=0.5/(vz[0])[0]
 *         (PSI[0])[0][2]=0
 */
    (((__pyx_v_PSI[0])[0])[0]) = __pyx_t_double_complex_from_parts(0.5, 0);

    /* "Full_Matrix.pyx":1140
 * 
 *         (PSI[0])[0][0]=0.5
 *         (PSI[0])[0][1]=0.5/(vz[0])[0]             # <<<<<<<<<<<<<<
 *         (PSI[0])[0][2]=0
 *         (PSI[0])[0][3]=0
 */
    __pyx_t_9 = __pyx_t_double_complex_from_parts(0.5, 0);
    if (unlikely(__Pyx_c_is_zero_double(((__pyx_v_vz[0])[0])))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1140, __pyx_L1_error)
    }
    (((__pyx_v_PSI[0])[0])[1]) = __Pyx_c_quot_double(__pyx_t_9, ((__pyx_v_vz[0])[0]));

    /* "Full_Matrix.pyx":1141
 *         (PSI[0])[0][0]=0.5
 *         (PSI[0])[0][1]=0.5/(vz[0])[0]
 *         (PSI[0])[0][2]=0             # <<<<<<<<<<<<<<
 *         (PSI[0])[0][3]=0
 * 
 */
    (((__pyx_v_PSI[0])[0])[2]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1142
 *         (PSI[0])[0][1]=0.5/(vz[0])[0]
 *         (PSI[0])[0][2]=0
 *         (PSI[0])[0][3]=0             # <<<<<<<<<<<<<<
 * 
 *         (PSI[0])[1][0]=0
 */
    (((__pyx_v_PSI[0])[0])[3]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1144
 *         (PSI[0])[0][3]=0
 * 
 *         (PSI[0])[1][0]=0             # <<<<<<<<<<<<<<
 *         (PSI[0])[1][1]=0
 *         (PSI[0])[1][2]=0.5
 */
    (((__pyx_v_PSI[0])[1])[0]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1145
 * 
 *         (PSI[0])[1][0]=0
 *         (PSI[0])[1][1]=0             # <<<<<<<<<<<<<<
 *         (PSI[0])[1][2]=0.5
 *         (PSI[0])[1][3]=0.5*(vz[0])[1]/a
 */
    (((__pyx_v_PSI[0])[1])[1]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1146
 *         (PSI[0])[1][0]=0
 *         (PSI[0])[1][1]=0
 *         (PSI[0])[1][2]=0.5             # <<<<<<<<<<<<<<
 *         (PSI[0])[1][3]=0.5*(vz[0])[1]/a
 * 
 */
    (((__pyx_v_PSI[0])[1])[2]) = __pyx_t_double_complex_from_parts(0.5, 0);

    /* "Full_Matrix.pyx":1147
 *         (PSI[0])[1][1]=0
 *         (PSI[0])[1][2]=0.5
 *         (PSI[0])[1][3]=0.5*(vz[0])[1]/a             # <<<<<<<<<<<<<<
 * 
 *         (PSI[0])[2][0]=0.5
 */
    __pyx_t_9 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0.5, 0), ((__pyx_v_vz[0])[1]));
    if (unlikely(__Pyx_c_is_zero_double(__pyx_v_a))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1147, __pyx_L1_error)
    }
    (((__pyx_v_PSI[0])[1])[3]) = __Pyx_c_quot_double(__pyx_t_9, __pyx_v_a);

    /* "Full_Matrix.pyx":1149
 *         (PSI[0])[1][3]=0.5*(vz[0])[1]/a
 * 
 *         (PSI[0])[2][0]=0.5             # <<<<<<<<<<<<<<
 *         (PSI[0])[2][1]=0.5/(vz[0])[2]
 *         (PSI[0])[2][2]=0
 */
    (((__pyx_v_PSI[0])[2])[0]) = __pyx_t_double_complex_from_parts(0.5, 0);

    /* "Full_Matrix.pyx":1150
 * 
 *         (PSI[0])[2][0]=0.5
 *         (PSI[0])[2][1]=0.5/(vz[0])[2]             # <<<<<<<<<<<<<<
 *         (PSI[0])[2][2]=0
 *         (PSI[0])[2][3]=0
 */
    __pyx_t_9 = __pyx_t_double_complex_from_parts(0.5, 0);
    if (unlikely(__Pyx_c_is_zero_double(((__pyx_v_vz[0])[2])))) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 1150, __pyx_L1_error)
    }
    (((__pyx_v_PSI[0])[2])[1]) = __Pyx_c_quot_double(__pyx_t_9, ((__pyx_v_vz[0])[2]));

    /* "Full_Matrix.pyx":1151
 *         (PSI[0])[2][0]=0.5
 *         (PSI[0])[2][1]=0.5/(vz[0])[2]
 *         (PSI[0])[2][2]=0             # <<<<<<<<<<<<<<
 *         (PSI[0])[2][3]=0
 * 
 */
    (((__pyx_v_PSI[0])[2])[2]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1152
 *         (PSI[0])[2][1]=0.5/(vz[0])[2]
 *         (PSI[0])[2][2]=0
 *         (PSI[0])[2][3]=0             # <<<<<<<<<<<<<<
 * 
 *         (PSI[0])[3][0]=0
 */
    (((__pyx_v_PSI[0])[2])[3]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1154
 *         (PSI[0])[2][3]=0
 * 
 *         (PSI[0])[3][0]=0             # <<<<<<<<<<<<<<
 *         (PSI[0])[3][1]=0
 *         (PSI[0])[3][2]=0.5
 */
    (((__pyx_v_PSI[0])[3])[0]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1155
 * 
 *         (PSI[0])[3][0]=0
 *         (PSI[0])[3][1]=0             # <<<<<<<<<<<<<<
 *         (PSI[0])[3][2]=0.5
 *         (PSI[0])[3][3]=-(PSI[0])[1][3]
 */
    (((__pyx_v_PSI[0])[3])[1]) = __pyx_t_double_complex_from_parts(0, 0);

    /* "Full_Matrix.pyx":1156
 *         (PSI[0])[3][0]=0
 *         (PSI[0])[3][1]=0
 *         (PSI[0])[3][2]=0.5             # <<<<<<<<<<<<<<
 *         (PSI[0])[3][3]=-(PSI[0])[1][3]
 * 
 */
    (((__pyx_v_PSI[0])[3])[2]) = __pyx_t_double_complex_from_parts(0.5, 0);

    /* "Full_Matrix.pyx":1157
 *         (PSI[0])[3][1]=0
 *         (PSI[0])[3][2]=0.5
 *         (PSI[0])[3][3]=-(PSI[0])[1][3]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (((__pyx_v_PSI[0])[3])[3]) = __Pyx_c_neg_double((((__pyx_v_PSI[0])[1])[3]));
    break;
  }

  /* "Full_Matrix.pyx":178
 * 
 * 
 * cdef void Calculate_Phi_and_Psi(CLayer L, MatrixSafer *MS, double vy, double vzvz, double vyvy, double complex (*vz)[4], double complex (*PHI)[4][4], double complex (*PSI)[4][4]):             # <<<<<<<<<<<<<<
 * 
 *     cdef double complex cx, cy, cz, cxy, cyx, cxz, czx, cyz, czy, cg
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_WriteUnraisable("Full_Matrix.Calculate_Phi_and_Psi", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Delta0quadr);
  __Pyx_XDECREF(__pyx_v_Deltaremainder);
  __Pyx_XDECREF(__pyx_v_root_MqS1);
  __Pyx_XDECREF(__pyx_v_root_MqS2);
  __Pyx_RefNannyFinishContext();
}

/* "Full_Matrix.pyx":1162
 * 
 * 
 * cdef void Full_Matrix(Heterostructure* HS, MatrixSafer *AllMS, int* Layer_type_to_Matrixsafe, double th, double wavelength, double complex (*rtot)[2][2]):             # <<<<<<<<<<<<<<
 *     cdef double k0=6.283185307179586/wavelength
 *     cdef double complex ik0=1j*k0
 */

static void __pyx_f_11Full_Matrix_Full_Matrix(struct __pyx_t_10Structural_Heterostructure *__pyx_v_HS, struct __pyx_t_10Structural_MatrixSafer *__pyx_v_AllMS, int *__pyx_v_Layer_type_to_Matrixsafe, double __pyx_v_th, double __pyx_v_wavelength, __pyx_t_double_complex (*__pyx_v_rtot)[2][2]) {
  double __pyx_v_k0;
  __pyx_t_double_complex __pyx_v_ik0;
  double __pyx_v_vy;
  double __pyx_v_vyvy;
  int __pyx_v_NLAYERS;
  int *__pyx_v_MLLENGTH;
  int **__pyx_v_MLCOMP;
  int *__pyx_v_MLREP;
  struct __pyx_t_10Structural_CLayer *__pyx_v_LR;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_v_k;
  int __pyx_v_l;
  struct __pyx_t_10Structural_CLayer __pyx_v_UpperLayer;
  struct __pyx_t_10Structural_CLayer __pyx_v_LowerLayer;
  __pyx_t_double_complex __pyx_v_PSI1[4][4];
  __pyx_t_double_complex __pyx_v_PSI2[4][4];
  __pyx_t_double_complex __pyx_v_PHI1[4][4];
  __pyx_t_double_complex __pyx_v_PHI2[4][4];
  __pyx_t_double_complex (*__pyx_v_PHIpointer_upper)[4][4];
  __pyx_t_double_complex (*__pyx_v_PSIpointer_upper)[4][4];
  CYTHON_UNUSED __pyx_t_double_complex (*__pyx_v_PHIpointer_lower)[4][4];
  __pyx_t_double_complex (*__pyx_v_PSIpointer_lower)[4][4];
  __pyx_t_double_complex __pyx_v_W[4][4];
  __pyx_t_double_complex __pyx_v_P[4][4];
  __pyx_t_double_complex __pyx_v_Pcomp[4][4];
  __pyx_t_double_complex __pyx_v_PHIcomp_start[4][4];
  __pyx_t_double_complex __pyx_v_PSIcomp_start[4][4];
  __pyx_t_double_complex __pyx_v_vzstart[4];
  __pyx_t_double_complex __pyx_v_pstart[4];
  __pyx_t_double_complex __pyx_v_p[4];
  __pyx_t_double_complex __pyx_v_vz1[4];
  __pyx_t_double_complex __pyx_v_vz2[4];
  int __pyx_v_vzfilled;
  __pyx_t_double_complex (*__pyx_v_vzpointer_lower)[4];
  __pyx_t_double_complex (*__pyx_v_vzpointer_upper)[4];
  double __pyx_v_vzvac;
  double __pyx_v_vzvz;
  __pyx_t_double_complex __pyx_v_PHIvac[4][4];
  int __pyx_v_Cap;
  int __pyx_v_Upper;
  int __pyx_v_Lower;
  __pyx_t_double_complex __pyx_v_divide;
  double __pyx_v_roughfac;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int *__pyx_t_2;
  int **__pyx_t_3;
  struct __pyx_t_10Structural_CLayer *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  long __pyx_t_9;
  __pyx_t_double_complex __pyx_t_10;
  __pyx_t_double_complex __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Full_Matrix", 0);

  /* "Full_Matrix.pyx":1163
 * 
 * cdef void Full_Matrix(Heterostructure* HS, MatrixSafer *AllMS, int* Layer_type_to_Matrixsafe, double th, double wavelength, double complex (*rtot)[2][2]):
 *     cdef double k0=6.283185307179586/wavelength             # <<<<<<<<<<<<<<
 *     cdef double complex ik0=1j*k0
 * 
 */
  if (unlikely(__pyx_v_wavelength == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1163, __pyx_L1_error)
  }
  __pyx_v_k0 = (6.283185307179586 / __pyx_v_wavelength);

  /* "Full_Matrix.pyx":1164
 * cdef void Full_Matrix(Heterostructure* HS, MatrixSafer *AllMS, int* Layer_type_to_Matrixsafe, double th, double wavelength, double complex (*rtot)[2][2]):
 *     cdef double k0=6.283185307179586/wavelength
 *     cdef double complex ik0=1j*k0             # <<<<<<<<<<<<<<
 * 
 *     cdef double vy=cos(two_pi_div_360()*th)
 */
  __pyx_v_ik0 = __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__pyx_v_k0, 0));

  /* "Full_Matrix.pyx":1166
 *     cdef double complex ik0=1j*k0
 * 
 *     cdef double vy=cos(two_pi_div_360()*th)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_vy = cos((__pyx_f_35Mathematical_Functions_Reflectivity_two_pi_div_360() * __pyx_v_th));

  /* "Full_Matrix.pyx":1171
 * 
 * 
 *     cdef double vyvy=vy*vy             # <<<<<<<<<<<<<<
 * 
 *     cdef int NLAYERS=(HS[0]).NLayers
 */
  __pyx_v_vyvy = (__pyx_v_vy * __pyx_v_vy);

  /* "Full_Matrix.pyx":1173
 *     cdef double vyvy=vy*vy
 * 
 *     cdef int NLAYERS=(HS[0]).NLayers             # <<<<<<<<<<<<<<
 *     cdef int* MLLENGTH=(HS[0]).MLLENGTH
 *     cdef int** MLCOMP=(HS[0]).MLCOMP
 */
  __pyx_t_1 = (__pyx_v_HS[0]).NLayers;
  __pyx_v_NLAYERS = __pyx_t_1;

  /* "Full_Matrix.pyx":1174
 * 
 *     cdef int NLAYERS=(HS[0]).NLayers
 *     cdef int* MLLENGTH=(HS[0]).MLLENGTH             # <<<<<<<<<<<<<<
 *     cdef int** MLCOMP=(HS[0]).MLCOMP
 *     cdef int* MLREP=(HS[0]).MLREP
 */
  __pyx_t_2 = (__pyx_v_HS[0]).MLLENGTH;
  __pyx_v_MLLENGTH = __pyx_t_2;

  /* "Full_Matrix.pyx":1175
 *     cdef int NLAYERS=(HS[0]).NLayers
 *     cdef int* MLLENGTH=(HS[0]).MLLENGTH
 *     cdef int** MLCOMP=(HS[0]).MLCOMP             # <<<<<<<<<<<<<<
 *     cdef int* MLREP=(HS[0]).MLREP
 *     cdef CLayer* LR=(HS[0]).LR
 */
  __pyx_t_3 = (__pyx_v_HS[0]).MLCOMP;
  __pyx_v_MLCOMP = __pyx_t_3;

  /* "Full_Matrix.pyx":1176
 *     cdef int* MLLENGTH=(HS[0]).MLLENGTH
 *     cdef int** MLCOMP=(HS[0]).MLCOMP
 *     cdef int* MLREP=(HS[0]).MLREP             # <<<<<<<<<<<<<<
 *     cdef CLayer* LR=(HS[0]).LR
 *     cdef int i,j,k,l
 */
  __pyx_t_2 = (__pyx_v_HS[0]).MLREP;
  __pyx_v_MLREP = __pyx_t_2;

  /* "Full_Matrix.pyx":1177
 *     cdef int** MLCOMP=(HS[0]).MLCOMP
 *     cdef int* MLREP=(HS[0]).MLREP
 *     cdef CLayer* LR=(HS[0]).LR             # <<<<<<<<<<<<<<
 *     cdef int i,j,k,l
 * 
 */
  __pyx_t_4 = (__pyx_v_HS[0]).LR;
  __pyx_v_LR = __pyx_t_4;

  /* "Full_Matrix.pyx":1211
 *     cdef double complex (*vzpointer_lower)[4]
 *     cdef double complex (*vzpointer_upper)[4]
 *     cdef double vzvac = sin(two_pi_div_360()*th)             # <<<<<<<<<<<<<<
 *     cdef double vzvz=vzvac*vzvac
 *     cdef double complex PHIvac[4][4]
 */
  __pyx_v_vzvac = sin((__pyx_f_35Mathematical_Functions_Reflectivity_two_pi_div_360() * __pyx_v_th));

  /* "Full_Matrix.pyx":1212
 *     cdef double complex (*vzpointer_upper)[4]
 *     cdef double vzvac = sin(two_pi_div_360()*th)
 *     cdef double vzvz=vzvac*vzvac             # <<<<<<<<<<<<<<
 *     cdef double complex PHIvac[4][4]
 * 
 */
  __pyx_v_vzvz = (__pyx_v_vzvac * __pyx_v_vzvac);

  /* "Full_Matrix.pyx":1215
 *     cdef double complex PHIvac[4][4]
 * 
 *     cdef int Cap=NLAYERS-1             # <<<<<<<<<<<<<<
 *     cdef int Upper, Lower
 *     cdef double complex divide
 */
  __pyx_v_Cap = (__pyx_v_NLAYERS - 1);

  /* "Full_Matrix.pyx":1218
 *     cdef int Upper, Lower
 *     cdef double complex divide
 *     PHIvac[0][0]=1             # <<<<<<<<<<<<<<
 *     PHIvac[1][0]=vzvac
 *     PHIvac[2][0]=0
 */
  ((__pyx_v_PHIvac[0])[0]) = __pyx_t_double_complex_from_parts(1, 0);

  /* "Full_Matrix.pyx":1219
 *     cdef double complex divide
 *     PHIvac[0][0]=1
 *     PHIvac[1][0]=vzvac             # <<<<<<<<<<<<<<
 *     PHIvac[2][0]=0
 *     PHIvac[3][0]=0
 */
  ((__pyx_v_PHIvac[1])[0]) = __pyx_t_double_complex_from_parts(__pyx_v_vzvac, 0);

  /* "Full_Matrix.pyx":1220
 *     PHIvac[0][0]=1
 *     PHIvac[1][0]=vzvac
 *     PHIvac[2][0]=0             # <<<<<<<<<<<<<<
 *     PHIvac[3][0]=0
 * 
 */
  ((__pyx_v_PHIvac[2])[0]) = __pyx_t_double_complex_from_parts(0, 0);

  /* "Full_Matrix.pyx":1221
 *     PHIvac[1][0]=vzvac
 *     PHIvac[2][0]=0
 *     PHIvac[3][0]=0             # <<<<<<<<<<<<<<
 * 
 *     PHIvac[0][1]=0
 */
  ((__pyx_v_PHIvac[3])[0]) = __pyx_t_double_complex_from_parts(0, 0);

  /* "Full_Matrix.pyx":1223
 *     PHIvac[3][0]=0
 * 
 *     PHIvac[0][1]=0             # <<<<<<<<<<<<<<
 *     PHIvac[1][1]=0
 *     PHIvac[2][1]=vzvac
 */
  ((__pyx_v_PHIvac[0])[1]) = __pyx_t_double_complex_from_parts(0, 0);

  /* "Full_Matrix.pyx":1224
 * 
 *     PHIvac[0][1]=0
 *     PHIvac[1][1]=0             # <<<<<<<<<<<<<<
 *     PHIvac[2][1]=vzvac
 *     PHIvac[3][1]=1
 */
  ((__pyx_v_PHIvac[1])[1]) = __pyx_t_double_complex_from_parts(0, 0);

  /* "Full_Matrix.pyx":1225
 *     PHIvac[0][1]=0
 *     PHIvac[1][1]=0
 *     PHIvac[2][1]=vzvac             # <<<<<<<<<<<<<<
 *     PHIvac[3][1]=1
 * 
 */
  ((__pyx_v_PHIvac[2])[1]) = __pyx_t_double_complex_from_parts(__pyx_v_vzvac, 0);

  /* "Full_Matrix.pyx":1226
 *     PHIvac[1][1]=0
 *     PHIvac[2][1]=vzvac
 *     PHIvac[3][1]=1             # <<<<<<<<<<<<<<
 * 
 *     PHIvac[0][2]=1
 */
  ((__pyx_v_PHIvac[3])[1]) = __pyx_t_double_complex_from_parts(1, 0);

  /* "Full_Matrix.pyx":1228
 *     PHIvac[3][1]=1
 * 
 *     PHIvac[0][2]=1             # <<<<<<<<<<<<<<
 *     PHIvac[1][2]=-vzvac
 *     PHIvac[2][2]=0
 */
  ((__pyx_v_PHIvac[0])[2]) = __pyx_t_double_complex_from_parts(1, 0);

  /* "Full_Matrix.pyx":1229
 * 
 *     PHIvac[0][2]=1
 *     PHIvac[1][2]=-vzvac             # <<<<<<<<<<<<<<
 *     PHIvac[2][2]=0
 *     PHIvac[3][2]=0
 */
  ((__pyx_v_PHIvac[1])[2]) = __pyx_t_double_complex_from_parts((-__pyx_v_vzvac), 0);

  /* "Full_Matrix.pyx":1230
 *     PHIvac[0][2]=1
 *     PHIvac[1][2]=-vzvac
 *     PHIvac[2][2]=0             # <<<<<<<<<<<<<<
 *     PHIvac[3][2]=0
 * 
 */
  ((__pyx_v_PHIvac[2])[2]) = __pyx_t_double_complex_from_parts(0, 0);

  /* "Full_Matrix.pyx":1231
 *     PHIvac[1][2]=-vzvac
 *     PHIvac[2][2]=0
 *     PHIvac[3][2]=0             # <<<<<<<<<<<<<<
 * 
 *     PHIvac[0][3]=0
 */
  ((__pyx_v_PHIvac[3])[2]) = __pyx_t_double_complex_from_parts(0, 0);

  /* "Full_Matrix.pyx":1233
 *     PHIvac[3][2]=0
 * 
 *     PHIvac[0][3]=0             # <<<<<<<<<<<<<<
 *     PHIvac[1][3]=0
 *     PHIvac[2][3]=-vzvac
 */
  ((__pyx_v_PHIvac[0])[3]) = __pyx_t_double_complex_from_parts(0, 0);

  /* "Full_Matrix.pyx":1234
 * 
 *     PHIvac[0][3]=0
 *     PHIvac[1][3]=0             # <<<<<<<<<<<<<<
 *     PHIvac[2][3]=-vzvac
 *     PHIvac[3][3]=1
 */
  ((__pyx_v_PHIvac[1])[3]) = __pyx_t_double_complex_from_parts(0, 0);

  /* "Full_Matrix.pyx":1235
 *     PHIvac[0][3]=0
 *     PHIvac[1][3]=0
 *     PHIvac[2][3]=-vzvac             # <<<<<<<<<<<<<<
 *     PHIvac[3][3]=1
 *     Lower=MLCOMP[0][0]
 */
  ((__pyx_v_PHIvac[2])[3]) = __pyx_t_double_complex_from_parts((-__pyx_v_vzvac), 0);

  /* "Full_Matrix.pyx":1236
 *     PHIvac[1][3]=0
 *     PHIvac[2][3]=-vzvac
 *     PHIvac[3][3]=1             # <<<<<<<<<<<<<<
 *     Lower=MLCOMP[0][0]
 *     LowerLayer=LR[Lower]
 */
  ((__pyx_v_PHIvac[3])[3]) = __pyx_t_double_complex_from_parts(1, 0);

  /* "Full_Matrix.pyx":1237
 *     PHIvac[2][3]=-vzvac
 *     PHIvac[3][3]=1
 *     Lower=MLCOMP[0][0]             # <<<<<<<<<<<<<<
 *     LowerLayer=LR[Lower]
 * 
 */
  __pyx_v_Lower = ((__pyx_v_MLCOMP[0])[0]);

  /* "Full_Matrix.pyx":1238
 *     PHIvac[3][3]=1
 *     Lower=MLCOMP[0][0]
 *     LowerLayer=LR[Lower]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_LowerLayer = (__pyx_v_LR[__pyx_v_Lower]);

  /* "Full_Matrix.pyx":1241
 * 
 * 
 *     Calculate_Phi_and_Psi(LowerLayer, &( AllMS[ Layer_type_to_Matrixsafe[Lower] ] ), vy, vzvz, vyvy, &vz1, &PHI1, &P)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_f_11Full_Matrix_Calculate_Phi_and_Psi(__pyx_v_LowerLayer, (&(__pyx_v_AllMS[(__pyx_v_Layer_type_to_Matrixsafe[__pyx_v_Lower])])), __pyx_v_vy, __pyx_v_vzvz, __pyx_v_vyvy, (&__pyx_v_vz1), (&__pyx_v_PHI1), (&__pyx_v_P));

  /* "Full_Matrix.pyx":1249
 * #            print(i,j,P[i][j])
 * 
 *     if(NLAYERS==1):             # <<<<<<<<<<<<<<
 *         Mult4x4_leftside(&P, &PHIvac)
 *         vz2[0]=vzvac
 */
  __pyx_t_5 = ((__pyx_v_NLAYERS == 1) != 0);
  if (__pyx_t_5) {

    /* "Full_Matrix.pyx":1250
 * 
 *     if(NLAYERS==1):
 *         Mult4x4_leftside(&P, &PHIvac)             # <<<<<<<<<<<<<<
 *         vz2[0]=vzvac
 *         vz2[1]=vzvac
 */
    __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside((&__pyx_v_P), (&__pyx_v_PHIvac));

    /* "Full_Matrix.pyx":1251
 *     if(NLAYERS==1):
 *         Mult4x4_leftside(&P, &PHIvac)
 *         vz2[0]=vzvac             # <<<<<<<<<<<<<<
 *         vz2[1]=vzvac
 *         vz2[2]=-vzvac
 */
    (__pyx_v_vz2[0]) = __pyx_t_double_complex_from_parts(__pyx_v_vzvac, 0);

    /* "Full_Matrix.pyx":1252
 *         Mult4x4_leftside(&P, &PHIvac)
 *         vz2[0]=vzvac
 *         vz2[1]=vzvac             # <<<<<<<<<<<<<<
 *         vz2[2]=-vzvac
 *         vz2[3]=-vzvac
 */
    (__pyx_v_vz2[1]) = __pyx_t_double_complex_from_parts(__pyx_v_vzvac, 0);

    /* "Full_Matrix.pyx":1253
 *         vz2[0]=vzvac
 *         vz2[1]=vzvac
 *         vz2[2]=-vzvac             # <<<<<<<<<<<<<<
 *         vz2[3]=-vzvac
 *     else:
 */
    (__pyx_v_vz2[2]) = __pyx_t_double_complex_from_parts((-__pyx_v_vzvac), 0);

    /* "Full_Matrix.pyx":1254
 *         vz2[1]=vzvac
 *         vz2[2]=-vzvac
 *         vz2[3]=-vzvac             # <<<<<<<<<<<<<<
 *     else:
 *         Upper=MLCOMP[1][0]
 */
    (__pyx_v_vz2[3]) = __pyx_t_double_complex_from_parts((-__pyx_v_vzvac), 0);

    /* "Full_Matrix.pyx":1249
 * #            print(i,j,P[i][j])
 * 
 *     if(NLAYERS==1):             # <<<<<<<<<<<<<<
 *         Mult4x4_leftside(&P, &PHIvac)
 *         vz2[0]=vzvac
 */
    goto __pyx_L3;
  }

  /* "Full_Matrix.pyx":1256
 *         vz2[3]=-vzvac
 *     else:
 *         Upper=MLCOMP[1][0]             # <<<<<<<<<<<<<<
 *         UpperLayer=LR[Upper]
 *         Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, &vz2, &PHI2, &PSI2)
 */
  /*else*/ {
    __pyx_v_Upper = ((__pyx_v_MLCOMP[1])[0]);

    /* "Full_Matrix.pyx":1257
 *     else:
 *         Upper=MLCOMP[1][0]
 *         UpperLayer=LR[Upper]             # <<<<<<<<<<<<<<
 *         Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, &vz2, &PHI2, &PSI2)
 * 
 */
    __pyx_v_UpperLayer = (__pyx_v_LR[__pyx_v_Upper]);

    /* "Full_Matrix.pyx":1258
 *         Upper=MLCOMP[1][0]
 *         UpperLayer=LR[Upper]
 *         Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, &vz2, &PHI2, &PSI2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_f_11Full_Matrix_Calculate_Phi_and_Psi(__pyx_v_UpperLayer, (&(__pyx_v_AllMS[(__pyx_v_Layer_type_to_Matrixsafe[__pyx_v_Upper])])), __pyx_v_vy, __pyx_v_vzvz, __pyx_v_vyvy, (&__pyx_v_vz2), (&__pyx_v_PHI2), (&__pyx_v_PSI2));

    /* "Full_Matrix.pyx":1262
 * 
 * 
 *         Mult4x4_leftside(&P, &PHI2)             # <<<<<<<<<<<<<<
 *         vzfilled=2
 *         for k in range(4):
 */
    __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside((&__pyx_v_P), (&__pyx_v_PHI2));

    /* "Full_Matrix.pyx":1263
 * 
 *         Mult4x4_leftside(&P, &PHI2)
 *         vzfilled=2             # <<<<<<<<<<<<<<
 *         for k in range(4):
 *             p[k] = exp(-ik0*UpperLayer.Thickness*vz2[k] )
 */
    __pyx_v_vzfilled = 2;

    /* "Full_Matrix.pyx":1264
 *         Mult4x4_leftside(&P, &PHI2)
 *         vzfilled=2
 *         for k in range(4):             # <<<<<<<<<<<<<<
 *             p[k] = exp(-ik0*UpperLayer.Thickness*vz2[k] )
 * 
 */
    for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
      __pyx_v_k = __pyx_t_1;

      /* "Full_Matrix.pyx":1265
 *         vzfilled=2
 *         for k in range(4):
 *             p[k] = exp(-ik0*UpperLayer.Thickness*vz2[k] )             # <<<<<<<<<<<<<<
 * 
 * #    print("vy ", vy)
 */
      (__pyx_v_p[__pyx_v_k]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_ik0), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_vz2[__pyx_v_k])));
    }
  }
  __pyx_L3:;

  /* "Full_Matrix.pyx":1279
 *     ######################################################
 * 
 *     roughfac =-0.5*quadr( LowerLayer.Roughness*k0)             # <<<<<<<<<<<<<<
 * 
 *     for k in range(4):
 */
  __pyx_v_roughfac = (-0.5 * __pyx_f_35Mathematical_Functions_Reflectivity_quadr((__pyx_v_LowerLayer.Roughness * __pyx_v_k0)));

  /* "Full_Matrix.pyx":1281
 *     roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 * 
 *     for k in range(4):             # <<<<<<<<<<<<<<
 *         for l in range(4):
 * 
 */
  for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
    __pyx_v_k = __pyx_t_1;

    /* "Full_Matrix.pyx":1282
 * 
 *     for k in range(4):
 *         for l in range(4):             # <<<<<<<<<<<<<<
 * 
 *             W[k][l] =exp(roughfac*cquadr(vz1[k] - vz2[l] ) )
 */
    for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
      __pyx_v_l = __pyx_t_6;

      /* "Full_Matrix.pyx":1284
 *         for l in range(4):
 * 
 *             W[k][l] =exp(roughfac*cquadr(vz1[k] - vz2[l] ) )             # <<<<<<<<<<<<<<
 *             P[k][l]*=W[k][l]
 * #    roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 */
      ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]) = exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_diff_double((__pyx_v_vz1[__pyx_v_k]), (__pyx_v_vz2[__pyx_v_l])))));

      /* "Full_Matrix.pyx":1285
 * 
 *             W[k][l] =exp(roughfac*cquadr(vz1[k] - vz2[l] ) )
 *             P[k][l]*=W[k][l]             # <<<<<<<<<<<<<<
 * #    roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 * #
 */
      __pyx_t_7 = __pyx_v_k;
      __pyx_t_8 = __pyx_v_l;
      ((__pyx_v_P[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_prod_double(((__pyx_v_P[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]));
    }
  }

  /* "Full_Matrix.pyx":1302
 * 
 * 
 *     i=1             # <<<<<<<<<<<<<<
 *     while i<NLAYERS:
 *         if(MLLENGTH[i]==1):
 */
  __pyx_v_i = 1;

  /* "Full_Matrix.pyx":1303
 * 
 *     i=1
 *     while i<NLAYERS:             # <<<<<<<<<<<<<<
 *         if(MLLENGTH[i]==1):
 *             Lower=MLCOMP[i][0]
 */
  while (1) {
    __pyx_t_5 = ((__pyx_v_i < __pyx_v_NLAYERS) != 0);
    if (!__pyx_t_5) break;

    /* "Full_Matrix.pyx":1304
 *     i=1
 *     while i<NLAYERS:
 *         if(MLLENGTH[i]==1):             # <<<<<<<<<<<<<<
 *             Lower=MLCOMP[i][0]
 *             LowerLayer=LR[ Lower ]
 */
    __pyx_t_5 = (((__pyx_v_MLLENGTH[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_5) {

      /* "Full_Matrix.pyx":1305
 *     while i<NLAYERS:
 *         if(MLLENGTH[i]==1):
 *             Lower=MLCOMP[i][0]             # <<<<<<<<<<<<<<
 *             LowerLayer=LR[ Lower ]
 * 
 */
      __pyx_v_Lower = ((__pyx_v_MLCOMP[__pyx_v_i])[0]);

      /* "Full_Matrix.pyx":1306
 *         if(MLLENGTH[i]==1):
 *             Lower=MLCOMP[i][0]
 *             LowerLayer=LR[ Lower ]             # <<<<<<<<<<<<<<
 * 
 *           #  print("lower is", Lower)
 */
      __pyx_v_LowerLayer = (__pyx_v_LR[__pyx_v_Lower]);

      /* "Full_Matrix.pyx":1310
 *           #  print("lower is", Lower)
 * 
 *             if(vzfilled==2):             # <<<<<<<<<<<<<<
 *                 vzpointer_lower=&vz2
 *                 vzpointer_upper=&vz1
 */
      __pyx_t_5 = ((__pyx_v_vzfilled == 2) != 0);
      if (__pyx_t_5) {

        /* "Full_Matrix.pyx":1311
 * 
 *             if(vzfilled==2):
 *                 vzpointer_lower=&vz2             # <<<<<<<<<<<<<<
 *                 vzpointer_upper=&vz1
 *                 PHIpointer_lower=&PHI2
 */
        __pyx_v_vzpointer_lower = (&__pyx_v_vz2);

        /* "Full_Matrix.pyx":1312
 *             if(vzfilled==2):
 *                 vzpointer_lower=&vz2
 *                 vzpointer_upper=&vz1             # <<<<<<<<<<<<<<
 *                 PHIpointer_lower=&PHI2
 *                 PHIpointer_upper=&PHI1
 */
        __pyx_v_vzpointer_upper = (&__pyx_v_vz1);

        /* "Full_Matrix.pyx":1313
 *                 vzpointer_lower=&vz2
 *                 vzpointer_upper=&vz1
 *                 PHIpointer_lower=&PHI2             # <<<<<<<<<<<<<<
 *                 PHIpointer_upper=&PHI1
 *                 PSIpointer_lower=&PSI2
 */
        __pyx_v_PHIpointer_lower = (&__pyx_v_PHI2);

        /* "Full_Matrix.pyx":1314
 *                 vzpointer_upper=&vz1
 *                 PHIpointer_lower=&PHI2
 *                 PHIpointer_upper=&PHI1             # <<<<<<<<<<<<<<
 *                 PSIpointer_lower=&PSI2
 *                 PSIpointer_upper=&PSI1
 */
        __pyx_v_PHIpointer_upper = (&__pyx_v_PHI1);

        /* "Full_Matrix.pyx":1315
 *                 PHIpointer_lower=&PHI2
 *                 PHIpointer_upper=&PHI1
 *                 PSIpointer_lower=&PSI2             # <<<<<<<<<<<<<<
 *                 PSIpointer_upper=&PSI1
 *                 vzfilled=1
 */
        __pyx_v_PSIpointer_lower = (&__pyx_v_PSI2);

        /* "Full_Matrix.pyx":1316
 *                 PHIpointer_upper=&PHI1
 *                 PSIpointer_lower=&PSI2
 *                 PSIpointer_upper=&PSI1             # <<<<<<<<<<<<<<
 *                 vzfilled=1
 * 
 */
        __pyx_v_PSIpointer_upper = (&__pyx_v_PSI1);

        /* "Full_Matrix.pyx":1317
 *                 PSIpointer_lower=&PSI2
 *                 PSIpointer_upper=&PSI1
 *                 vzfilled=1             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
        __pyx_v_vzfilled = 1;

        /* "Full_Matrix.pyx":1310
 *           #  print("lower is", Lower)
 * 
 *             if(vzfilled==2):             # <<<<<<<<<<<<<<
 *                 vzpointer_lower=&vz2
 *                 vzpointer_upper=&vz1
 */
        goto __pyx_L13;
      }

      /* "Full_Matrix.pyx":1320
 * 
 *             else:
 *                 vzpointer_lower=&vz1             # <<<<<<<<<<<<<<
 *                 vzpointer_upper=&vz2
 *                 PHIpointer_lower=&PHI1
 */
      /*else*/ {
        __pyx_v_vzpointer_lower = (&__pyx_v_vz1);

        /* "Full_Matrix.pyx":1321
 *             else:
 *                 vzpointer_lower=&vz1
 *                 vzpointer_upper=&vz2             # <<<<<<<<<<<<<<
 *                 PHIpointer_lower=&PHI1
 *                 PHIpointer_upper=&PHI2
 */
        __pyx_v_vzpointer_upper = (&__pyx_v_vz2);

        /* "Full_Matrix.pyx":1322
 *                 vzpointer_lower=&vz1
 *                 vzpointer_upper=&vz2
 *                 PHIpointer_lower=&PHI1             # <<<<<<<<<<<<<<
 *                 PHIpointer_upper=&PHI2
 *                 PSIpointer_lower=&PSI1
 */
        __pyx_v_PHIpointer_lower = (&__pyx_v_PHI1);

        /* "Full_Matrix.pyx":1323
 *                 vzpointer_upper=&vz2
 *                 PHIpointer_lower=&PHI1
 *                 PHIpointer_upper=&PHI2             # <<<<<<<<<<<<<<
 *                 PSIpointer_lower=&PSI1
 *                 PSIpointer_upper=&PSI2
 */
        __pyx_v_PHIpointer_upper = (&__pyx_v_PHI2);

        /* "Full_Matrix.pyx":1324
 *                 PHIpointer_lower=&PHI1
 *                 PHIpointer_upper=&PHI2
 *                 PSIpointer_lower=&PSI1             # <<<<<<<<<<<<<<
 *                 PSIpointer_upper=&PSI2
 *                 vzfilled=2
 */
        __pyx_v_PSIpointer_lower = (&__pyx_v_PSI1);

        /* "Full_Matrix.pyx":1325
 *                 PHIpointer_upper=&PHI2
 *                 PSIpointer_lower=&PSI1
 *                 PSIpointer_upper=&PSI2             # <<<<<<<<<<<<<<
 *                 vzfilled=2
 * 
 */
        __pyx_v_PSIpointer_upper = (&__pyx_v_PSI2);

        /* "Full_Matrix.pyx":1326
 *                 PSIpointer_lower=&PSI1
 *                 PSIpointer_upper=&PSI2
 *                 vzfilled=2             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_v_vzfilled = 2;
      }
      __pyx_L13:;

      /* "Full_Matrix.pyx":1329
 * 
 * 
 *             Mult4x4_leftside_diag(&P, &p)             # <<<<<<<<<<<<<<
 *             if(i!=Cap):
 *                 Upper=MLCOMP[i+1][0]
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside_diag((&__pyx_v_P), (&__pyx_v_p));

      /* "Full_Matrix.pyx":1330
 * 
 *             Mult4x4_leftside_diag(&P, &p)
 *             if(i!=Cap):             # <<<<<<<<<<<<<<
 *                 Upper=MLCOMP[i+1][0]
 *                 UpperLayer=LR[ Upper ]
 */
      __pyx_t_5 = ((__pyx_v_i != __pyx_v_Cap) != 0);
      if (__pyx_t_5) {

        /* "Full_Matrix.pyx":1331
 *             Mult4x4_leftside_diag(&P, &p)
 *             if(i!=Cap):
 *                 Upper=MLCOMP[i+1][0]             # <<<<<<<<<<<<<<
 *                 UpperLayer=LR[ Upper ]
 *                 Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)
 */
        __pyx_v_Upper = ((__pyx_v_MLCOMP[(__pyx_v_i + 1)])[0]);

        /* "Full_Matrix.pyx":1332
 *             if(i!=Cap):
 *                 Upper=MLCOMP[i+1][0]
 *                 UpperLayer=LR[ Upper ]             # <<<<<<<<<<<<<<
 *                 Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)
 * 
 */
        __pyx_v_UpperLayer = (__pyx_v_LR[__pyx_v_Upper]);

        /* "Full_Matrix.pyx":1333
 *                 Upper=MLCOMP[i+1][0]
 *                 UpperLayer=LR[ Upper ]
 *                 Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_f_11Full_Matrix_Calculate_Phi_and_Psi(__pyx_v_UpperLayer, (&(__pyx_v_AllMS[(__pyx_v_Layer_type_to_Matrixsafe[__pyx_v_Upper])])), __pyx_v_vy, __pyx_v_vzvz, __pyx_v_vyvy, __pyx_v_vzpointer_upper, __pyx_v_PHIpointer_upper, __pyx_v_PSIpointer_upper);

        /* "Full_Matrix.pyx":1339
 * 
 * 
 *                 Mult4x4_leftside(PSIpointer_lower, PHIpointer_upper)             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside(__pyx_v_PSIpointer_lower, __pyx_v_PHIpointer_upper);

        /* "Full_Matrix.pyx":1330
 * 
 *             Mult4x4_leftside_diag(&P, &p)
 *             if(i!=Cap):             # <<<<<<<<<<<<<<
 *                 Upper=MLCOMP[i+1][0]
 *                 UpperLayer=LR[ Upper ]
 */
        goto __pyx_L14;
      }

      /* "Full_Matrix.pyx":1343
 *             else:
 * 
 *                 Mult4x4_leftside(PSIpointer_lower, &PHIvac)             # <<<<<<<<<<<<<<
 *                 (vzpointer_upper[0])[0]=vzvac
 *                 (vzpointer_upper[0])[1]=vzvac
 */
      /*else*/ {
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside(__pyx_v_PSIpointer_lower, (&__pyx_v_PHIvac));

        /* "Full_Matrix.pyx":1344
 * 
 *                 Mult4x4_leftside(PSIpointer_lower, &PHIvac)
 *                 (vzpointer_upper[0])[0]=vzvac             # <<<<<<<<<<<<<<
 *                 (vzpointer_upper[0])[1]=vzvac
 *                 (vzpointer_upper[0])[2]=-vzvac
 */
        ((__pyx_v_vzpointer_upper[0])[0]) = __pyx_t_double_complex_from_parts(__pyx_v_vzvac, 0);

        /* "Full_Matrix.pyx":1345
 *                 Mult4x4_leftside(PSIpointer_lower, &PHIvac)
 *                 (vzpointer_upper[0])[0]=vzvac
 *                 (vzpointer_upper[0])[1]=vzvac             # <<<<<<<<<<<<<<
 *                 (vzpointer_upper[0])[2]=-vzvac
 *                 (vzpointer_upper[0])[3]=-vzvac
 */
        ((__pyx_v_vzpointer_upper[0])[1]) = __pyx_t_double_complex_from_parts(__pyx_v_vzvac, 0);

        /* "Full_Matrix.pyx":1346
 *                 (vzpointer_upper[0])[0]=vzvac
 *                 (vzpointer_upper[0])[1]=vzvac
 *                 (vzpointer_upper[0])[2]=-vzvac             # <<<<<<<<<<<<<<
 *                 (vzpointer_upper[0])[3]=-vzvac
 * #                print("Cap vz")
 */
        ((__pyx_v_vzpointer_upper[0])[2]) = __pyx_t_double_complex_from_parts((-__pyx_v_vzvac), 0);

        /* "Full_Matrix.pyx":1347
 *                 (vzpointer_upper[0])[1]=vzvac
 *                 (vzpointer_upper[0])[2]=-vzvac
 *                 (vzpointer_upper[0])[3]=-vzvac             # <<<<<<<<<<<<<<
 * #                print("Cap vz")
 * #                for k in range(4):
 */
        ((__pyx_v_vzpointer_upper[0])[3]) = __pyx_t_double_complex_from_parts((-__pyx_v_vzvac), 0);
      }
      __pyx_L14:;

      /* "Full_Matrix.pyx":1354
 * 
 *             ###############################
 *             roughfac =-0.5*quadr( LowerLayer.Roughness*k0)             # <<<<<<<<<<<<<<
 * 
 *             for k in range(4):
 */
      __pyx_v_roughfac = (-0.5 * __pyx_f_35Mathematical_Functions_Reflectivity_quadr((__pyx_v_LowerLayer.Roughness * __pyx_v_k0)));

      /* "Full_Matrix.pyx":1356
 *             roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 * 
 *             for k in range(4):             # <<<<<<<<<<<<<<
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )
 */
      for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
        __pyx_v_k = __pyx_t_1;

        /* "Full_Matrix.pyx":1357
 * 
 *             for k in range(4):
 *                 for l in range(4):             # <<<<<<<<<<<<<<
 *                     W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )
 *                     (PSIpointer_lower[0])[k][l]*=W[k][l]
 */
        for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
          __pyx_v_l = __pyx_t_6;

          /* "Full_Matrix.pyx":1358
 *             for k in range(4):
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )             # <<<<<<<<<<<<<<
 *                     (PSIpointer_lower[0])[k][l]*=W[k][l]
 * #            roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 */
          ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]) = exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_diff_double(((__pyx_v_vzpointer_lower[0])[__pyx_v_k]), ((__pyx_v_vzpointer_upper[0])[__pyx_v_l])))));

          /* "Full_Matrix.pyx":1359
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )
 *                     (PSIpointer_lower[0])[k][l]*=W[k][l]             # <<<<<<<<<<<<<<
 * #            roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 * #            for k in range(4):
 */
          __pyx_t_9 = 0;
          __pyx_t_7 = __pyx_v_k;
          __pyx_t_8 = __pyx_v_l;
          (((__pyx_v_PSIpointer_lower[__pyx_t_9])[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_prod_double((((__pyx_v_PSIpointer_lower[__pyx_t_9])[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]));
        }
      }

      /* "Full_Matrix.pyx":1379
 *             ###############################
 * 
 *             Mult4x4_leftside(&P, PSIpointer_lower)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside((&__pyx_v_P), __pyx_v_PSIpointer_lower);

      /* "Full_Matrix.pyx":1384
 * 
 * 
 *             for k in range(4):             # <<<<<<<<<<<<<<
 *                 p[k] = exp(-ik0*UpperLayer.Thickness*(vzpointer_upper[0])[k] )
 *         else:
 */
      for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
        __pyx_v_k = __pyx_t_1;

        /* "Full_Matrix.pyx":1385
 * 
 *             for k in range(4):
 *                 p[k] = exp(-ik0*UpperLayer.Thickness*(vzpointer_upper[0])[k] )             # <<<<<<<<<<<<<<
 *         else:
 *             ##Copy data from the recent layer
 */
        (__pyx_v_p[__pyx_v_k]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_ik0), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), ((__pyx_v_vzpointer_upper[0])[__pyx_v_k])));
      }

      /* "Full_Matrix.pyx":1304
 *     i=1
 *     while i<NLAYERS:
 *         if(MLLENGTH[i]==1):             # <<<<<<<<<<<<<<
 *             Lower=MLCOMP[i][0]
 *             LowerLayer=LR[ Lower ]
 */
      goto __pyx_L12;
    }

    /* "Full_Matrix.pyx":1390
 * 
 * 
 *             if(vzfilled==1):             # <<<<<<<<<<<<<<
 * #                ###
 * #                NormalizePHI(&PHI1)
 */
    /*else*/ {
      __pyx_t_5 = ((__pyx_v_vzfilled == 1) != 0);
      if (__pyx_t_5) {

        /* "Full_Matrix.pyx":1395
 * #                NormalizePSI(&PSI1)
 * #                ###
 *                 for k in range(4):             # <<<<<<<<<<<<<<
 *                     for l in range(4):
 *                         PHIcomp_start[k][l] = PHI1[k][l]
 */
        for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
          __pyx_v_k = __pyx_t_1;

          /* "Full_Matrix.pyx":1396
 * #                ###
 *                 for k in range(4):
 *                     for l in range(4):             # <<<<<<<<<<<<<<
 *                         PHIcomp_start[k][l] = PHI1[k][l]
 *                         PSIcomp_start[k][l] = PSI1[k][l]
 */
          for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
            __pyx_v_l = __pyx_t_6;

            /* "Full_Matrix.pyx":1397
 *                 for k in range(4):
 *                     for l in range(4):
 *                         PHIcomp_start[k][l] = PHI1[k][l]             # <<<<<<<<<<<<<<
 *                         PSIcomp_start[k][l] = PSI1[k][l]
 *                         Pcomp[k][l] = PSI1[k][l]
 */
            ((__pyx_v_PHIcomp_start[__pyx_v_k])[__pyx_v_l]) = ((__pyx_v_PHI1[__pyx_v_k])[__pyx_v_l]);

            /* "Full_Matrix.pyx":1398
 *                     for l in range(4):
 *                         PHIcomp_start[k][l] = PHI1[k][l]
 *                         PSIcomp_start[k][l] = PSI1[k][l]             # <<<<<<<<<<<<<<
 *                         Pcomp[k][l] = PSI1[k][l]
 *                     vzstart[k]=vz1[k]
 */
            ((__pyx_v_PSIcomp_start[__pyx_v_k])[__pyx_v_l]) = ((__pyx_v_PSI1[__pyx_v_k])[__pyx_v_l]);

            /* "Full_Matrix.pyx":1399
 *                         PHIcomp_start[k][l] = PHI1[k][l]
 *                         PSIcomp_start[k][l] = PSI1[k][l]
 *                         Pcomp[k][l] = PSI1[k][l]             # <<<<<<<<<<<<<<
 *                     vzstart[k]=vz1[k]
 *                     pstart[k]=p[k]
 */
            ((__pyx_v_Pcomp[__pyx_v_k])[__pyx_v_l]) = ((__pyx_v_PSI1[__pyx_v_k])[__pyx_v_l]);
          }

          /* "Full_Matrix.pyx":1400
 *                         PSIcomp_start[k][l] = PSI1[k][l]
 *                         Pcomp[k][l] = PSI1[k][l]
 *                     vzstart[k]=vz1[k]             # <<<<<<<<<<<<<<
 *                     pstart[k]=p[k]
 *             else:
 */
          (__pyx_v_vzstart[__pyx_v_k]) = (__pyx_v_vz1[__pyx_v_k]);

          /* "Full_Matrix.pyx":1401
 *                         Pcomp[k][l] = PSI1[k][l]
 *                     vzstart[k]=vz1[k]
 *                     pstart[k]=p[k]             # <<<<<<<<<<<<<<
 *             else:
 * #                ###
 */
          (__pyx_v_pstart[__pyx_v_k]) = (__pyx_v_p[__pyx_v_k]);
        }

        /* "Full_Matrix.pyx":1390
 * 
 * 
 *             if(vzfilled==1):             # <<<<<<<<<<<<<<
 * #                ###
 * #                NormalizePHI(&PHI1)
 */
        goto __pyx_L21;
      }

      /* "Full_Matrix.pyx":1407
 * #                NormalizePSI(&PSI2)
 * #                ###
 *                 for k in range(4):             # <<<<<<<<<<<<<<
 *                     for l in range(4):
 *                         PHIcomp_start[k][l] = PHI2[k][l]
 */
      /*else*/ {
        for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
          __pyx_v_k = __pyx_t_1;

          /* "Full_Matrix.pyx":1408
 * #                ###
 *                 for k in range(4):
 *                     for l in range(4):             # <<<<<<<<<<<<<<
 *                         PHIcomp_start[k][l] = PHI2[k][l]
 *                         PSIcomp_start[k][l] = PSI2[k][l]
 */
          for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
            __pyx_v_l = __pyx_t_6;

            /* "Full_Matrix.pyx":1409
 *                 for k in range(4):
 *                     for l in range(4):
 *                         PHIcomp_start[k][l] = PHI2[k][l]             # <<<<<<<<<<<<<<
 *                         PSIcomp_start[k][l] = PSI2[k][l]
 *                         Pcomp[k][l] = PSI2[k][l]
 */
            ((__pyx_v_PHIcomp_start[__pyx_v_k])[__pyx_v_l]) = ((__pyx_v_PHI2[__pyx_v_k])[__pyx_v_l]);

            /* "Full_Matrix.pyx":1410
 *                     for l in range(4):
 *                         PHIcomp_start[k][l] = PHI2[k][l]
 *                         PSIcomp_start[k][l] = PSI2[k][l]             # <<<<<<<<<<<<<<
 *                         Pcomp[k][l] = PSI2[k][l]
 *                     vzstart[k]=vz2[k]
 */
            ((__pyx_v_PSIcomp_start[__pyx_v_k])[__pyx_v_l]) = ((__pyx_v_PSI2[__pyx_v_k])[__pyx_v_l]);

            /* "Full_Matrix.pyx":1411
 *                         PHIcomp_start[k][l] = PHI2[k][l]
 *                         PSIcomp_start[k][l] = PSI2[k][l]
 *                         Pcomp[k][l] = PSI2[k][l]             # <<<<<<<<<<<<<<
 *                     vzstart[k]=vz2[k]
 *                     pstart[k]=p[k]
 */
            ((__pyx_v_Pcomp[__pyx_v_k])[__pyx_v_l]) = ((__pyx_v_PSI2[__pyx_v_k])[__pyx_v_l]);
          }

          /* "Full_Matrix.pyx":1412
 *                         PSIcomp_start[k][l] = PSI2[k][l]
 *                         Pcomp[k][l] = PSI2[k][l]
 *                     vzstart[k]=vz2[k]             # <<<<<<<<<<<<<<
 *                     pstart[k]=p[k]
 * 
 */
          (__pyx_v_vzstart[__pyx_v_k]) = (__pyx_v_vz2[__pyx_v_k]);

          /* "Full_Matrix.pyx":1413
 *                         Pcomp[k][l] = PSI2[k][l]
 *                     vzstart[k]=vz2[k]
 *                     pstart[k]=p[k]             # <<<<<<<<<<<<<<
 * 
 *             Lower=MLCOMP[i][0]
 */
          (__pyx_v_pstart[__pyx_v_k]) = (__pyx_v_p[__pyx_v_k]);
        }
      }
      __pyx_L21:;

      /* "Full_Matrix.pyx":1415
 *                     pstart[k]=p[k]
 * 
 *             Lower=MLCOMP[i][0]             # <<<<<<<<<<<<<<
 *             LowerLayer=LR[ Lower ]
 *             if(vzfilled==2):
 */
      __pyx_v_Lower = ((__pyx_v_MLCOMP[__pyx_v_i])[0]);

      /* "Full_Matrix.pyx":1416
 * 
 *             Lower=MLCOMP[i][0]
 *             LowerLayer=LR[ Lower ]             # <<<<<<<<<<<<<<
 *             if(vzfilled==2):
 *                 vzpointer_lower=&vz2
 */
      __pyx_v_LowerLayer = (__pyx_v_LR[__pyx_v_Lower]);

      /* "Full_Matrix.pyx":1417
 *             Lower=MLCOMP[i][0]
 *             LowerLayer=LR[ Lower ]
 *             if(vzfilled==2):             # <<<<<<<<<<<<<<
 *                 vzpointer_lower=&vz2
 *                 vzpointer_upper=&vz1
 */
      __pyx_t_5 = ((__pyx_v_vzfilled == 2) != 0);
      if (__pyx_t_5) {

        /* "Full_Matrix.pyx":1418
 *             LowerLayer=LR[ Lower ]
 *             if(vzfilled==2):
 *                 vzpointer_lower=&vz2             # <<<<<<<<<<<<<<
 *                 vzpointer_upper=&vz1
 *                 PHIpointer_lower=&PHI2
 */
        __pyx_v_vzpointer_lower = (&__pyx_v_vz2);

        /* "Full_Matrix.pyx":1419
 *             if(vzfilled==2):
 *                 vzpointer_lower=&vz2
 *                 vzpointer_upper=&vz1             # <<<<<<<<<<<<<<
 *                 PHIpointer_lower=&PHI2
 *                 PHIpointer_upper=&PHI1
 */
        __pyx_v_vzpointer_upper = (&__pyx_v_vz1);

        /* "Full_Matrix.pyx":1420
 *                 vzpointer_lower=&vz2
 *                 vzpointer_upper=&vz1
 *                 PHIpointer_lower=&PHI2             # <<<<<<<<<<<<<<
 *                 PHIpointer_upper=&PHI1
 *                 PSIpointer_lower=&PSI2
 */
        __pyx_v_PHIpointer_lower = (&__pyx_v_PHI2);

        /* "Full_Matrix.pyx":1421
 *                 vzpointer_upper=&vz1
 *                 PHIpointer_lower=&PHI2
 *                 PHIpointer_upper=&PHI1             # <<<<<<<<<<<<<<
 *                 PSIpointer_lower=&PSI2
 *                 PSIpointer_upper=&PSI1
 */
        __pyx_v_PHIpointer_upper = (&__pyx_v_PHI1);

        /* "Full_Matrix.pyx":1422
 *                 PHIpointer_lower=&PHI2
 *                 PHIpointer_upper=&PHI1
 *                 PSIpointer_lower=&PSI2             # <<<<<<<<<<<<<<
 *                 PSIpointer_upper=&PSI1
 *                 vzfilled=1
 */
        __pyx_v_PSIpointer_lower = (&__pyx_v_PSI2);

        /* "Full_Matrix.pyx":1423
 *                 PHIpointer_upper=&PHI1
 *                 PSIpointer_lower=&PSI2
 *                 PSIpointer_upper=&PSI1             # <<<<<<<<<<<<<<
 *                 vzfilled=1
 * 
 */
        __pyx_v_PSIpointer_upper = (&__pyx_v_PSI1);

        /* "Full_Matrix.pyx":1424
 *                 PSIpointer_lower=&PSI2
 *                 PSIpointer_upper=&PSI1
 *                 vzfilled=1             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
        __pyx_v_vzfilled = 1;

        /* "Full_Matrix.pyx":1417
 *             Lower=MLCOMP[i][0]
 *             LowerLayer=LR[ Lower ]
 *             if(vzfilled==2):             # <<<<<<<<<<<<<<
 *                 vzpointer_lower=&vz2
 *                 vzpointer_upper=&vz1
 */
        goto __pyx_L30;
      }

      /* "Full_Matrix.pyx":1427
 * 
 *             else:
 *                 vzpointer_lower=&vz1             # <<<<<<<<<<<<<<
 *                 vzpointer_upper=&vz2
 *                 PHIpointer_lower=&PHI1
 */
      /*else*/ {
        __pyx_v_vzpointer_lower = (&__pyx_v_vz1);

        /* "Full_Matrix.pyx":1428
 *             else:
 *                 vzpointer_lower=&vz1
 *                 vzpointer_upper=&vz2             # <<<<<<<<<<<<<<
 *                 PHIpointer_lower=&PHI1
 *                 PHIpointer_upper=&PHI2
 */
        __pyx_v_vzpointer_upper = (&__pyx_v_vz2);

        /* "Full_Matrix.pyx":1429
 *                 vzpointer_lower=&vz1
 *                 vzpointer_upper=&vz2
 *                 PHIpointer_lower=&PHI1             # <<<<<<<<<<<<<<
 *                 PHIpointer_upper=&PHI2
 *                 PSIpointer_lower=&PSI1
 */
        __pyx_v_PHIpointer_lower = (&__pyx_v_PHI1);

        /* "Full_Matrix.pyx":1430
 *                 vzpointer_upper=&vz2
 *                 PHIpointer_lower=&PHI1
 *                 PHIpointer_upper=&PHI2             # <<<<<<<<<<<<<<
 *                 PSIpointer_lower=&PSI1
 *                 PSIpointer_upper=&PSI2
 */
        __pyx_v_PHIpointer_upper = (&__pyx_v_PHI2);

        /* "Full_Matrix.pyx":1431
 *                 PHIpointer_lower=&PHI1
 *                 PHIpointer_upper=&PHI2
 *                 PSIpointer_lower=&PSI1             # <<<<<<<<<<<<<<
 *                 PSIpointer_upper=&PSI2
 *                 vzfilled=2
 */
        __pyx_v_PSIpointer_lower = (&__pyx_v_PSI1);

        /* "Full_Matrix.pyx":1432
 *                 PHIpointer_upper=&PHI2
 *                 PSIpointer_lower=&PSI1
 *                 PSIpointer_upper=&PSI2             # <<<<<<<<<<<<<<
 *                 vzfilled=2
 * 
 */
        __pyx_v_PSIpointer_upper = (&__pyx_v_PSI2);

        /* "Full_Matrix.pyx":1433
 *                 PSIpointer_lower=&PSI1
 *                 PSIpointer_upper=&PSI2
 *                 vzfilled=2             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_v_vzfilled = 2;
      }
      __pyx_L30:;

      /* "Full_Matrix.pyx":1436
 * 
 * 
 *             Upper=MLCOMP[i][1]             # <<<<<<<<<<<<<<
 *             UpperLayer=LR[Upper]
 *             Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)
 */
      __pyx_v_Upper = ((__pyx_v_MLCOMP[__pyx_v_i])[1]);

      /* "Full_Matrix.pyx":1437
 * 
 *             Upper=MLCOMP[i][1]
 *             UpperLayer=LR[Upper]             # <<<<<<<<<<<<<<
 *             Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)
 * #            ###
 */
      __pyx_v_UpperLayer = (__pyx_v_LR[__pyx_v_Upper]);

      /* "Full_Matrix.pyx":1438
 *             Upper=MLCOMP[i][1]
 *             UpperLayer=LR[Upper]
 *             Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)             # <<<<<<<<<<<<<<
 * #            ###
 * #            NormalizePHI(PHIpointer_upper)
 */
      __pyx_f_11Full_Matrix_Calculate_Phi_and_Psi(__pyx_v_UpperLayer, (&(__pyx_v_AllMS[(__pyx_v_Layer_type_to_Matrixsafe[__pyx_v_Upper])])), __pyx_v_vy, __pyx_v_vzvz, __pyx_v_vyvy, __pyx_v_vzpointer_upper, __pyx_v_PHIpointer_upper, __pyx_v_PSIpointer_upper);

      /* "Full_Matrix.pyx":1444
 * #            ###
 * 
 *             for k in range(4):             # <<<<<<<<<<<<<<
 *                 p[k] = exp(-ik0*UpperLayer.Thickness*(vzpointer_upper[0])[k] )
 * 
 */
      for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
        __pyx_v_k = __pyx_t_1;

        /* "Full_Matrix.pyx":1445
 * 
 *             for k in range(4):
 *                 p[k] = exp(-ik0*UpperLayer.Thickness*(vzpointer_upper[0])[k] )             # <<<<<<<<<<<<<<
 * 
 *             Mult4x4_leftside(&Pcomp, PHIpointer_upper)
 */
        (__pyx_v_p[__pyx_v_k]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_ik0), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), ((__pyx_v_vzpointer_upper[0])[__pyx_v_k])));
      }

      /* "Full_Matrix.pyx":1447
 *                 p[k] = exp(-ik0*UpperLayer.Thickness*(vzpointer_upper[0])[k] )
 * 
 *             Mult4x4_leftside(&Pcomp, PHIpointer_upper)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside((&__pyx_v_Pcomp), __pyx_v_PHIpointer_upper);

      /* "Full_Matrix.pyx":1455
 * #                    W[k][l] =exp(roughfac*cquadr(vz1[k] - vz2[l] ) )
 * #                    Pcomp[k][l]*=W[k][l]
 *             roughfac =-0.5*quadr( LowerLayer.Roughness*k0)             # <<<<<<<<<<<<<<
 *             for k in range(4):
 *                 for l in range(4):
 */
      __pyx_v_roughfac = (-0.5 * __pyx_f_35Mathematical_Functions_Reflectivity_quadr((__pyx_v_LowerLayer.Roughness * __pyx_v_k0)));

      /* "Full_Matrix.pyx":1456
 * #                    Pcomp[k][l]*=W[k][l]
 *             roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 *             for k in range(4):             # <<<<<<<<<<<<<<
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( vzstart[k] - (vzpointer_upper[0])[l] ) )
 */
      for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
        __pyx_v_k = __pyx_t_1;

        /* "Full_Matrix.pyx":1457
 *             roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 *             for k in range(4):
 *                 for l in range(4):             # <<<<<<<<<<<<<<
 *                     W[k][l] =exp(roughfac*cquadr( vzstart[k] - (vzpointer_upper[0])[l] ) )
 *                     Pcomp[k][l]*=W[k][l]
 */
        for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
          __pyx_v_l = __pyx_t_6;

          /* "Full_Matrix.pyx":1458
 *             for k in range(4):
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( vzstart[k] - (vzpointer_upper[0])[l] ) )             # <<<<<<<<<<<<<<
 *                     Pcomp[k][l]*=W[k][l]
 * 
 */
          ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]) = exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_diff_double((__pyx_v_vzstart[__pyx_v_k]), ((__pyx_v_vzpointer_upper[0])[__pyx_v_l])))));

          /* "Full_Matrix.pyx":1459
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( vzstart[k] - (vzpointer_upper[0])[l] ) )
 *                     Pcomp[k][l]*=W[k][l]             # <<<<<<<<<<<<<<
 * 
 *             j=1
 */
          __pyx_t_7 = __pyx_v_k;
          __pyx_t_8 = __pyx_v_l;
          ((__pyx_v_Pcomp[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_prod_double(((__pyx_v_Pcomp[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]));
        }
      }

      /* "Full_Matrix.pyx":1461
 *                     Pcomp[k][l]*=W[k][l]
 * 
 *             j=1             # <<<<<<<<<<<<<<
 *             while j<( MLLENGTH[i]-1 ):
 *                 Lower=MLCOMP[i][j]
 */
      __pyx_v_j = 1;

      /* "Full_Matrix.pyx":1462
 * 
 *             j=1
 *             while j<( MLLENGTH[i]-1 ):             # <<<<<<<<<<<<<<
 *                 Lower=MLCOMP[i][j]
 *                 Upper=MLCOMP[i][(j+1)]
 */
      while (1) {
        __pyx_t_5 = ((__pyx_v_j < ((__pyx_v_MLLENGTH[__pyx_v_i]) - 1)) != 0);
        if (!__pyx_t_5) break;

        /* "Full_Matrix.pyx":1463
 *             j=1
 *             while j<( MLLENGTH[i]-1 ):
 *                 Lower=MLCOMP[i][j]             # <<<<<<<<<<<<<<
 *                 Upper=MLCOMP[i][(j+1)]
 *                 j+=1
 */
        __pyx_v_Lower = ((__pyx_v_MLCOMP[__pyx_v_i])[__pyx_v_j]);

        /* "Full_Matrix.pyx":1464
 *             while j<( MLLENGTH[i]-1 ):
 *                 Lower=MLCOMP[i][j]
 *                 Upper=MLCOMP[i][(j+1)]             # <<<<<<<<<<<<<<
 *                 j+=1
 *                 UpperLayer=LR[ Upper ]
 */
        __pyx_v_Upper = ((__pyx_v_MLCOMP[__pyx_v_i])[(__pyx_v_j + 1)]);

        /* "Full_Matrix.pyx":1465
 *                 Lower=MLCOMP[i][j]
 *                 Upper=MLCOMP[i][(j+1)]
 *                 j+=1             # <<<<<<<<<<<<<<
 *                 UpperLayer=LR[ Upper ]
 *                 LowerLayer=LR[ Lower ]
 */
        __pyx_v_j = (__pyx_v_j + 1);

        /* "Full_Matrix.pyx":1466
 *                 Upper=MLCOMP[i][(j+1)]
 *                 j+=1
 *                 UpperLayer=LR[ Upper ]             # <<<<<<<<<<<<<<
 *                 LowerLayer=LR[ Lower ]
 *                 if(vzfilled==2):
 */
        __pyx_v_UpperLayer = (__pyx_v_LR[__pyx_v_Upper]);

        /* "Full_Matrix.pyx":1467
 *                 j+=1
 *                 UpperLayer=LR[ Upper ]
 *                 LowerLayer=LR[ Lower ]             # <<<<<<<<<<<<<<
 *                 if(vzfilled==2):
 *                     vzpointer_lower=&vz2
 */
        __pyx_v_LowerLayer = (__pyx_v_LR[__pyx_v_Lower]);

        /* "Full_Matrix.pyx":1468
 *                 UpperLayer=LR[ Upper ]
 *                 LowerLayer=LR[ Lower ]
 *                 if(vzfilled==2):             # <<<<<<<<<<<<<<
 *                     vzpointer_lower=&vz2
 *                     vzpointer_upper=&vz1
 */
        __pyx_t_5 = ((__pyx_v_vzfilled == 2) != 0);
        if (__pyx_t_5) {

          /* "Full_Matrix.pyx":1469
 *                 LowerLayer=LR[ Lower ]
 *                 if(vzfilled==2):
 *                     vzpointer_lower=&vz2             # <<<<<<<<<<<<<<
 *                     vzpointer_upper=&vz1
 *                     PHIpointer_lower=&PHI2
 */
          __pyx_v_vzpointer_lower = (&__pyx_v_vz2);

          /* "Full_Matrix.pyx":1470
 *                 if(vzfilled==2):
 *                     vzpointer_lower=&vz2
 *                     vzpointer_upper=&vz1             # <<<<<<<<<<<<<<
 *                     PHIpointer_lower=&PHI2
 *                     PHIpointer_upper=&PHI1
 */
          __pyx_v_vzpointer_upper = (&__pyx_v_vz1);

          /* "Full_Matrix.pyx":1471
 *                     vzpointer_lower=&vz2
 *                     vzpointer_upper=&vz1
 *                     PHIpointer_lower=&PHI2             # <<<<<<<<<<<<<<
 *                     PHIpointer_upper=&PHI1
 *                     PSIpointer_lower=&PSI2
 */
          __pyx_v_PHIpointer_lower = (&__pyx_v_PHI2);

          /* "Full_Matrix.pyx":1472
 *                     vzpointer_upper=&vz1
 *                     PHIpointer_lower=&PHI2
 *                     PHIpointer_upper=&PHI1             # <<<<<<<<<<<<<<
 *                     PSIpointer_lower=&PSI2
 *                     PSIpointer_upper=&PSI1
 */
          __pyx_v_PHIpointer_upper = (&__pyx_v_PHI1);

          /* "Full_Matrix.pyx":1473
 *                     PHIpointer_lower=&PHI2
 *                     PHIpointer_upper=&PHI1
 *                     PSIpointer_lower=&PSI2             # <<<<<<<<<<<<<<
 *                     PSIpointer_upper=&PSI1
 *                     vzfilled=1
 */
          __pyx_v_PSIpointer_lower = (&__pyx_v_PSI2);

          /* "Full_Matrix.pyx":1474
 *                     PHIpointer_upper=&PHI1
 *                     PSIpointer_lower=&PSI2
 *                     PSIpointer_upper=&PSI1             # <<<<<<<<<<<<<<
 *                     vzfilled=1
 * 
 */
          __pyx_v_PSIpointer_upper = (&__pyx_v_PSI1);

          /* "Full_Matrix.pyx":1475
 *                     PSIpointer_lower=&PSI2
 *                     PSIpointer_upper=&PSI1
 *                     vzfilled=1             # <<<<<<<<<<<<<<
 * 
 *                 else:
 */
          __pyx_v_vzfilled = 1;

          /* "Full_Matrix.pyx":1468
 *                 UpperLayer=LR[ Upper ]
 *                 LowerLayer=LR[ Lower ]
 *                 if(vzfilled==2):             # <<<<<<<<<<<<<<
 *                     vzpointer_lower=&vz2
 *                     vzpointer_upper=&vz1
 */
          goto __pyx_L39;
        }

        /* "Full_Matrix.pyx":1478
 * 
 *                 else:
 *                     vzpointer_lower=&vz1             # <<<<<<<<<<<<<<
 *                     vzpointer_upper=&vz2
 *                     PHIpointer_lower=&PHI1
 */
        /*else*/ {
          __pyx_v_vzpointer_lower = (&__pyx_v_vz1);

          /* "Full_Matrix.pyx":1479
 *                 else:
 *                     vzpointer_lower=&vz1
 *                     vzpointer_upper=&vz2             # <<<<<<<<<<<<<<
 *                     PHIpointer_lower=&PHI1
 *                     PHIpointer_upper=&PHI2
 */
          __pyx_v_vzpointer_upper = (&__pyx_v_vz2);

          /* "Full_Matrix.pyx":1480
 *                     vzpointer_lower=&vz1
 *                     vzpointer_upper=&vz2
 *                     PHIpointer_lower=&PHI1             # <<<<<<<<<<<<<<
 *                     PHIpointer_upper=&PHI2
 *                     PSIpointer_lower=&PSI1
 */
          __pyx_v_PHIpointer_lower = (&__pyx_v_PHI1);

          /* "Full_Matrix.pyx":1481
 *                     vzpointer_upper=&vz2
 *                     PHIpointer_lower=&PHI1
 *                     PHIpointer_upper=&PHI2             # <<<<<<<<<<<<<<
 *                     PSIpointer_lower=&PSI1
 *                     PSIpointer_upper=&PSI2
 */
          __pyx_v_PHIpointer_upper = (&__pyx_v_PHI2);

          /* "Full_Matrix.pyx":1482
 *                     PHIpointer_lower=&PHI1
 *                     PHIpointer_upper=&PHI2
 *                     PSIpointer_lower=&PSI1             # <<<<<<<<<<<<<<
 *                     PSIpointer_upper=&PSI2
 *                     vzfilled=2
 */
          __pyx_v_PSIpointer_lower = (&__pyx_v_PSI1);

          /* "Full_Matrix.pyx":1483
 *                     PHIpointer_upper=&PHI2
 *                     PSIpointer_lower=&PSI1
 *                     PSIpointer_upper=&PSI2             # <<<<<<<<<<<<<<
 *                     vzfilled=2
 * 
 */
          __pyx_v_PSIpointer_upper = (&__pyx_v_PSI2);

          /* "Full_Matrix.pyx":1484
 *                     PSIpointer_lower=&PSI1
 *                     PSIpointer_upper=&PSI2
 *                     vzfilled=2             # <<<<<<<<<<<<<<
 * 
 *                 Mult4x4_leftside_diag(&Pcomp, &p)
 */
          __pyx_v_vzfilled = 2;
        }
        __pyx_L39:;

        /* "Full_Matrix.pyx":1486
 *                     vzfilled=2
 * 
 *                 Mult4x4_leftside_diag(&Pcomp, &p)             # <<<<<<<<<<<<<<
 *                 Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)
 * 
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside_diag((&__pyx_v_Pcomp), (&__pyx_v_p));

        /* "Full_Matrix.pyx":1487
 * 
 *                 Mult4x4_leftside_diag(&Pcomp, &p)
 *                 Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)             # <<<<<<<<<<<<<<
 * 
 * #                ###
 */
        __pyx_f_11Full_Matrix_Calculate_Phi_and_Psi(__pyx_v_UpperLayer, (&(__pyx_v_AllMS[(__pyx_v_Layer_type_to_Matrixsafe[__pyx_v_Upper])])), __pyx_v_vy, __pyx_v_vzvz, __pyx_v_vyvy, __pyx_v_vzpointer_upper, __pyx_v_PHIpointer_upper, __pyx_v_PSIpointer_upper);

        /* "Full_Matrix.pyx":1494
 * #                ###
 * 
 *                 for k in range(4):             # <<<<<<<<<<<<<<
 *                     p[k] = exp(-ik0*UpperLayer.Thickness*(vzpointer_upper[0])[k] )
 * 
 */
        for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
          __pyx_v_k = __pyx_t_1;

          /* "Full_Matrix.pyx":1495
 * 
 *                 for k in range(4):
 *                     p[k] = exp(-ik0*UpperLayer.Thickness*(vzpointer_upper[0])[k] )             # <<<<<<<<<<<<<<
 * 
 *                 Mult4x4_leftside(PSIpointer_lower, PHIpointer_upper)
 */
          (__pyx_v_p[__pyx_v_k]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_ik0), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), ((__pyx_v_vzpointer_upper[0])[__pyx_v_k])));
        }

        /* "Full_Matrix.pyx":1497
 *                     p[k] = exp(-ik0*UpperLayer.Thickness*(vzpointer_upper[0])[k] )
 * 
 *                 Mult4x4_leftside(PSIpointer_lower, PHIpointer_upper)             # <<<<<<<<<<<<<<
 *                 roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 *                 for k in range(4):
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside(__pyx_v_PSIpointer_lower, __pyx_v_PHIpointer_upper);

        /* "Full_Matrix.pyx":1498
 * 
 *                 Mult4x4_leftside(PSIpointer_lower, PHIpointer_upper)
 *                 roughfac =-0.5*quadr( LowerLayer.Roughness*k0)             # <<<<<<<<<<<<<<
 *                 for k in range(4):
 *                     for l in range(4):
 */
        __pyx_v_roughfac = (-0.5 * __pyx_f_35Mathematical_Functions_Reflectivity_quadr((__pyx_v_LowerLayer.Roughness * __pyx_v_k0)));

        /* "Full_Matrix.pyx":1499
 *                 Mult4x4_leftside(PSIpointer_lower, PHIpointer_upper)
 *                 roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 *                 for k in range(4):             # <<<<<<<<<<<<<<
 *                     for l in range(4):
 *                         W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )
 */
        for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
          __pyx_v_k = __pyx_t_1;

          /* "Full_Matrix.pyx":1500
 *                 roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 *                 for k in range(4):
 *                     for l in range(4):             # <<<<<<<<<<<<<<
 *                         W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )
 *                         (PSIpointer_lower[0])[k][l]*=W[k][l]
 */
          for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
            __pyx_v_l = __pyx_t_6;

            /* "Full_Matrix.pyx":1501
 *                 for k in range(4):
 *                     for l in range(4):
 *                         W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )             # <<<<<<<<<<<<<<
 *                         (PSIpointer_lower[0])[k][l]*=W[k][l]
 * #                for k in range(4):
 */
            ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]) = exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_diff_double(((__pyx_v_vzpointer_lower[0])[__pyx_v_k]), ((__pyx_v_vzpointer_upper[0])[__pyx_v_l])))));

            /* "Full_Matrix.pyx":1502
 *                     for l in range(4):
 *                         W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )
 *                         (PSIpointer_lower[0])[k][l]*=W[k][l]             # <<<<<<<<<<<<<<
 * #                for k in range(4):
 * #                    for l in range(4):
 */
            __pyx_t_9 = 0;
            __pyx_t_7 = __pyx_v_k;
            __pyx_t_8 = __pyx_v_l;
            (((__pyx_v_PSIpointer_lower[__pyx_t_9])[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_prod_double((((__pyx_v_PSIpointer_lower[__pyx_t_9])[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]));
          }
        }

        /* "Full_Matrix.pyx":1508
 * #                        (PSIpointer_lower[0])[k][l]*=W[k][l]
 * 
 *                 Mult4x4_leftside(&Pcomp, PSIpointer_lower)             # <<<<<<<<<<<<<<
 * 
 *             Mult4x4_leftside_diag(&Pcomp, &p)
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside((&__pyx_v_Pcomp), __pyx_v_PSIpointer_lower);
      }

      /* "Full_Matrix.pyx":1510
 *                 Mult4x4_leftside(&Pcomp, PSIpointer_lower)
 * 
 *             Mult4x4_leftside_diag(&Pcomp, &p)             # <<<<<<<<<<<<<<
 * 
 *             Mult4x4_leftside(PSIpointer_upper, &PHIcomp_start)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside_diag((&__pyx_v_Pcomp), (&__pyx_v_p));

      /* "Full_Matrix.pyx":1512
 *             Mult4x4_leftside_diag(&Pcomp, &p)
 * 
 *             Mult4x4_leftside(PSIpointer_upper, &PHIcomp_start)             # <<<<<<<<<<<<<<
 *             roughfac =-0.5*quadr( UpperLayer.Roughness*k0)
 *             for k in range(4):
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside(__pyx_v_PSIpointer_upper, (&__pyx_v_PHIcomp_start));

      /* "Full_Matrix.pyx":1513
 * 
 *             Mult4x4_leftside(PSIpointer_upper, &PHIcomp_start)
 *             roughfac =-0.5*quadr( UpperLayer.Roughness*k0)             # <<<<<<<<<<<<<<
 *             for k in range(4):
 *                 for l in range(4):
 */
      __pyx_v_roughfac = (-0.5 * __pyx_f_35Mathematical_Functions_Reflectivity_quadr((__pyx_v_UpperLayer.Roughness * __pyx_v_k0)));

      /* "Full_Matrix.pyx":1514
 *             Mult4x4_leftside(PSIpointer_upper, &PHIcomp_start)
 *             roughfac =-0.5*quadr( UpperLayer.Roughness*k0)
 *             for k in range(4):             # <<<<<<<<<<<<<<
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( (vzpointer_upper[0])[k] - vzstart[l] ) )
 */
      for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
        __pyx_v_k = __pyx_t_1;

        /* "Full_Matrix.pyx":1515
 *             roughfac =-0.5*quadr( UpperLayer.Roughness*k0)
 *             for k in range(4):
 *                 for l in range(4):             # <<<<<<<<<<<<<<
 *                     W[k][l] =exp(roughfac*cquadr( (vzpointer_upper[0])[k] - vzstart[l] ) )
 *                     (PSIpointer_upper[0])[k][l]*=W[k][l]
 */
        for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
          __pyx_v_l = __pyx_t_6;

          /* "Full_Matrix.pyx":1516
 *             for k in range(4):
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( (vzpointer_upper[0])[k] - vzstart[l] ) )             # <<<<<<<<<<<<<<
 *                     (PSIpointer_upper[0])[k][l]*=W[k][l]
 * 
 */
          ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]) = exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_diff_double(((__pyx_v_vzpointer_upper[0])[__pyx_v_k]), (__pyx_v_vzstart[__pyx_v_l])))));

          /* "Full_Matrix.pyx":1517
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( (vzpointer_upper[0])[k] - vzstart[l] ) )
 *                     (PSIpointer_upper[0])[k][l]*=W[k][l]             # <<<<<<<<<<<<<<
 * 
 *             Mult4x4_leftside(&Pcomp, PSIpointer_upper)
 */
          __pyx_t_9 = 0;
          __pyx_t_7 = __pyx_v_k;
          __pyx_t_8 = __pyx_v_l;
          (((__pyx_v_PSIpointer_upper[__pyx_t_9])[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_prod_double((((__pyx_v_PSIpointer_upper[__pyx_t_9])[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]));
        }
      }

      /* "Full_Matrix.pyx":1519
 *                     (PSIpointer_upper[0])[k][l]*=W[k][l]
 * 
 *             Mult4x4_leftside(&Pcomp, PSIpointer_upper)             # <<<<<<<<<<<<<<
 * 
 *             Mult4x4_leftside_diag(&Pcomp, &pstart)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside((&__pyx_v_Pcomp), __pyx_v_PSIpointer_upper);

      /* "Full_Matrix.pyx":1521
 *             Mult4x4_leftside(&Pcomp, PSIpointer_upper)
 * 
 *             Mult4x4_leftside_diag(&Pcomp, &pstart)             # <<<<<<<<<<<<<<
 * 
 *          #   NormalizePSI(&Pcomp)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside_diag((&__pyx_v_Pcomp), (&__pyx_v_pstart));

      /* "Full_Matrix.pyx":1530
 * #                Pcomp[k][2]=Pcomp[k][2]/(1.1)
 * #                Pcomp[k][3]=Pcomp[k][3]/(1.1)
 *             Matrixexp( &Pcomp, MLREP[i]-1 )             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_f_33Multilayer_Functions_Reflectivity_Matrixexp((&__pyx_v_Pcomp), ((__pyx_v_MLREP[__pyx_v_i]) - 1));

      /* "Full_Matrix.pyx":1539
 * #                    print(Pcomp[k][l])
 * 
 *             Mult4x4_leftside_diag(&P, &pstart)             # <<<<<<<<<<<<<<
 * 
 *             Mult4x4_leftside(&P, &Pcomp)
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside_diag((&__pyx_v_P), (&__pyx_v_pstart));

      /* "Full_Matrix.pyx":1541
 *             Mult4x4_leftside_diag(&P, &pstart)
 * 
 *             Mult4x4_leftside(&P, &Pcomp)             # <<<<<<<<<<<<<<
 * 
 *             Lower=MLCOMP[i][0]
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside((&__pyx_v_P), (&__pyx_v_Pcomp));

      /* "Full_Matrix.pyx":1543
 *             Mult4x4_leftside(&P, &Pcomp)
 * 
 *             Lower=MLCOMP[i][0]             # <<<<<<<<<<<<<<
 *             Upper=MLCOMP[i][1]
 *             UpperLayer=LR[ Upper ]
 */
      __pyx_v_Lower = ((__pyx_v_MLCOMP[__pyx_v_i])[0]);

      /* "Full_Matrix.pyx":1544
 * 
 *             Lower=MLCOMP[i][0]
 *             Upper=MLCOMP[i][1]             # <<<<<<<<<<<<<<
 *             UpperLayer=LR[ Upper ]
 *             LowerLayer=LR[ Lower ]
 */
      __pyx_v_Upper = ((__pyx_v_MLCOMP[__pyx_v_i])[1]);

      /* "Full_Matrix.pyx":1545
 *             Lower=MLCOMP[i][0]
 *             Upper=MLCOMP[i][1]
 *             UpperLayer=LR[ Upper ]             # <<<<<<<<<<<<<<
 *             LowerLayer=LR[ Lower ]
 * 
 */
      __pyx_v_UpperLayer = (__pyx_v_LR[__pyx_v_Upper]);

      /* "Full_Matrix.pyx":1546
 *             Upper=MLCOMP[i][1]
 *             UpperLayer=LR[ Upper ]
 *             LowerLayer=LR[ Lower ]             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_LowerLayer = (__pyx_v_LR[__pyx_v_Lower]);

      /* "Full_Matrix.pyx":1561
 * 
 * 
 *             Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, &vz2, &PHI2, &PSI2)             # <<<<<<<<<<<<<<
 *             Mult4x4_leftside(&PSIcomp_start, &PHI2)
 *             roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 */
      __pyx_f_11Full_Matrix_Calculate_Phi_and_Psi(__pyx_v_UpperLayer, (&(__pyx_v_AllMS[(__pyx_v_Layer_type_to_Matrixsafe[__pyx_v_Upper])])), __pyx_v_vy, __pyx_v_vzvz, __pyx_v_vyvy, (&__pyx_v_vz2), (&__pyx_v_PHI2), (&__pyx_v_PSI2));

      /* "Full_Matrix.pyx":1562
 * 
 *             Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, &vz2, &PHI2, &PSI2)
 *             Mult4x4_leftside(&PSIcomp_start, &PHI2)             # <<<<<<<<<<<<<<
 *             roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 * #            for k in range(4):
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside((&__pyx_v_PSIcomp_start), (&__pyx_v_PHI2));

      /* "Full_Matrix.pyx":1563
 *             Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, &vz2, &PHI2, &PSI2)
 *             Mult4x4_leftside(&PSIcomp_start, &PHI2)
 *             roughfac =-0.5*quadr( LowerLayer.Roughness*k0)             # <<<<<<<<<<<<<<
 * #            for k in range(4):
 * #                for l in range(4):
 */
      __pyx_v_roughfac = (-0.5 * __pyx_f_35Mathematical_Functions_Reflectivity_quadr((__pyx_v_LowerLayer.Roughness * __pyx_v_k0)));

      /* "Full_Matrix.pyx":1569
 * #                    PSIcomp_start[k][l]*=W[k][l]
 * 
 *             for k in range(4):             # <<<<<<<<<<<<<<
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( vzstart[k] - vz2[l] ) )
 */
      for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
        __pyx_v_k = __pyx_t_1;

        /* "Full_Matrix.pyx":1570
 * 
 *             for k in range(4):
 *                 for l in range(4):             # <<<<<<<<<<<<<<
 *                     W[k][l] =exp(roughfac*cquadr( vzstart[k] - vz2[l] ) )
 *                     PSIcomp_start[k][l]*=W[k][l]
 */
        for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
          __pyx_v_l = __pyx_t_6;

          /* "Full_Matrix.pyx":1571
 *             for k in range(4):
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( vzstart[k] - vz2[l] ) )             # <<<<<<<<<<<<<<
 *                     PSIcomp_start[k][l]*=W[k][l]
 * 
 */
          ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]) = exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_diff_double((__pyx_v_vzstart[__pyx_v_k]), (__pyx_v_vz2[__pyx_v_l])))));

          /* "Full_Matrix.pyx":1572
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( vzstart[k] - vz2[l] ) )
 *                     PSIcomp_start[k][l]*=W[k][l]             # <<<<<<<<<<<<<<
 * 
 * 
 */
          __pyx_t_7 = __pyx_v_k;
          __pyx_t_8 = __pyx_v_l;
          ((__pyx_v_PSIcomp_start[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_prod_double(((__pyx_v_PSIcomp_start[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]));
        }
      }

      /* "Full_Matrix.pyx":1579
 * #                for l in range(4):
 * #                    print( (PSIpointer_lower[0])[k][l]  )
 *             Mult4x4_leftside(&P,&PSIcomp_start)             # <<<<<<<<<<<<<<
 *             vzfilled=2
 * 
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside((&__pyx_v_P), (&__pyx_v_PSIcomp_start));

      /* "Full_Matrix.pyx":1580
 * #                    print( (PSIpointer_lower[0])[k][l]  )
 *             Mult4x4_leftside(&P,&PSIcomp_start)
 *             vzfilled=2             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_vzfilled = 2;

      /* "Full_Matrix.pyx":1583
 * 
 * 
 *             for k in range(4):             # <<<<<<<<<<<<<<
 *                 p[k] = exp(-ik0*UpperLayer.Thickness*vz2[k] )
 * 
 */
      for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
        __pyx_v_k = __pyx_t_1;

        /* "Full_Matrix.pyx":1584
 * 
 *             for k in range(4):
 *                 p[k] = exp(-ik0*UpperLayer.Thickness*vz2[k] )             # <<<<<<<<<<<<<<
 * 
 *             j=1
 */
        (__pyx_v_p[__pyx_v_k]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_ik0), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), (__pyx_v_vz2[__pyx_v_k])));
      }

      /* "Full_Matrix.pyx":1586
 *                 p[k] = exp(-ik0*UpperLayer.Thickness*vz2[k] )
 * 
 *             j=1             # <<<<<<<<<<<<<<
 *             while j<( MLLENGTH[i]-1 ):
 *                 Lower=MLCOMP[i][j]
 */
      __pyx_v_j = 1;

      /* "Full_Matrix.pyx":1587
 * 
 *             j=1
 *             while j<( MLLENGTH[i]-1 ):             # <<<<<<<<<<<<<<
 *                 Lower=MLCOMP[i][j]
 *                 Upper=MLCOMP[i][(j+1)]
 */
      while (1) {
        __pyx_t_5 = ((__pyx_v_j < ((__pyx_v_MLLENGTH[__pyx_v_i]) - 1)) != 0);
        if (!__pyx_t_5) break;

        /* "Full_Matrix.pyx":1588
 *             j=1
 *             while j<( MLLENGTH[i]-1 ):
 *                 Lower=MLCOMP[i][j]             # <<<<<<<<<<<<<<
 *                 Upper=MLCOMP[i][(j+1)]
 *                 j+=1
 */
        __pyx_v_Lower = ((__pyx_v_MLCOMP[__pyx_v_i])[__pyx_v_j]);

        /* "Full_Matrix.pyx":1589
 *             while j<( MLLENGTH[i]-1 ):
 *                 Lower=MLCOMP[i][j]
 *                 Upper=MLCOMP[i][(j+1)]             # <<<<<<<<<<<<<<
 *                 j+=1
 *                 UpperLayer=LR[ Upper ]
 */
        __pyx_v_Upper = ((__pyx_v_MLCOMP[__pyx_v_i])[(__pyx_v_j + 1)]);

        /* "Full_Matrix.pyx":1590
 *                 Lower=MLCOMP[i][j]
 *                 Upper=MLCOMP[i][(j+1)]
 *                 j+=1             # <<<<<<<<<<<<<<
 *                 UpperLayer=LR[ Upper ]
 *                 LowerLayer=LR[ Lower ]
 */
        __pyx_v_j = (__pyx_v_j + 1);

        /* "Full_Matrix.pyx":1591
 *                 Upper=MLCOMP[i][(j+1)]
 *                 j+=1
 *                 UpperLayer=LR[ Upper ]             # <<<<<<<<<<<<<<
 *                 LowerLayer=LR[ Lower ]
 *                 if(vzfilled==2):
 */
        __pyx_v_UpperLayer = (__pyx_v_LR[__pyx_v_Upper]);

        /* "Full_Matrix.pyx":1592
 *                 j+=1
 *                 UpperLayer=LR[ Upper ]
 *                 LowerLayer=LR[ Lower ]             # <<<<<<<<<<<<<<
 *                 if(vzfilled==2):
 *                     vzpointer_lower=&vz2
 */
        __pyx_v_LowerLayer = (__pyx_v_LR[__pyx_v_Lower]);

        /* "Full_Matrix.pyx":1593
 *                 UpperLayer=LR[ Upper ]
 *                 LowerLayer=LR[ Lower ]
 *                 if(vzfilled==2):             # <<<<<<<<<<<<<<
 *                     vzpointer_lower=&vz2
 *                     vzpointer_upper=&vz1
 */
        __pyx_t_5 = ((__pyx_v_vzfilled == 2) != 0);
        if (__pyx_t_5) {

          /* "Full_Matrix.pyx":1594
 *                 LowerLayer=LR[ Lower ]
 *                 if(vzfilled==2):
 *                     vzpointer_lower=&vz2             # <<<<<<<<<<<<<<
 *                     vzpointer_upper=&vz1
 *                     PHIpointer_lower=&PHI2
 */
          __pyx_v_vzpointer_lower = (&__pyx_v_vz2);

          /* "Full_Matrix.pyx":1595
 *                 if(vzfilled==2):
 *                     vzpointer_lower=&vz2
 *                     vzpointer_upper=&vz1             # <<<<<<<<<<<<<<
 *                     PHIpointer_lower=&PHI2
 *                     PHIpointer_upper=&PHI1
 */
          __pyx_v_vzpointer_upper = (&__pyx_v_vz1);

          /* "Full_Matrix.pyx":1596
 *                     vzpointer_lower=&vz2
 *                     vzpointer_upper=&vz1
 *                     PHIpointer_lower=&PHI2             # <<<<<<<<<<<<<<
 *                     PHIpointer_upper=&PHI1
 *                     PSIpointer_lower=&PSI2
 */
          __pyx_v_PHIpointer_lower = (&__pyx_v_PHI2);

          /* "Full_Matrix.pyx":1597
 *                     vzpointer_upper=&vz1
 *                     PHIpointer_lower=&PHI2
 *                     PHIpointer_upper=&PHI1             # <<<<<<<<<<<<<<
 *                     PSIpointer_lower=&PSI2
 *                     PSIpointer_upper=&PSI1
 */
          __pyx_v_PHIpointer_upper = (&__pyx_v_PHI1);

          /* "Full_Matrix.pyx":1598
 *                     PHIpointer_lower=&PHI2
 *                     PHIpointer_upper=&PHI1
 *                     PSIpointer_lower=&PSI2             # <<<<<<<<<<<<<<
 *                     PSIpointer_upper=&PSI1
 *                     vzfilled=1
 */
          __pyx_v_PSIpointer_lower = (&__pyx_v_PSI2);

          /* "Full_Matrix.pyx":1599
 *                     PHIpointer_upper=&PHI1
 *                     PSIpointer_lower=&PSI2
 *                     PSIpointer_upper=&PSI1             # <<<<<<<<<<<<<<
 *                     vzfilled=1
 * 
 */
          __pyx_v_PSIpointer_upper = (&__pyx_v_PSI1);

          /* "Full_Matrix.pyx":1600
 *                     PSIpointer_lower=&PSI2
 *                     PSIpointer_upper=&PSI1
 *                     vzfilled=1             # <<<<<<<<<<<<<<
 * 
 *                 else:
 */
          __pyx_v_vzfilled = 1;

          /* "Full_Matrix.pyx":1593
 *                 UpperLayer=LR[ Upper ]
 *                 LowerLayer=LR[ Lower ]
 *                 if(vzfilled==2):             # <<<<<<<<<<<<<<
 *                     vzpointer_lower=&vz2
 *                     vzpointer_upper=&vz1
 */
          goto __pyx_L58;
        }

        /* "Full_Matrix.pyx":1603
 * 
 *                 else:
 *                     vzpointer_lower=&vz1             # <<<<<<<<<<<<<<
 *                     vzpointer_upper=&vz2
 *                     PHIpointer_lower=&PHI1
 */
        /*else*/ {
          __pyx_v_vzpointer_lower = (&__pyx_v_vz1);

          /* "Full_Matrix.pyx":1604
 *                 else:
 *                     vzpointer_lower=&vz1
 *                     vzpointer_upper=&vz2             # <<<<<<<<<<<<<<
 *                     PHIpointer_lower=&PHI1
 *                     PHIpointer_upper=&PHI2
 */
          __pyx_v_vzpointer_upper = (&__pyx_v_vz2);

          /* "Full_Matrix.pyx":1605
 *                     vzpointer_lower=&vz1
 *                     vzpointer_upper=&vz2
 *                     PHIpointer_lower=&PHI1             # <<<<<<<<<<<<<<
 *                     PHIpointer_upper=&PHI2
 *                     PSIpointer_lower=&PSI1
 */
          __pyx_v_PHIpointer_lower = (&__pyx_v_PHI1);

          /* "Full_Matrix.pyx":1606
 *                     vzpointer_upper=&vz2
 *                     PHIpointer_lower=&PHI1
 *                     PHIpointer_upper=&PHI2             # <<<<<<<<<<<<<<
 *                     PSIpointer_lower=&PSI1
 *                     PSIpointer_upper=&PSI2
 */
          __pyx_v_PHIpointer_upper = (&__pyx_v_PHI2);

          /* "Full_Matrix.pyx":1607
 *                     PHIpointer_lower=&PHI1
 *                     PHIpointer_upper=&PHI2
 *                     PSIpointer_lower=&PSI1             # <<<<<<<<<<<<<<
 *                     PSIpointer_upper=&PSI2
 *                     vzfilled=2
 */
          __pyx_v_PSIpointer_lower = (&__pyx_v_PSI1);

          /* "Full_Matrix.pyx":1608
 *                     PHIpointer_upper=&PHI2
 *                     PSIpointer_lower=&PSI1
 *                     PSIpointer_upper=&PSI2             # <<<<<<<<<<<<<<
 *                     vzfilled=2
 *                 Mult4x4_leftside_diag(&P, &p)
 */
          __pyx_v_PSIpointer_upper = (&__pyx_v_PSI2);

          /* "Full_Matrix.pyx":1609
 *                     PSIpointer_lower=&PSI1
 *                     PSIpointer_upper=&PSI2
 *                     vzfilled=2             # <<<<<<<<<<<<<<
 *                 Mult4x4_leftside_diag(&P, &p)
 *                 Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)
 */
          __pyx_v_vzfilled = 2;
        }
        __pyx_L58:;

        /* "Full_Matrix.pyx":1610
 *                     PSIpointer_upper=&PSI2
 *                     vzfilled=2
 *                 Mult4x4_leftside_diag(&P, &p)             # <<<<<<<<<<<<<<
 *                 Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)
 *                 for k in range(4):
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside_diag((&__pyx_v_P), (&__pyx_v_p));

        /* "Full_Matrix.pyx":1611
 *                     vzfilled=2
 *                 Mult4x4_leftside_diag(&P, &p)
 *                 Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)             # <<<<<<<<<<<<<<
 *                 for k in range(4):
 *                     p[k] = exp(-ik0*UpperLayer.Thickness*(vzpointer_upper[0])[k] )
 */
        __pyx_f_11Full_Matrix_Calculate_Phi_and_Psi(__pyx_v_UpperLayer, (&(__pyx_v_AllMS[(__pyx_v_Layer_type_to_Matrixsafe[__pyx_v_Upper])])), __pyx_v_vy, __pyx_v_vzvz, __pyx_v_vyvy, __pyx_v_vzpointer_upper, __pyx_v_PHIpointer_upper, __pyx_v_PSIpointer_upper);

        /* "Full_Matrix.pyx":1612
 *                 Mult4x4_leftside_diag(&P, &p)
 *                 Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)
 *                 for k in range(4):             # <<<<<<<<<<<<<<
 *                     p[k] = exp(-ik0*UpperLayer.Thickness*(vzpointer_upper[0])[k] )
 * 
 */
        for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
          __pyx_v_k = __pyx_t_1;

          /* "Full_Matrix.pyx":1613
 *                 Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)
 *                 for k in range(4):
 *                     p[k] = exp(-ik0*UpperLayer.Thickness*(vzpointer_upper[0])[k] )             # <<<<<<<<<<<<<<
 * 
 *                 Mult4x4_leftside(PSIpointer_lower, PHIpointer_upper)
 */
          (__pyx_v_p[__pyx_v_k]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_ik0), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), ((__pyx_v_vzpointer_upper[0])[__pyx_v_k])));
        }

        /* "Full_Matrix.pyx":1615
 *                     p[k] = exp(-ik0*UpperLayer.Thickness*(vzpointer_upper[0])[k] )
 * 
 *                 Mult4x4_leftside(PSIpointer_lower, PHIpointer_upper)             # <<<<<<<<<<<<<<
 *                 roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 * #                for k in range(4):
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside(__pyx_v_PSIpointer_lower, __pyx_v_PHIpointer_upper);

        /* "Full_Matrix.pyx":1616
 * 
 *                 Mult4x4_leftside(PSIpointer_lower, PHIpointer_upper)
 *                 roughfac =-0.5*quadr( LowerLayer.Roughness*k0)             # <<<<<<<<<<<<<<
 * #                for k in range(4):
 * #                    for l in range(4):
 */
        __pyx_v_roughfac = (-0.5 * __pyx_f_35Mathematical_Functions_Reflectivity_quadr((__pyx_v_LowerLayer.Roughness * __pyx_v_k0)));

        /* "Full_Matrix.pyx":1621
 * #                        W[k][l] =exp(roughfac*cquadr(vz1[k] - vz2[l] ) )
 * #                        (PSIpointer_lower[0])[k][l]*=W[k][l]
 *                 for k in range(4):             # <<<<<<<<<<<<<<
 *                     for l in range(4):
 *                         W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )
 */
        for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
          __pyx_v_k = __pyx_t_1;

          /* "Full_Matrix.pyx":1622
 * #                        (PSIpointer_lower[0])[k][l]*=W[k][l]
 *                 for k in range(4):
 *                     for l in range(4):             # <<<<<<<<<<<<<<
 *                         W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )
 *                         (PSIpointer_lower[0])[k][l]*=W[k][l]
 */
          for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
            __pyx_v_l = __pyx_t_6;

            /* "Full_Matrix.pyx":1623
 *                 for k in range(4):
 *                     for l in range(4):
 *                         W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )             # <<<<<<<<<<<<<<
 *                         (PSIpointer_lower[0])[k][l]*=W[k][l]
 *                 Mult4x4_leftside(&P, PSIpointer_lower)
 */
            ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]) = exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_diff_double(((__pyx_v_vzpointer_lower[0])[__pyx_v_k]), ((__pyx_v_vzpointer_upper[0])[__pyx_v_l])))));

            /* "Full_Matrix.pyx":1624
 *                     for l in range(4):
 *                         W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )
 *                         (PSIpointer_lower[0])[k][l]*=W[k][l]             # <<<<<<<<<<<<<<
 *                 Mult4x4_leftside(&P, PSIpointer_lower)
 * 
 */
            __pyx_t_9 = 0;
            __pyx_t_7 = __pyx_v_k;
            __pyx_t_8 = __pyx_v_l;
            (((__pyx_v_PSIpointer_lower[__pyx_t_9])[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_prod_double((((__pyx_v_PSIpointer_lower[__pyx_t_9])[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]));
          }
        }

        /* "Full_Matrix.pyx":1625
 *                         W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )
 *                         (PSIpointer_lower[0])[k][l]*=W[k][l]
 *                 Mult4x4_leftside(&P, PSIpointer_lower)             # <<<<<<<<<<<<<<
 * 
 *             Lower=MLCOMP[i][  MLLENGTH[i]-1 ]
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside((&__pyx_v_P), __pyx_v_PSIpointer_lower);
      }

      /* "Full_Matrix.pyx":1627
 *                 Mult4x4_leftside(&P, PSIpointer_lower)
 * 
 *             Lower=MLCOMP[i][  MLLENGTH[i]-1 ]             # <<<<<<<<<<<<<<
 *             LowerLayer=LR[ Lower ]
 *             if(vzfilled==2):
 */
      __pyx_v_Lower = ((__pyx_v_MLCOMP[__pyx_v_i])[((__pyx_v_MLLENGTH[__pyx_v_i]) - 1)]);

      /* "Full_Matrix.pyx":1628
 * 
 *             Lower=MLCOMP[i][  MLLENGTH[i]-1 ]
 *             LowerLayer=LR[ Lower ]             # <<<<<<<<<<<<<<
 *             if(vzfilled==2):
 *                 vzpointer_lower=&vz2
 */
      __pyx_v_LowerLayer = (__pyx_v_LR[__pyx_v_Lower]);

      /* "Full_Matrix.pyx":1629
 *             Lower=MLCOMP[i][  MLLENGTH[i]-1 ]
 *             LowerLayer=LR[ Lower ]
 *             if(vzfilled==2):             # <<<<<<<<<<<<<<
 *                 vzpointer_lower=&vz2
 *                 vzpointer_upper=&vz1
 */
      __pyx_t_5 = ((__pyx_v_vzfilled == 2) != 0);
      if (__pyx_t_5) {

        /* "Full_Matrix.pyx":1630
 *             LowerLayer=LR[ Lower ]
 *             if(vzfilled==2):
 *                 vzpointer_lower=&vz2             # <<<<<<<<<<<<<<
 *                 vzpointer_upper=&vz1
 *                 PHIpointer_lower=&PHI2
 */
        __pyx_v_vzpointer_lower = (&__pyx_v_vz2);

        /* "Full_Matrix.pyx":1631
 *             if(vzfilled==2):
 *                 vzpointer_lower=&vz2
 *                 vzpointer_upper=&vz1             # <<<<<<<<<<<<<<
 *                 PHIpointer_lower=&PHI2
 *                 PHIpointer_upper=&PHI1
 */
        __pyx_v_vzpointer_upper = (&__pyx_v_vz1);

        /* "Full_Matrix.pyx":1632
 *                 vzpointer_lower=&vz2
 *                 vzpointer_upper=&vz1
 *                 PHIpointer_lower=&PHI2             # <<<<<<<<<<<<<<
 *                 PHIpointer_upper=&PHI1
 *                 PSIpointer_lower=&PSI2
 */
        __pyx_v_PHIpointer_lower = (&__pyx_v_PHI2);

        /* "Full_Matrix.pyx":1633
 *                 vzpointer_upper=&vz1
 *                 PHIpointer_lower=&PHI2
 *                 PHIpointer_upper=&PHI1             # <<<<<<<<<<<<<<
 *                 PSIpointer_lower=&PSI2
 *                 PSIpointer_upper=&PSI1
 */
        __pyx_v_PHIpointer_upper = (&__pyx_v_PHI1);

        /* "Full_Matrix.pyx":1634
 *                 PHIpointer_lower=&PHI2
 *                 PHIpointer_upper=&PHI1
 *                 PSIpointer_lower=&PSI2             # <<<<<<<<<<<<<<
 *                 PSIpointer_upper=&PSI1
 *                 vzfilled=1
 */
        __pyx_v_PSIpointer_lower = (&__pyx_v_PSI2);

        /* "Full_Matrix.pyx":1635
 *                 PHIpointer_upper=&PHI1
 *                 PSIpointer_lower=&PSI2
 *                 PSIpointer_upper=&PSI1             # <<<<<<<<<<<<<<
 *                 vzfilled=1
 * 
 */
        __pyx_v_PSIpointer_upper = (&__pyx_v_PSI1);

        /* "Full_Matrix.pyx":1636
 *                 PSIpointer_lower=&PSI2
 *                 PSIpointer_upper=&PSI1
 *                 vzfilled=1             # <<<<<<<<<<<<<<
 * 
 *             else:
 */
        __pyx_v_vzfilled = 1;

        /* "Full_Matrix.pyx":1629
 *             Lower=MLCOMP[i][  MLLENGTH[i]-1 ]
 *             LowerLayer=LR[ Lower ]
 *             if(vzfilled==2):             # <<<<<<<<<<<<<<
 *                 vzpointer_lower=&vz2
 *                 vzpointer_upper=&vz1
 */
        goto __pyx_L65;
      }

      /* "Full_Matrix.pyx":1639
 * 
 *             else:
 *                 vzpointer_lower=&vz1             # <<<<<<<<<<<<<<
 *                 vzpointer_upper=&vz2
 *                 PHIpointer_lower=&PHI1
 */
      /*else*/ {
        __pyx_v_vzpointer_lower = (&__pyx_v_vz1);

        /* "Full_Matrix.pyx":1640
 *             else:
 *                 vzpointer_lower=&vz1
 *                 vzpointer_upper=&vz2             # <<<<<<<<<<<<<<
 *                 PHIpointer_lower=&PHI1
 *                 PHIpointer_upper=&PHI2
 */
        __pyx_v_vzpointer_upper = (&__pyx_v_vz2);

        /* "Full_Matrix.pyx":1641
 *                 vzpointer_lower=&vz1
 *                 vzpointer_upper=&vz2
 *                 PHIpointer_lower=&PHI1             # <<<<<<<<<<<<<<
 *                 PHIpointer_upper=&PHI2
 *                 PSIpointer_lower=&PSI1
 */
        __pyx_v_PHIpointer_lower = (&__pyx_v_PHI1);

        /* "Full_Matrix.pyx":1642
 *                 vzpointer_upper=&vz2
 *                 PHIpointer_lower=&PHI1
 *                 PHIpointer_upper=&PHI2             # <<<<<<<<<<<<<<
 *                 PSIpointer_lower=&PSI1
 *                 PSIpointer_upper=&PSI2
 */
        __pyx_v_PHIpointer_upper = (&__pyx_v_PHI2);

        /* "Full_Matrix.pyx":1643
 *                 PHIpointer_lower=&PHI1
 *                 PHIpointer_upper=&PHI2
 *                 PSIpointer_lower=&PSI1             # <<<<<<<<<<<<<<
 *                 PSIpointer_upper=&PSI2
 *                 vzfilled=2
 */
        __pyx_v_PSIpointer_lower = (&__pyx_v_PSI1);

        /* "Full_Matrix.pyx":1644
 *                 PHIpointer_upper=&PHI2
 *                 PSIpointer_lower=&PSI1
 *                 PSIpointer_upper=&PSI2             # <<<<<<<<<<<<<<
 *                 vzfilled=2
 * 
 */
        __pyx_v_PSIpointer_upper = (&__pyx_v_PSI2);

        /* "Full_Matrix.pyx":1645
 *                 PSIpointer_lower=&PSI1
 *                 PSIpointer_upper=&PSI2
 *                 vzfilled=2             # <<<<<<<<<<<<<<
 * 
 *             Mult4x4_leftside_diag(&P, &p)
 */
        __pyx_v_vzfilled = 2;
      }
      __pyx_L65:;

      /* "Full_Matrix.pyx":1647
 *                 vzfilled=2
 * 
 *             Mult4x4_leftside_diag(&P, &p)             # <<<<<<<<<<<<<<
 *             if(i!=Cap):
 *                 Upper=MLCOMP[i+1][0]
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside_diag((&__pyx_v_P), (&__pyx_v_p));

      /* "Full_Matrix.pyx":1648
 * 
 *             Mult4x4_leftside_diag(&P, &p)
 *             if(i!=Cap):             # <<<<<<<<<<<<<<
 *                 Upper=MLCOMP[i+1][0]
 *                 UpperLayer=LR[ Upper ]
 */
      __pyx_t_5 = ((__pyx_v_i != __pyx_v_Cap) != 0);
      if (__pyx_t_5) {

        /* "Full_Matrix.pyx":1649
 *             Mult4x4_leftside_diag(&P, &p)
 *             if(i!=Cap):
 *                 Upper=MLCOMP[i+1][0]             # <<<<<<<<<<<<<<
 *                 UpperLayer=LR[ Upper ]
 *                 Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)
 */
        __pyx_v_Upper = ((__pyx_v_MLCOMP[(__pyx_v_i + 1)])[0]);

        /* "Full_Matrix.pyx":1650
 *             if(i!=Cap):
 *                 Upper=MLCOMP[i+1][0]
 *                 UpperLayer=LR[ Upper ]             # <<<<<<<<<<<<<<
 *                 Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)
 *                 Mult4x4_leftside(PSIpointer_lower, PHIpointer_upper)
 */
        __pyx_v_UpperLayer = (__pyx_v_LR[__pyx_v_Upper]);

        /* "Full_Matrix.pyx":1651
 *                 Upper=MLCOMP[i+1][0]
 *                 UpperLayer=LR[ Upper ]
 *                 Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)             # <<<<<<<<<<<<<<
 *                 Mult4x4_leftside(PSIpointer_lower, PHIpointer_upper)
 *             else:
 */
        __pyx_f_11Full_Matrix_Calculate_Phi_and_Psi(__pyx_v_UpperLayer, (&(__pyx_v_AllMS[(__pyx_v_Layer_type_to_Matrixsafe[__pyx_v_Upper])])), __pyx_v_vy, __pyx_v_vzvz, __pyx_v_vyvy, __pyx_v_vzpointer_upper, __pyx_v_PHIpointer_upper, __pyx_v_PSIpointer_upper);

        /* "Full_Matrix.pyx":1652
 *                 UpperLayer=LR[ Upper ]
 *                 Calculate_Phi_and_Psi(UpperLayer, &( AllMS[ Layer_type_to_Matrixsafe[Upper] ] ), vy, vzvz, vyvy, vzpointer_upper, PHIpointer_upper, PSIpointer_upper)
 *                 Mult4x4_leftside(PSIpointer_lower, PHIpointer_upper)             # <<<<<<<<<<<<<<
 *             else:
 * 
 */
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside(__pyx_v_PSIpointer_lower, __pyx_v_PHIpointer_upper);

        /* "Full_Matrix.pyx":1648
 * 
 *             Mult4x4_leftside_diag(&P, &p)
 *             if(i!=Cap):             # <<<<<<<<<<<<<<
 *                 Upper=MLCOMP[i+1][0]
 *                 UpperLayer=LR[ Upper ]
 */
        goto __pyx_L66;
      }

      /* "Full_Matrix.pyx":1655
 *             else:
 * 
 *                 Mult4x4_leftside(PSIpointer_lower, &PHIvac)             # <<<<<<<<<<<<<<
 *                 (vzpointer_upper[0])[0]=vzvac
 *                 (vzpointer_upper[0])[1]=vzvac
 */
      /*else*/ {
        __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside(__pyx_v_PSIpointer_lower, (&__pyx_v_PHIvac));

        /* "Full_Matrix.pyx":1656
 * 
 *                 Mult4x4_leftside(PSIpointer_lower, &PHIvac)
 *                 (vzpointer_upper[0])[0]=vzvac             # <<<<<<<<<<<<<<
 *                 (vzpointer_upper[0])[1]=vzvac
 *                 (vzpointer_upper[0])[2]=-vzvac
 */
        ((__pyx_v_vzpointer_upper[0])[0]) = __pyx_t_double_complex_from_parts(__pyx_v_vzvac, 0);

        /* "Full_Matrix.pyx":1657
 *                 Mult4x4_leftside(PSIpointer_lower, &PHIvac)
 *                 (vzpointer_upper[0])[0]=vzvac
 *                 (vzpointer_upper[0])[1]=vzvac             # <<<<<<<<<<<<<<
 *                 (vzpointer_upper[0])[2]=-vzvac
 *                 (vzpointer_upper[0])[3]=-vzvac
 */
        ((__pyx_v_vzpointer_upper[0])[1]) = __pyx_t_double_complex_from_parts(__pyx_v_vzvac, 0);

        /* "Full_Matrix.pyx":1658
 *                 (vzpointer_upper[0])[0]=vzvac
 *                 (vzpointer_upper[0])[1]=vzvac
 *                 (vzpointer_upper[0])[2]=-vzvac             # <<<<<<<<<<<<<<
 *                 (vzpointer_upper[0])[3]=-vzvac
 *             roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 */
        ((__pyx_v_vzpointer_upper[0])[2]) = __pyx_t_double_complex_from_parts((-__pyx_v_vzvac), 0);

        /* "Full_Matrix.pyx":1659
 *                 (vzpointer_upper[0])[1]=vzvac
 *                 (vzpointer_upper[0])[2]=-vzvac
 *                 (vzpointer_upper[0])[3]=-vzvac             # <<<<<<<<<<<<<<
 *             roughfac =-0.5*quadr( LowerLayer.Roughness*k0)
 * #            for k in range(4):
 */
        ((__pyx_v_vzpointer_upper[0])[3]) = __pyx_t_double_complex_from_parts((-__pyx_v_vzvac), 0);
      }
      __pyx_L66:;

      /* "Full_Matrix.pyx":1660
 *                 (vzpointer_upper[0])[2]=-vzvac
 *                 (vzpointer_upper[0])[3]=-vzvac
 *             roughfac =-0.5*quadr( LowerLayer.Roughness*k0)             # <<<<<<<<<<<<<<
 * #            for k in range(4):
 * #                for l in range(4):
 */
      __pyx_v_roughfac = (-0.5 * __pyx_f_35Mathematical_Functions_Reflectivity_quadr((__pyx_v_LowerLayer.Roughness * __pyx_v_k0)));

      /* "Full_Matrix.pyx":1665
 * #                    W[k][l] =exp(roughfac*cquadr(vz1[k] - vz2[l] ) )
 * #                    (PSIpointer_lower[0])[k][l]*=W[k][l]
 *             for k in range(4):             # <<<<<<<<<<<<<<
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )
 */
      for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
        __pyx_v_k = __pyx_t_1;

        /* "Full_Matrix.pyx":1666
 * #                    (PSIpointer_lower[0])[k][l]*=W[k][l]
 *             for k in range(4):
 *                 for l in range(4):             # <<<<<<<<<<<<<<
 *                     W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )
 *                     (PSIpointer_lower[0])[k][l]*=W[k][l]
 */
        for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
          __pyx_v_l = __pyx_t_6;

          /* "Full_Matrix.pyx":1667
 *             for k in range(4):
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )             # <<<<<<<<<<<<<<
 *                     (PSIpointer_lower[0])[k][l]*=W[k][l]
 * 
 */
          ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]) = exp(__Pyx_c_prod_double(__pyx_t_double_complex_from_parts(__pyx_v_roughfac, 0), __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_diff_double(((__pyx_v_vzpointer_lower[0])[__pyx_v_k]), ((__pyx_v_vzpointer_upper[0])[__pyx_v_l])))));

          /* "Full_Matrix.pyx":1668
 *                 for l in range(4):
 *                     W[k][l] =exp(roughfac*cquadr( (vzpointer_lower[0])[k] - (vzpointer_upper[0])[l] ) )
 *                     (PSIpointer_lower[0])[k][l]*=W[k][l]             # <<<<<<<<<<<<<<
 * 
 * #            print("hallo2")
 */
          __pyx_t_9 = 0;
          __pyx_t_7 = __pyx_v_k;
          __pyx_t_8 = __pyx_v_l;
          (((__pyx_v_PSIpointer_lower[__pyx_t_9])[__pyx_t_7])[__pyx_t_8]) = __Pyx_c_prod_double((((__pyx_v_PSIpointer_lower[__pyx_t_9])[__pyx_t_7])[__pyx_t_8]), ((__pyx_v_W[__pyx_v_k])[__pyx_v_l]));
        }
      }

      /* "Full_Matrix.pyx":1674
 * #                for l in range(4):
 * #                    print( (PSIpointer_lower[0])[k][l]  )
 *             Mult4x4_leftside(&P, PSIpointer_lower)             # <<<<<<<<<<<<<<
 * 
 *             for k in range(4):
 */
      __pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside((&__pyx_v_P), __pyx_v_PSIpointer_lower);

      /* "Full_Matrix.pyx":1676
 *             Mult4x4_leftside(&P, PSIpointer_lower)
 * 
 *             for k in range(4):             # <<<<<<<<<<<<<<
 *                 p[k] = exp(-ik0*UpperLayer.Thickness*(vzpointer_upper[0])[k] )
 * 
 */
      for (__pyx_t_1 = 0; __pyx_t_1 < 4; __pyx_t_1+=1) {
        __pyx_v_k = __pyx_t_1;

        /* "Full_Matrix.pyx":1677
 * 
 *             for k in range(4):
 *                 p[k] = exp(-ik0*UpperLayer.Thickness*(vzpointer_upper[0])[k] )             # <<<<<<<<<<<<<<
 * 
 * 
 */
        (__pyx_v_p[__pyx_v_k]) = exp(__Pyx_c_prod_double(__Pyx_c_prod_double(__Pyx_c_neg_double(__pyx_v_ik0), __pyx_t_double_complex_from_parts(__pyx_v_UpperLayer.Thickness, 0)), ((__pyx_v_vzpointer_upper[0])[__pyx_v_k])));
      }
    }
    __pyx_L12:;

    /* "Full_Matrix.pyx":1680
 * 
 * 
 *         i+=1             # <<<<<<<<<<<<<<
 * 
 *     divide=1.0/(P[0][1]*P[1][0]-P[1][1]*P[0][0])
 */
    __pyx_v_i = (__pyx_v_i + 1);
  }

  /* "Full_Matrix.pyx":1682
 *         i+=1
 * 
 *     divide=1.0/(P[0][1]*P[1][0]-P[1][1]*P[0][0])             # <<<<<<<<<<<<<<
 *  #   print( P[1][1], P[0][2], P[0][1], P[1][2], divide )
 *     (rtot[0])[0][0]=(P[1][1]*P[0][2]-P[0][1]*P[1][2])*divide # Incoming 1 reflected 1
 */
  __pyx_t_10 = __pyx_t_double_complex_from_parts(1.0, 0);
  __pyx_t_11 = __Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_P[0])[1]), ((__pyx_v_P[1])[0])), __Pyx_c_prod_double(((__pyx_v_P[1])[1]), ((__pyx_v_P[0])[0])));
  if (unlikely(__Pyx_c_is_zero_double(__pyx_t_11))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 1682, __pyx_L1_error)
  }
  __pyx_v_divide = __Pyx_c_quot_double(__pyx_t_10, __pyx_t_11);

  /* "Full_Matrix.pyx":1684
 *     divide=1.0/(P[0][1]*P[1][0]-P[1][1]*P[0][0])
 *  #   print( P[1][1], P[0][2], P[0][1], P[1][2], divide )
 *     (rtot[0])[0][0]=(P[1][1]*P[0][2]-P[0][1]*P[1][2])*divide # Incoming 1 reflected 1             # <<<<<<<<<<<<<<
 *     (rtot[0])[0][1]=-(P[1][1]*P[0][3]-P[0][1]*P[1][3])*divide # Incoming 2 reflected 1
 *     (rtot[0])[1][0]=-(P[0][0]*P[1][2]-P[1][0]*P[0][2])*divide # Incoming 1 reflected 2
 */
  (((__pyx_v_rtot[0])[0])[0]) = __Pyx_c_prod_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_P[1])[1]), ((__pyx_v_P[0])[2])), __Pyx_c_prod_double(((__pyx_v_P[0])[1]), ((__pyx_v_P[1])[2]))), __pyx_v_divide);

  /* "Full_Matrix.pyx":1685
 *  #   print( P[1][1], P[0][2], P[0][1], P[1][2], divide )
 *     (rtot[0])[0][0]=(P[1][1]*P[0][2]-P[0][1]*P[1][2])*divide # Incoming 1 reflected 1
 *     (rtot[0])[0][1]=-(P[1][1]*P[0][3]-P[0][1]*P[1][3])*divide # Incoming 2 reflected 1             # <<<<<<<<<<<<<<
 *     (rtot[0])[1][0]=-(P[0][0]*P[1][2]-P[1][0]*P[0][2])*divide # Incoming 1 reflected 2
 *     (rtot[0])[1][1]=(P[0][0]*P[1][3]-P[1][0]*P[0][3])*divide # Incoming 2 reflected 2
 */
  (((__pyx_v_rtot[0])[0])[1]) = __Pyx_c_prod_double(__Pyx_c_neg_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_P[1])[1]), ((__pyx_v_P[0])[3])), __Pyx_c_prod_double(((__pyx_v_P[0])[1]), ((__pyx_v_P[1])[3])))), __pyx_v_divide);

  /* "Full_Matrix.pyx":1686
 *     (rtot[0])[0][0]=(P[1][1]*P[0][2]-P[0][1]*P[1][2])*divide # Incoming 1 reflected 1
 *     (rtot[0])[0][1]=-(P[1][1]*P[0][3]-P[0][1]*P[1][3])*divide # Incoming 2 reflected 1
 *     (rtot[0])[1][0]=-(P[0][0]*P[1][2]-P[1][0]*P[0][2])*divide # Incoming 1 reflected 2             # <<<<<<<<<<<<<<
 *     (rtot[0])[1][1]=(P[0][0]*P[1][3]-P[1][0]*P[0][3])*divide # Incoming 2 reflected 2
 */
  (((__pyx_v_rtot[0])[1])[0]) = __Pyx_c_prod_double(__Pyx_c_neg_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_P[0])[0]), ((__pyx_v_P[1])[2])), __Pyx_c_prod_double(((__pyx_v_P[1])[0]), ((__pyx_v_P[0])[2])))), __pyx_v_divide);

  /* "Full_Matrix.pyx":1687
 *     (rtot[0])[0][1]=-(P[1][1]*P[0][3]-P[0][1]*P[1][3])*divide # Incoming 2 reflected 1
 *     (rtot[0])[1][0]=-(P[0][0]*P[1][2]-P[1][0]*P[0][2])*divide # Incoming 1 reflected 2
 *     (rtot[0])[1][1]=(P[0][0]*P[1][3]-P[1][0]*P[0][3])*divide # Incoming 2 reflected 2             # <<<<<<<<<<<<<<
 */
  (((__pyx_v_rtot[0])[1])[1]) = __Pyx_c_prod_double(__Pyx_c_diff_double(__Pyx_c_prod_double(((__pyx_v_P[0])[0]), ((__pyx_v_P[1])[3])), __Pyx_c_prod_double(((__pyx_v_P[1])[0]), ((__pyx_v_P[0])[3]))), __pyx_v_divide);

  /* "Full_Matrix.pyx":1162
 * 
 * 
 * cdef void Full_Matrix(Heterostructure* HS, MatrixSafer *AllMS, int* Layer_type_to_Matrixsafe, double th, double wavelength, double complex (*rtot)[2][2]):             # <<<<<<<<<<<<<<
 *     cdef double k0=6.283185307179586/wavelength
 *     cdef double complex ik0=1j*k0
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("Full_Matrix.Full_Matrix", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "Mathematical_Functions_Reflectivity.pxd":24
 * cdef double Cmaxnorm(double complex x)
 * 
 * cdef inline double complex cquadr(double complex x):             # <<<<<<<<<<<<<<
 *     return x*x
 * 
 */

static CYTHON_INLINE __pyx_t_double_complex __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__pyx_t_double_complex __pyx_v_x) {
  __pyx_t_double_complex __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cquadr", 0);

  /* "Mathematical_Functions_Reflectivity.pxd":25
 * 
 * cdef inline double complex cquadr(double complex x):
 *     return x*x             # <<<<<<<<<<<<<<
 * 
 * cdef inline double complex ccube(double complex x):
 */
  __pyx_r = __Pyx_c_prod_double(__pyx_v_x, __pyx_v_x);
  goto __pyx_L0;

  /* "Mathematical_Functions_Reflectivity.pxd":24
 * cdef double Cmaxnorm(double complex x)
 * 
 * cdef inline double complex cquadr(double complex x):             # <<<<<<<<<<<<<<
 *     return x*x
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Mathematical_Functions_Reflectivity.pxd":27
 *     return x*x
 * 
 * cdef inline double complex ccube(double complex x):             # <<<<<<<<<<<<<<
 *     return x*x*x
 * 
 */

static CYTHON_INLINE __pyx_t_double_complex __pyx_f_35Mathematical_Functions_Reflectivity_ccube(__pyx_t_double_complex __pyx_v_x) {
  __pyx_t_double_complex __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ccube", 0);

  /* "Mathematical_Functions_Reflectivity.pxd":28
 * 
 * cdef inline double complex ccube(double complex x):
 *     return x*x*x             # <<<<<<<<<<<<<<
 * 
 * cdef inline double quadr(double x):
 */
  __pyx_r = __Pyx_c_prod_double(__Pyx_c_prod_double(__pyx_v_x, __pyx_v_x), __pyx_v_x);
  goto __pyx_L0;

  /* "Mathematical_Functions_Reflectivity.pxd":27
 *     return x*x
 * 
 * cdef inline double complex ccube(double complex x):             # <<<<<<<<<<<<<<
 *     return x*x*x
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Mathematical_Functions_Reflectivity.pxd":30
 *     return x*x*x
 * 
 * cdef inline double quadr(double x):             # <<<<<<<<<<<<<<
 *     return x*x
 * cdef inline double cabsquadr(double complex x):
 */

static CYTHON_INLINE double __pyx_f_35Mathematical_Functions_Reflectivity_quadr(double __pyx_v_x) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("quadr", 0);

  /* "Mathematical_Functions_Reflectivity.pxd":31
 * 
 * cdef inline double quadr(double x):
 *     return x*x             # <<<<<<<<<<<<<<
 * cdef inline double cabsquadr(double complex x):
 *     return quadr(x.real)+quadr(x.imag)
 */
  __pyx_r = (__pyx_v_x * __pyx_v_x);
  goto __pyx_L0;

  /* "Mathematical_Functions_Reflectivity.pxd":30
 *     return x*x*x
 * 
 * cdef inline double quadr(double x):             # <<<<<<<<<<<<<<
 *     return x*x
 * cdef inline double cabsquadr(double complex x):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Mathematical_Functions_Reflectivity.pxd":32
 * cdef inline double quadr(double x):
 *     return x*x
 * cdef inline double cabsquadr(double complex x):             # <<<<<<<<<<<<<<
 *     return quadr(x.real)+quadr(x.imag)
 * 
 */

static CYTHON_INLINE double __pyx_f_35Mathematical_Functions_Reflectivity_cabsquadr(__pyx_t_double_complex __pyx_v_x) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cabsquadr", 0);

  /* "Mathematical_Functions_Reflectivity.pxd":33
 *     return x*x
 * cdef inline double cabsquadr(double complex x):
 *     return quadr(x.real)+quadr(x.imag)             # <<<<<<<<<<<<<<
 * 
 * cdef inline double cabsvalue(double complex x):
 */
  __pyx_r = (__pyx_f_35Mathematical_Functions_Reflectivity_quadr(__Pyx_CREAL(__pyx_v_x)) + __pyx_f_35Mathematical_Functions_Reflectivity_quadr(__Pyx_CIMAG(__pyx_v_x)));
  goto __pyx_L0;

  /* "Mathematical_Functions_Reflectivity.pxd":32
 * cdef inline double quadr(double x):
 *     return x*x
 * cdef inline double cabsquadr(double complex x):             # <<<<<<<<<<<<<<
 *     return quadr(x.real)+quadr(x.imag)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Mathematical_Functions_Reflectivity.pxd":35
 *     return quadr(x.real)+quadr(x.imag)
 * 
 * cdef inline double cabsvalue(double complex x):             # <<<<<<<<<<<<<<
 *     return dsqrt( quadr(x.real)+quadr(x.imag) )
 * 
 */

static CYTHON_INLINE double __pyx_f_35Mathematical_Functions_Reflectivity_cabsvalue(__pyx_t_double_complex __pyx_v_x) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cabsvalue", 0);

  /* "Mathematical_Functions_Reflectivity.pxd":36
 * 
 * cdef inline double cabsvalue(double complex x):
 *     return dsqrt( quadr(x.real)+quadr(x.imag) )             # <<<<<<<<<<<<<<
 * 
 * cdef double dabsvalue(double x) nogil
 */
  __pyx_r = sqrt((__pyx_f_35Mathematical_Functions_Reflectivity_quadr(__Pyx_CREAL(__pyx_v_x)) + __pyx_f_35Mathematical_Functions_Reflectivity_quadr(__Pyx_CIMAG(__pyx_v_x))));
  goto __pyx_L0;

  /* "Mathematical_Functions_Reflectivity.pxd":35
 *     return quadr(x.real)+quadr(x.imag)
 * 
 * cdef inline double cabsvalue(double complex x):             # <<<<<<<<<<<<<<
 *     return dsqrt( quadr(x.real)+quadr(x.imag) )
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Mathematical_Functions_Reflectivity.pxd":40
 * cdef double dabsvalue(double x) nogil
 * 
 * cdef inline double complex cconj(double complex x):             # <<<<<<<<<<<<<<
 *     return x.real -1.j*x.imag
 * 
 */

static CYTHON_INLINE __pyx_t_double_complex __pyx_f_35Mathematical_Functions_Reflectivity_cconj(__pyx_t_double_complex __pyx_v_x) {
  __pyx_t_double_complex __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cconj", 0);

  /* "Mathematical_Functions_Reflectivity.pxd":41
 * 
 * cdef inline double complex cconj(double complex x):
 *     return x.real -1.j*x.imag             # <<<<<<<<<<<<<<
 * 
 * cdef inline double two_pi_div_360():
 */
  __pyx_r = __Pyx_c_diff_double(__pyx_t_double_complex_from_parts(__Pyx_CREAL(__pyx_v_x), 0), __Pyx_c_prod_double(__pyx_t_double_complex_from_parts(0, 1.0), __pyx_t_double_complex_from_parts(__Pyx_CIMAG(__pyx_v_x), 0)));
  goto __pyx_L0;

  /* "Mathematical_Functions_Reflectivity.pxd":40
 * cdef double dabsvalue(double x) nogil
 * 
 * cdef inline double complex cconj(double complex x):             # <<<<<<<<<<<<<<
 *     return x.real -1.j*x.imag
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Mathematical_Functions_Reflectivity.pxd":43
 *     return x.real -1.j*x.imag
 * 
 * cdef inline double two_pi_div_360():             # <<<<<<<<<<<<<<
 *     return 0.017453292519943295
 * 
 */

static CYTHON_INLINE double __pyx_f_35Mathematical_Functions_Reflectivity_two_pi_div_360(void) {
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("two_pi_div_360", 0);

  /* "Mathematical_Functions_Reflectivity.pxd":44
 * 
 * cdef inline double two_pi_div_360():
 *     return 0.017453292519943295             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0.017453292519943295;
  goto __pyx_L0;

  /* "Mathematical_Functions_Reflectivity.pxd":43
 *     return x.real -1.j*x.imag
 * 
 * cdef inline double two_pi_div_360():             # <<<<<<<<<<<<<<
 *     return 0.017453292519943295
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Reflectivity_Sigma.pxd":29
 * 
 * 
 * cdef inline double complex CalculateVZsigma(double vyvy, double complex cx):             # <<<<<<<<<<<<<<
 *     return sqrt(1.+cx-vyvy)
 * 
 */

static CYTHON_INLINE __pyx_t_double_complex __pyx_f_18Reflectivity_Sigma_CalculateVZsigma(double __pyx_v_vyvy, __pyx_t_double_complex __pyx_v_cx) {
  __pyx_t_double_complex __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CalculateVZsigma", 0);

  /* "Reflectivity_Sigma.pxd":30
 * 
 * cdef inline double complex CalculateVZsigma(double vyvy, double complex cx):
 *     return sqrt(1.+cx-vyvy)             # <<<<<<<<<<<<<<
 * 
 * cdef inline double complex Calculate_rsigma_precisely(double complex vz1, double complex vz2, double complex cx1, double complex cx2):
 */
  __pyx_r = sqrt(__Pyx_c_diff_double(__Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_cx), __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0)));
  goto __pyx_L0;

  /* "Reflectivity_Sigma.pxd":29
 * 
 * 
 * cdef inline double complex CalculateVZsigma(double vyvy, double complex cx):             # <<<<<<<<<<<<<<
 *     return sqrt(1.+cx-vyvy)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Reflectivity_Sigma.pxd":32
 *     return sqrt(1.+cx-vyvy)
 * 
 * cdef inline double complex Calculate_rsigma_precisely(double complex vz1, double complex vz2, double complex cx1, double complex cx2):             # <<<<<<<<<<<<<<
 *     return (cx1-cx2)/cquadr(vz1+vz2)
 * 
 */

static CYTHON_INLINE __pyx_t_double_complex __pyx_f_18Reflectivity_Sigma_Calculate_rsigma_precisely(__pyx_t_double_complex __pyx_v_vz1, __pyx_t_double_complex __pyx_v_vz2, __pyx_t_double_complex __pyx_v_cx1, __pyx_t_double_complex __pyx_v_cx2) {
  __pyx_t_double_complex __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_double_complex __pyx_t_1;
  __pyx_t_double_complex __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Calculate_rsigma_precisely", 0);

  /* "Reflectivity_Sigma.pxd":33
 * 
 * cdef inline double complex Calculate_rsigma_precisely(double complex vz1, double complex vz2, double complex cx1, double complex cx2):
 *     return (cx1-cx2)/cquadr(vz1+vz2)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_c_diff_double(__pyx_v_cx1, __pyx_v_cx2);
  __pyx_t_2 = __pyx_f_35Mathematical_Functions_Reflectivity_cquadr(__Pyx_c_sum_double(__pyx_v_vz1, __pyx_v_vz2));
  if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(1, 33, __pyx_L1_error)
  }
  __pyx_r = __Pyx_c_quot_double(__pyx_t_1, __pyx_t_2);
  goto __pyx_L0;

  /* "Reflectivity_Sigma.pxd":32
 *     return sqrt(1.+cx-vyvy)
 * 
 * cdef inline double complex Calculate_rsigma_precisely(double complex vz1, double complex vz2, double complex cx1, double complex cx2):             # <<<<<<<<<<<<<<
 *     return (cx1-cx2)/cquadr(vz1+vz2)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("Reflectivity_Sigma.Calculate_rsigma_precisely", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = __pyx_t_double_complex_from_parts(0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "Reflectivity_Pi.pxd":29
 * 
 * 
 * cdef inline double complex CalculateVZpi(double vyvy, double complex cy, double complex cz):             # <<<<<<<<<<<<<<
 *     return sqrt((1.-vyvy/(1.+cz))*(1+cy))
 * 
 */

static CYTHON_INLINE __pyx_t_double_complex __pyx_f_15Reflectivity_Pi_CalculateVZpi(double __pyx_v_vyvy, __pyx_t_double_complex __pyx_v_cy, __pyx_t_double_complex __pyx_v_cz) {
  __pyx_t_double_complex __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_double_complex __pyx_t_1;
  __pyx_t_double_complex __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CalculateVZpi", 0);

  /* "Reflectivity_Pi.pxd":30
 * 
 * cdef inline double complex CalculateVZpi(double vyvy, double complex cy, double complex cz):
 *     return sqrt((1.-vyvy/(1.+cz))*(1+cy))             # <<<<<<<<<<<<<<
 * 
 * cdef double complex Calculate_rpi_precisely(double vyvy, double complex vz1, double complex vz2, double complex cy1,double complex cy2, double complex cz1, double complex cz2)
 */
  __pyx_t_1 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
  __pyx_t_2 = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_cz);
  if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(2, 30, __pyx_L1_error)
  }
  __pyx_r = sqrt(__Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1., 0), __Pyx_c_quot_double(__pyx_t_1, __pyx_t_2)), __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1, 0), __pyx_v_cy)));
  goto __pyx_L0;

  /* "Reflectivity_Pi.pxd":29
 * 
 * 
 * cdef inline double complex CalculateVZpi(double vyvy, double complex cy, double complex cz):             # <<<<<<<<<<<<<<
 *     return sqrt((1.-vyvy/(1.+cz))*(1+cy))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("Reflectivity_Pi.CalculateVZpi", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = __pyx_t_double_complex_from_parts(0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "MOKE_transversal.pxd":28
 * from Multilayer_Functions_Reflectivity cimport Calculate_Multilayer
 * 
 * cdef inline double complex CalculateVZpi_m(double vyvy, double complex cy, double complex cz, double complex cg):             # <<<<<<<<<<<<<<
 *     return sqrt((1.-vyvy/(1.+cz))*(1+cy)+cg*cg/(1+cz))
 * 
 */

static CYTHON_INLINE __pyx_t_double_complex __pyx_f_16MOKE_transversal_CalculateVZpi_m(double __pyx_v_vyvy, __pyx_t_double_complex __pyx_v_cy, __pyx_t_double_complex __pyx_v_cz, __pyx_t_double_complex __pyx_v_cg) {
  __pyx_t_double_complex __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_double_complex __pyx_t_1;
  __pyx_t_double_complex __pyx_t_2;
  __pyx_t_double_complex __pyx_t_3;
  __pyx_t_double_complex __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CalculateVZpi_m", 0);

  /* "MOKE_transversal.pxd":29
 * 
 * cdef inline double complex CalculateVZpi_m(double vyvy, double complex cy, double complex cz, double complex cg):
 *     return sqrt((1.-vyvy/(1.+cz))*(1+cy)+cg*cg/(1+cz))             # <<<<<<<<<<<<<<
 * 
 * cdef void Relevant_Stuff_for_xmag_precisely(double complex cy1, double complex cy2, double complex cz1, double complex cz2, \
 */
  __pyx_t_1 = __pyx_t_double_complex_from_parts(__pyx_v_vyvy, 0);
  __pyx_t_2 = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1., 0), __pyx_v_cz);
  if (unlikely(__Pyx_c_is_zero_double(__pyx_t_2))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(3, 29, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_c_prod_double(__pyx_v_cg, __pyx_v_cg);
  __pyx_t_4 = __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1, 0), __pyx_v_cz);
  if (unlikely(__Pyx_c_is_zero_double(__pyx_t_4))) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(3, 29, __pyx_L1_error)
  }
  __pyx_r = sqrt(__Pyx_c_sum_double(__Pyx_c_prod_double(__Pyx_c_diff_double(__pyx_t_double_complex_from_parts(1., 0), __Pyx_c_quot_double(__pyx_t_1, __pyx_t_2)), __Pyx_c_sum_double(__pyx_t_double_complex_from_parts(1, 0), __pyx_v_cy)), __Pyx_c_quot_double(__pyx_t_3, __pyx_t_4)));
  goto __pyx_L0;

  /* "MOKE_transversal.pxd":28
 * from Multilayer_Functions_Reflectivity cimport Calculate_Multilayer
 * 
 * cdef inline double complex CalculateVZpi_m(double vyvy, double complex cy, double complex cz, double complex cg):             # <<<<<<<<<<<<<<
 *     return sqrt((1.-vyvy/(1.+cz))*(1+cy)+cg*cg/(1+cz))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("MOKE_transversal.CalculateVZpi_m", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = __pyx_t_double_complex_from_parts(0, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_Full_Matrix(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_Full_Matrix},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "Full_Matrix",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 155, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_3_ = PyFloat_FromDouble(3.); if (unlikely(!__pyx_float_3_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_4_ = PyFloat_FromDouble(4.); if (unlikely(!__pyx_float_4_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("Reduce_complexity_of_chi", (void (*)(void))__pyx_f_11Full_Matrix_Reduce_complexity_of_chi, "void (struct __pyx_t_10Structural_CLayer *, double, int *, int *, int *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("Fill_Matrixsafer", (void (*)(void))__pyx_f_11Full_Matrix_Fill_Matrixsafer, "void (struct __pyx_t_10Structural_MatrixSafer *, struct __pyx_t_10Structural_CLayer)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("NormalizePHI", (void (*)(void))__pyx_f_11Full_Matrix_NormalizePHI, "void (__pyx_t_double_complex (*)[4][4])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("NormalizePSI", (void (*)(void))__pyx_f_11Full_Matrix_NormalizePSI, "void (__pyx_t_double_complex (*)[4][4])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("Calculate_Phi_and_Psi", (void (*)(void))__pyx_f_11Full_Matrix_Calculate_Phi_and_Psi, "void (struct __pyx_t_10Structural_CLayer, struct __pyx_t_10Structural_MatrixSafer *, double, double, double, __pyx_t_double_complex (*)[4], __pyx_t_double_complex (*)[4][4], __pyx_t_double_complex (*)[4][4])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("Full_Matrix", (void (*)(void))__pyx_f_11Full_Matrix_Full_Matrix, "void (struct __pyx_t_10Structural_Heterostructure *, struct __pyx_t_10Structural_MatrixSafer *, int *, double, double, __pyx_t_double_complex (*)[2][2])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("Mathematical_Functions_Reflectivity"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "Cmaxnorm", (void (**)(void))&__pyx_f_35Mathematical_Functions_Reflectivity_Cmaxnorm, "double (__pyx_t_double_complex)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "Matrix4Invert", (void (**)(void))&__pyx_f_35Mathematical_Functions_Reflectivity_Matrix4Invert, "void (__pyx_t_double_complex (*)[4][4], __pyx_t_double_complex (*)[4][4])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "Mult4x4_leftside", (void (**)(void))&__pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside, "void (__pyx_t_double_complex (*)[4][4], __pyx_t_double_complex (*)[4][4])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "Mult4x4_leftside_diag", (void (**)(void))&__pyx_f_35Mathematical_Functions_Reflectivity_Mult4x4_leftside_diag, "void (__pyx_t_double_complex (*)[4][4], __pyx_t_double_complex (*)[4])") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("Multilayer_Functions_Reflectivity"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "Calculate_Multilayer", (void (**)(void))&__pyx_f_33Multilayer_Functions_Reflectivity_Calculate_Multilayer, "void (__pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, __pyx_t_double_complex *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "Matrixexp", (void (**)(void))&__pyx_f_33Multilayer_Functions_Reflectivity_Matrixexp, "void (__pyx_t_double_complex (*)[4][4], int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initFull_Matrix(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initFull_Matrix(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_Full_Matrix(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_Full_Matrix(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_Full_Matrix(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'Full_Matrix' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_Full_Matrix(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("Full_Matrix", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_Full_Matrix) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "Full_Matrix")) {
      if (unlikely(PyDict_SetItemString(modules, "Full_Matrix", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely(__Pyx_modinit_function_export_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "Full_Matrix.pyx":1
 * #<Pythonreflectivity: A Python Package for simulation of x-ray reflectivities of Heterostructures>             # <<<<<<<<<<<<<<
 * #    Copyright (C) <2017>  <Martin Zwiebler>
 * #
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "MOKE_transversal.pxd":28
 * from Multilayer_Functions_Reflectivity cimport Calculate_Multilayer
 * 
 * cdef inline double complex CalculateVZpi_m(double vyvy, double complex cy, double complex cz, double complex cg):             # <<<<<<<<<<<<<<
 *     return sqrt((1.-vyvy/(1.+cz))*(1+cy)+cg*cg/(1+cz))
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init Full_Matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init Full_Matrix");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* Declarations */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* FromPy */
static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject* o) {
    Py_complex cval;
#if !CYTHON_COMPILING_IN_PYPY
    if (PyComplex_CheckExact(o))
        cval = ((PyComplexObject *)o)->cval;
    else
#endif
        cval = PyComplex_AsCComplex(o);
    return __pyx_t_double_complex_from_parts(
               (double)cval.real,
               (double)cval.imag);
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
